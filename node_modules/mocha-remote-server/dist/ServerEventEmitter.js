"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.ServerEventEmitter = exports.ServerEvents = void 0;
const events_1 = require("events");
var ServerEvents;
(function (ServerEvents) {
    ServerEvents["STARTED"] = "started";
    ServerEvents["CONNECTION"] = "connection";
    ServerEvents["DISCONNECTION"] = "disconnection";
    ServerEvents["ERROR"] = "error";
    ServerEvents["END"] = "end";
})(ServerEvents || (exports.ServerEvents = ServerEvents = {}));
class ServerEventEmitter {
    constructor(debug) {
        this.emitter = new events_1.EventEmitter();
        for (const name of Object.values(ServerEvents)) {
            this.on(name, (...args) => debug(`'%s' event emitted: %o`, name, args));
        }
    }
    addListener(event, listener) {
        this.emitter.addListener(event, listener);
        return this;
    }
    removeListener(event, listener) {
        this.emitter.removeListener(event, listener);
        return this;
    }
    removeAllListeners(event) {
        this.emitter.removeAllListeners(event);
        return this;
    }
    on(event, listener) {
        this.emitter.on(event, listener);
        return this;
    }
    once(event, listener) {
        this.emitter.once(event, listener);
        return this;
    }
    off(event, listener) {
        this.emitter.off(event, listener);
        return this;
    }
    emit(event, ...args) {
        return this.emitter.emit(event, ...args);
    }
    setMaxListeners(n) {
        this.emitter.setMaxListeners(n);
        return this;
    }
    getMaxListeners() {
        return this.emitter.getMaxListeners();
    }
    listeners(event) {
        return this.emitter.listeners(event);
    }
    rawListeners(event) {
        return this.emitter.rawListeners(event);
    }
    listenerCount(event) {
        return this.emitter.listenerCount(event);
    }
    prependListener(event, listener) {
        this.emitter.prependListener(event, listener);
        return this;
    }
    prependOnceListener(event, listener) {
        this.emitter.prependOnceListener(event, listener);
        return this;
    }
    eventNames() {
        return Object.values(ServerEvents);
    }
}
exports.ServerEventEmitter = ServerEventEmitter;
//# sourceMappingURL=ServerEventEmitter.js.map