'use strict';

var WebSocket = require('ws');
var require$$1 = require('events');
var require$$0 = require('debug');
var require$$2 = require('util');
var flatted = require('flatted');

function _interopNamespaceDefault(e) {
	var n = Object.create(null);
	if (e) {
		Object.keys(e).forEach(function (k) {
			if (k !== 'default') {
				var d = Object.getOwnPropertyDescriptor(e, k);
				Object.defineProperty(n, k, d.get ? d : {
					enumerable: true,
					get: function () { return e[k]; }
				});
			}
		});
	}
	n.default = e;
	return Object.freeze(n);
}

function _mergeNamespaces(n, m) {
	m.forEach(function (e) {
		e && typeof e !== 'string' && !Array.isArray(e) && Object.keys(e).forEach(function (k) {
			if (k !== 'default' && !(k in n)) {
				var d = Object.getOwnPropertyDescriptor(e, k);
				Object.defineProperty(n, k, d.get ? d : {
					enumerable: true,
					get: function () { return e[k]; }
				});
			}
		});
	});
	return Object.freeze(n);
}

var flatted__namespace = /*#__PURE__*/_interopNamespaceDefault(flatted);

function getDefaultExportFromCjs (x) {
	return x && x.__esModule && Object.prototype.hasOwnProperty.call(x, 'default') ? x['default'] : x;
}

var mocha$2 = {};

/******/

(function (exports) {
	(() => { // webpackBootstrap
	/******/ 	var __webpack_modules__ = ({

	/***/ 46:
	/***/ (function(module, exports, __webpack_require__) {

	/* module decorator */ module = __webpack_require__.nmd(module);
	var __WEBPACK_AMD_DEFINE_RESULT__;/*! https://mths.be/he v1.2.0 by @mathias | MIT license */
(function(root) {

		// Detect free variables `exports`.
		var freeExports =  exports;

		// Detect free variable `module`.
		module &&
			module.exports == freeExports && module;

		// Detect free variable `global`, from Node.js or Browserified code,
		// and use it as `root`.
		var freeGlobal = typeof __webpack_require__.g == 'object' && __webpack_require__.g;
		if (freeGlobal.global === freeGlobal || freeGlobal.window === freeGlobal) ;

		/*--------------------------------------------------------------------------*/

		// All astral symbols.
		var regexAstralSymbols = /[\uD800-\uDBFF][\uDC00-\uDFFF]/g;
		// All ASCII symbols (not just printable ASCII) except those listed in the
		// first column of the overrides table.
		// https://html.spec.whatwg.org/multipage/syntax.html#table-charref-overrides
		var regexAsciiWhitelist = /[\x01-\x7F]/g;
		// All BMP symbols that are not ASCII newlines, printable ASCII symbols, or
		// code points listed in the first column of the overrides table on
		// https://html.spec.whatwg.org/multipage/syntax.html#table-charref-overrides.
		var regexBmpWhitelist = /[\x01-\t\x0B\f\x0E-\x1F\x7F\x81\x8D\x8F\x90\x9D\xA0-\uFFFF]/g;

		var regexEncodeNonAscii = /<\u20D2|=\u20E5|>\u20D2|\u205F\u200A|\u219D\u0338|\u2202\u0338|\u2220\u20D2|\u2229\uFE00|\u222A\uFE00|\u223C\u20D2|\u223D\u0331|\u223E\u0333|\u2242\u0338|\u224B\u0338|\u224D\u20D2|\u224E\u0338|\u224F\u0338|\u2250\u0338|\u2261\u20E5|\u2264\u20D2|\u2265\u20D2|\u2266\u0338|\u2267\u0338|\u2268\uFE00|\u2269\uFE00|\u226A\u0338|\u226A\u20D2|\u226B\u0338|\u226B\u20D2|\u227F\u0338|\u2282\u20D2|\u2283\u20D2|\u228A\uFE00|\u228B\uFE00|\u228F\u0338|\u2290\u0338|\u2293\uFE00|\u2294\uFE00|\u22B4\u20D2|\u22B5\u20D2|\u22D8\u0338|\u22D9\u0338|\u22DA\uFE00|\u22DB\uFE00|\u22F5\u0338|\u22F9\u0338|\u2933\u0338|\u29CF\u0338|\u29D0\u0338|\u2A6D\u0338|\u2A70\u0338|\u2A7D\u0338|\u2A7E\u0338|\u2AA1\u0338|\u2AA2\u0338|\u2AAC\uFE00|\u2AAD\uFE00|\u2AAF\u0338|\u2AB0\u0338|\u2AC5\u0338|\u2AC6\u0338|\u2ACB\uFE00|\u2ACC\uFE00|\u2AFD\u20E5|[\xA0-\u0113\u0116-\u0122\u0124-\u012B\u012E-\u014D\u0150-\u017E\u0192\u01B5\u01F5\u0237\u02C6\u02C7\u02D8-\u02DD\u0311\u0391-\u03A1\u03A3-\u03A9\u03B1-\u03C9\u03D1\u03D2\u03D5\u03D6\u03DC\u03DD\u03F0\u03F1\u03F5\u03F6\u0401-\u040C\u040E-\u044F\u0451-\u045C\u045E\u045F\u2002-\u2005\u2007-\u2010\u2013-\u2016\u2018-\u201A\u201C-\u201E\u2020-\u2022\u2025\u2026\u2030-\u2035\u2039\u203A\u203E\u2041\u2043\u2044\u204F\u2057\u205F-\u2063\u20AC\u20DB\u20DC\u2102\u2105\u210A-\u2113\u2115-\u211E\u2122\u2124\u2127-\u2129\u212C\u212D\u212F-\u2131\u2133-\u2138\u2145-\u2148\u2153-\u215E\u2190-\u219B\u219D-\u21A7\u21A9-\u21AE\u21B0-\u21B3\u21B5-\u21B7\u21BA-\u21DB\u21DD\u21E4\u21E5\u21F5\u21FD-\u2205\u2207-\u2209\u220B\u220C\u220F-\u2214\u2216-\u2218\u221A\u221D-\u2238\u223A-\u2257\u2259\u225A\u225C\u225F-\u2262\u2264-\u228B\u228D-\u229B\u229D-\u22A5\u22A7-\u22B0\u22B2-\u22BB\u22BD-\u22DB\u22DE-\u22E3\u22E6-\u22F7\u22F9-\u22FE\u2305\u2306\u2308-\u2310\u2312\u2313\u2315\u2316\u231C-\u231F\u2322\u2323\u232D\u232E\u2336\u233D\u233F\u237C\u23B0\u23B1\u23B4-\u23B6\u23DC-\u23DF\u23E2\u23E7\u2423\u24C8\u2500\u2502\u250C\u2510\u2514\u2518\u251C\u2524\u252C\u2534\u253C\u2550-\u256C\u2580\u2584\u2588\u2591-\u2593\u25A1\u25AA\u25AB\u25AD\u25AE\u25B1\u25B3-\u25B5\u25B8\u25B9\u25BD-\u25BF\u25C2\u25C3\u25CA\u25CB\u25EC\u25EF\u25F8-\u25FC\u2605\u2606\u260E\u2640\u2642\u2660\u2663\u2665\u2666\u266A\u266D-\u266F\u2713\u2717\u2720\u2736\u2758\u2772\u2773\u27C8\u27C9\u27E6-\u27ED\u27F5-\u27FA\u27FC\u27FF\u2902-\u2905\u290C-\u2913\u2916\u2919-\u2920\u2923-\u292A\u2933\u2935-\u2939\u293C\u293D\u2945\u2948-\u294B\u294E-\u2976\u2978\u2979\u297B-\u297F\u2985\u2986\u298B-\u2996\u299A\u299C\u299D\u29A4-\u29B7\u29B9\u29BB\u29BC\u29BE-\u29C5\u29C9\u29CD-\u29D0\u29DC-\u29DE\u29E3-\u29E5\u29EB\u29F4\u29F6\u2A00-\u2A02\u2A04\u2A06\u2A0C\u2A0D\u2A10-\u2A17\u2A22-\u2A27\u2A29\u2A2A\u2A2D-\u2A31\u2A33-\u2A3C\u2A3F\u2A40\u2A42-\u2A4D\u2A50\u2A53-\u2A58\u2A5A-\u2A5D\u2A5F\u2A66\u2A6A\u2A6D-\u2A75\u2A77-\u2A9A\u2A9D-\u2AA2\u2AA4-\u2AB0\u2AB3-\u2AC8\u2ACB\u2ACC\u2ACF-\u2ADB\u2AE4\u2AE6-\u2AE9\u2AEB-\u2AF3\u2AFD\uFB00-\uFB04]|\uD835[\uDC9C\uDC9E\uDC9F\uDCA2\uDCA5\uDCA6\uDCA9-\uDCAC\uDCAE-\uDCB9\uDCBB\uDCBD-\uDCC3\uDCC5-\uDCCF\uDD04\uDD05\uDD07-\uDD0A\uDD0D-\uDD14\uDD16-\uDD1C\uDD1E-\uDD39\uDD3B-\uDD3E\uDD40-\uDD44\uDD46\uDD4A-\uDD50\uDD52-\uDD6B]/g;
		var encodeMap = {'\xAD':'shy','\u200C':'zwnj','\u200D':'zwj','\u200E':'lrm','\u2063':'ic','\u2062':'it','\u2061':'af','\u200F':'rlm','\u200B':'ZeroWidthSpace','\u2060':'NoBreak','\u0311':'DownBreve','\u20DB':'tdot','\u20DC':'DotDot','\t':'Tab','\n':'NewLine','\u2008':'puncsp','\u205F':'MediumSpace','\u2009':'thinsp','\u200A':'hairsp','\u2004':'emsp13','\u2002':'ensp','\u2005':'emsp14','\u2003':'emsp','\u2007':'numsp','\xA0':'nbsp','\u205F\u200A':'ThickSpace','\u203E':'oline','_':'lowbar','\u2010':'dash','\u2013':'ndash','\u2014':'mdash','\u2015':'horbar',',':'comma',';':'semi','\u204F':'bsemi',':':'colon','\u2A74':'Colone','!':'excl','\xA1':'iexcl','?':'quest','\xBF':'iquest','.':'period','\u2025':'nldr','\u2026':'mldr','\xB7':'middot','\'':'apos','\u2018':'lsquo','\u2019':'rsquo','\u201A':'sbquo','\u2039':'lsaquo','\u203A':'rsaquo','"':'quot','\u201C':'ldquo','\u201D':'rdquo','\u201E':'bdquo','\xAB':'laquo','\xBB':'raquo','(':'lpar',')':'rpar','[':'lsqb',']':'rsqb','{':'lcub','}':'rcub','\u2308':'lceil','\u2309':'rceil','\u230A':'lfloor','\u230B':'rfloor','\u2985':'lopar','\u2986':'ropar','\u298B':'lbrke','\u298C':'rbrke','\u298D':'lbrkslu','\u298E':'rbrksld','\u298F':'lbrksld','\u2990':'rbrkslu','\u2991':'langd','\u2992':'rangd','\u2993':'lparlt','\u2994':'rpargt','\u2995':'gtlPar','\u2996':'ltrPar','\u27E6':'lobrk','\u27E7':'robrk','\u27E8':'lang','\u27E9':'rang','\u27EA':'Lang','\u27EB':'Rang','\u27EC':'loang','\u27ED':'roang','\u2772':'lbbrk','\u2773':'rbbrk','\u2016':'Vert','\xA7':'sect','\xB6':'para','@':'commat','*':'ast','/':'sol','undefined':null,'&':'amp','#':'num','%':'percnt','\u2030':'permil','\u2031':'pertenk','\u2020':'dagger','\u2021':'Dagger','\u2022':'bull','\u2043':'hybull','\u2032':'prime','\u2033':'Prime','\u2034':'tprime','\u2057':'qprime','\u2035':'bprime','\u2041':'caret','`':'grave','\xB4':'acute','\u02DC':'tilde','^':'Hat','\xAF':'macr','\u02D8':'breve','\u02D9':'dot','\xA8':'die','\u02DA':'ring','\u02DD':'dblac','\xB8':'cedil','\u02DB':'ogon','\u02C6':'circ','\u02C7':'caron','\xB0':'deg','\xA9':'copy','\xAE':'reg','\u2117':'copysr','\u2118':'wp','\u211E':'rx','\u2127':'mho','\u2129':'iiota','\u2190':'larr','\u219A':'nlarr','\u2192':'rarr','\u219B':'nrarr','\u2191':'uarr','\u2193':'darr','\u2194':'harr','\u21AE':'nharr','\u2195':'varr','\u2196':'nwarr','\u2197':'nearr','\u2198':'searr','\u2199':'swarr','\u219D':'rarrw','\u219D\u0338':'nrarrw','\u219E':'Larr','\u219F':'Uarr','\u21A0':'Rarr','\u21A1':'Darr','\u21A2':'larrtl','\u21A3':'rarrtl','\u21A4':'mapstoleft','\u21A5':'mapstoup','\u21A6':'map','\u21A7':'mapstodown','\u21A9':'larrhk','\u21AA':'rarrhk','\u21AB':'larrlp','\u21AC':'rarrlp','\u21AD':'harrw','\u21B0':'lsh','\u21B1':'rsh','\u21B2':'ldsh','\u21B3':'rdsh','\u21B5':'crarr','\u21B6':'cularr','\u21B7':'curarr','\u21BA':'olarr','\u21BB':'orarr','\u21BC':'lharu','\u21BD':'lhard','\u21BE':'uharr','\u21BF':'uharl','\u21C0':'rharu','\u21C1':'rhard','\u21C2':'dharr','\u21C3':'dharl','\u21C4':'rlarr','\u21C5':'udarr','\u21C6':'lrarr','\u21C7':'llarr','\u21C8':'uuarr','\u21C9':'rrarr','\u21CA':'ddarr','\u21CB':'lrhar','\u21CC':'rlhar','\u21D0':'lArr','\u21CD':'nlArr','\u21D1':'uArr','\u21D2':'rArr','\u21CF':'nrArr','\u21D3':'dArr','\u21D4':'iff','\u21CE':'nhArr','\u21D5':'vArr','\u21D6':'nwArr','\u21D7':'neArr','\u21D8':'seArr','\u21D9':'swArr','\u21DA':'lAarr','\u21DB':'rAarr','\u21DD':'zigrarr','\u21E4':'larrb','\u21E5':'rarrb','\u21F5':'duarr','\u21FD':'loarr','\u21FE':'roarr','\u21FF':'hoarr','\u2200':'forall','\u2201':'comp','\u2202':'part','\u2202\u0338':'npart','\u2203':'exist','\u2204':'nexist','\u2205':'empty','\u2207':'Del','\u2208':'in','\u2209':'notin','\u220B':'ni','\u220C':'notni','\u03F6':'bepsi','\u220F':'prod','\u2210':'coprod','\u2211':'sum','+':'plus','\xB1':'pm','\xF7':'div','\xD7':'times','<':'lt','\u226E':'nlt','<\u20D2':'nvlt','=':'equals','\u2260':'ne','=\u20E5':'bne','\u2A75':'Equal','>':'gt','\u226F':'ngt','>\u20D2':'nvgt','\xAC':'not','|':'vert','\xA6':'brvbar','\u2212':'minus','\u2213':'mp','\u2214':'plusdo','\u2044':'frasl','\u2216':'setmn','\u2217':'lowast','\u2218':'compfn','\u221A':'Sqrt','\u221D':'prop','\u221E':'infin','\u221F':'angrt','\u2220':'ang','\u2220\u20D2':'nang','\u2221':'angmsd','\u2222':'angsph','\u2223':'mid','\u2224':'nmid','\u2225':'par','\u2226':'npar','\u2227':'and','\u2228':'or','\u2229':'cap','\u2229\uFE00':'caps','\u222A':'cup','\u222A\uFE00':'cups','\u222B':'int','\u222C':'Int','\u222D':'tint','\u2A0C':'qint','\u222E':'oint','\u222F':'Conint','\u2230':'Cconint','\u2231':'cwint','\u2232':'cwconint','\u2233':'awconint','\u2234':'there4','\u2235':'becaus','\u2236':'ratio','\u2237':'Colon','\u2238':'minusd','\u223A':'mDDot','\u223B':'homtht','\u223C':'sim','\u2241':'nsim','\u223C\u20D2':'nvsim','\u223D':'bsim','\u223D\u0331':'race','\u223E':'ac','\u223E\u0333':'acE','\u223F':'acd','\u2240':'wr','\u2242':'esim','\u2242\u0338':'nesim','\u2243':'sime','\u2244':'nsime','\u2245':'cong','\u2247':'ncong','\u2246':'simne','\u2248':'ap','\u2249':'nap','\u224A':'ape','\u224B':'apid','\u224B\u0338':'napid','\u224C':'bcong','\u224D':'CupCap','\u226D':'NotCupCap','\u224D\u20D2':'nvap','\u224E':'bump','\u224E\u0338':'nbump','\u224F':'bumpe','\u224F\u0338':'nbumpe','\u2250':'doteq','\u2250\u0338':'nedot','\u2251':'eDot','\u2252':'efDot','\u2253':'erDot','\u2254':'colone','\u2255':'ecolon','\u2256':'ecir','\u2257':'cire','\u2259':'wedgeq','\u225A':'veeeq','\u225C':'trie','\u225F':'equest','\u2261':'equiv','\u2262':'nequiv','\u2261\u20E5':'bnequiv','\u2264':'le','\u2270':'nle','\u2264\u20D2':'nvle','\u2265':'ge','\u2271':'nge','\u2265\u20D2':'nvge','\u2266':'lE','\u2266\u0338':'nlE','\u2267':'gE','\u2267\u0338':'ngE','\u2268\uFE00':'lvnE','\u2268':'lnE','\u2269':'gnE','\u2269\uFE00':'gvnE','\u226A':'ll','\u226A\u0338':'nLtv','\u226A\u20D2':'nLt','\u226B':'gg','\u226B\u0338':'nGtv','\u226B\u20D2':'nGt','\u226C':'twixt','\u2272':'lsim','\u2274':'nlsim','\u2273':'gsim','\u2275':'ngsim','\u2276':'lg','\u2278':'ntlg','\u2277':'gl','\u2279':'ntgl','\u227A':'pr','\u2280':'npr','\u227B':'sc','\u2281':'nsc','\u227C':'prcue','\u22E0':'nprcue','\u227D':'sccue','\u22E1':'nsccue','\u227E':'prsim','\u227F':'scsim','\u227F\u0338':'NotSucceedsTilde','\u2282':'sub','\u2284':'nsub','\u2282\u20D2':'vnsub','\u2283':'sup','\u2285':'nsup','\u2283\u20D2':'vnsup','\u2286':'sube','\u2288':'nsube','\u2287':'supe','\u2289':'nsupe','\u228A\uFE00':'vsubne','\u228A':'subne','\u228B\uFE00':'vsupne','\u228B':'supne','\u228D':'cupdot','\u228E':'uplus','\u228F':'sqsub','\u228F\u0338':'NotSquareSubset','\u2290':'sqsup','\u2290\u0338':'NotSquareSuperset','\u2291':'sqsube','\u22E2':'nsqsube','\u2292':'sqsupe','\u22E3':'nsqsupe','\u2293':'sqcap','\u2293\uFE00':'sqcaps','\u2294':'sqcup','\u2294\uFE00':'sqcups','\u2295':'oplus','\u2296':'ominus','\u2297':'otimes','\u2298':'osol','\u2299':'odot','\u229A':'ocir','\u229B':'oast','\u229D':'odash','\u229E':'plusb','\u229F':'minusb','\u22A0':'timesb','\u22A1':'sdotb','\u22A2':'vdash','\u22AC':'nvdash','\u22A3':'dashv','\u22A4':'top','\u22A5':'bot','\u22A7':'models','\u22A8':'vDash','\u22AD':'nvDash','\u22A9':'Vdash','\u22AE':'nVdash','\u22AA':'Vvdash','\u22AB':'VDash','\u22AF':'nVDash','\u22B0':'prurel','\u22B2':'vltri','\u22EA':'nltri','\u22B3':'vrtri','\u22EB':'nrtri','\u22B4':'ltrie','\u22EC':'nltrie','\u22B4\u20D2':'nvltrie','\u22B5':'rtrie','\u22ED':'nrtrie','\u22B5\u20D2':'nvrtrie','\u22B6':'origof','\u22B7':'imof','\u22B8':'mumap','\u22B9':'hercon','\u22BA':'intcal','\u22BB':'veebar','\u22BD':'barvee','\u22BE':'angrtvb','\u22BF':'lrtri','\u22C0':'Wedge','\u22C1':'Vee','\u22C2':'xcap','\u22C3':'xcup','\u22C4':'diam','\u22C5':'sdot','\u22C6':'Star','\u22C7':'divonx','\u22C8':'bowtie','\u22C9':'ltimes','\u22CA':'rtimes','\u22CB':'lthree','\u22CC':'rthree','\u22CD':'bsime','\u22CE':'cuvee','\u22CF':'cuwed','\u22D0':'Sub','\u22D1':'Sup','\u22D2':'Cap','\u22D3':'Cup','\u22D4':'fork','\u22D5':'epar','\u22D6':'ltdot','\u22D7':'gtdot','\u22D8':'Ll','\u22D8\u0338':'nLl','\u22D9':'Gg','\u22D9\u0338':'nGg','\u22DA\uFE00':'lesg','\u22DA':'leg','\u22DB':'gel','\u22DB\uFE00':'gesl','\u22DE':'cuepr','\u22DF':'cuesc','\u22E6':'lnsim','\u22E7':'gnsim','\u22E8':'prnsim','\u22E9':'scnsim','\u22EE':'vellip','\u22EF':'ctdot','\u22F0':'utdot','\u22F1':'dtdot','\u22F2':'disin','\u22F3':'isinsv','\u22F4':'isins','\u22F5':'isindot','\u22F5\u0338':'notindot','\u22F6':'notinvc','\u22F7':'notinvb','\u22F9':'isinE','\u22F9\u0338':'notinE','\u22FA':'nisd','\u22FB':'xnis','\u22FC':'nis','\u22FD':'notnivc','\u22FE':'notnivb','\u2305':'barwed','\u2306':'Barwed','\u230C':'drcrop','\u230D':'dlcrop','\u230E':'urcrop','\u230F':'ulcrop','\u2310':'bnot','\u2312':'profline','\u2313':'profsurf','\u2315':'telrec','\u2316':'target','\u231C':'ulcorn','\u231D':'urcorn','\u231E':'dlcorn','\u231F':'drcorn','\u2322':'frown','\u2323':'smile','\u232D':'cylcty','\u232E':'profalar','\u2336':'topbot','\u233D':'ovbar','\u233F':'solbar','\u237C':'angzarr','\u23B0':'lmoust','\u23B1':'rmoust','\u23B4':'tbrk','\u23B5':'bbrk','\u23B6':'bbrktbrk','\u23DC':'OverParenthesis','\u23DD':'UnderParenthesis','\u23DE':'OverBrace','\u23DF':'UnderBrace','\u23E2':'trpezium','\u23E7':'elinters','\u2423':'blank','\u2500':'boxh','\u2502':'boxv','\u250C':'boxdr','\u2510':'boxdl','\u2514':'boxur','\u2518':'boxul','\u251C':'boxvr','\u2524':'boxvl','\u252C':'boxhd','\u2534':'boxhu','\u253C':'boxvh','\u2550':'boxH','\u2551':'boxV','\u2552':'boxdR','\u2553':'boxDr','\u2554':'boxDR','\u2555':'boxdL','\u2556':'boxDl','\u2557':'boxDL','\u2558':'boxuR','\u2559':'boxUr','\u255A':'boxUR','\u255B':'boxuL','\u255C':'boxUl','\u255D':'boxUL','\u255E':'boxvR','\u255F':'boxVr','\u2560':'boxVR','\u2561':'boxvL','\u2562':'boxVl','\u2563':'boxVL','\u2564':'boxHd','\u2565':'boxhD','\u2566':'boxHD','\u2567':'boxHu','\u2568':'boxhU','\u2569':'boxHU','\u256A':'boxvH','\u256B':'boxVh','\u256C':'boxVH','\u2580':'uhblk','\u2584':'lhblk','\u2588':'block','\u2591':'blk14','\u2592':'blk12','\u2593':'blk34','\u25A1':'squ','\u25AA':'squf','\u25AB':'EmptyVerySmallSquare','\u25AD':'rect','\u25AE':'marker','\u25B1':'fltns','\u25B3':'xutri','\u25B4':'utrif','\u25B5':'utri','\u25B8':'rtrif','\u25B9':'rtri','\u25BD':'xdtri','\u25BE':'dtrif','\u25BF':'dtri','\u25C2':'ltrif','\u25C3':'ltri','\u25CA':'loz','\u25CB':'cir','\u25EC':'tridot','\u25EF':'xcirc','\u25F8':'ultri','\u25F9':'urtri','\u25FA':'lltri','\u25FB':'EmptySmallSquare','\u25FC':'FilledSmallSquare','\u2605':'starf','\u2606':'star','\u260E':'phone','\u2640':'female','\u2642':'male','\u2660':'spades','\u2663':'clubs','\u2665':'hearts','\u2666':'diams','\u266A':'sung','\u2713':'check','\u2717':'cross','\u2720':'malt','\u2736':'sext','\u2758':'VerticalSeparator','\u27C8':'bsolhsub','\u27C9':'suphsol','\u27F5':'xlarr','\u27F6':'xrarr','\u27F7':'xharr','\u27F8':'xlArr','\u27F9':'xrArr','\u27FA':'xhArr','\u27FC':'xmap','\u27FF':'dzigrarr','\u2902':'nvlArr','\u2903':'nvrArr','\u2904':'nvHarr','\u2905':'Map','\u290C':'lbarr','\u290D':'rbarr','\u290E':'lBarr','\u290F':'rBarr','\u2910':'RBarr','\u2911':'DDotrahd','\u2912':'UpArrowBar','\u2913':'DownArrowBar','\u2916':'Rarrtl','\u2919':'latail','\u291A':'ratail','\u291B':'lAtail','\u291C':'rAtail','\u291D':'larrfs','\u291E':'rarrfs','\u291F':'larrbfs','\u2920':'rarrbfs','\u2923':'nwarhk','\u2924':'nearhk','\u2925':'searhk','\u2926':'swarhk','\u2927':'nwnear','\u2928':'toea','\u2929':'tosa','\u292A':'swnwar','\u2933':'rarrc','\u2933\u0338':'nrarrc','\u2935':'cudarrr','\u2936':'ldca','\u2937':'rdca','\u2938':'cudarrl','\u2939':'larrpl','\u293C':'curarrm','\u293D':'cularrp','\u2945':'rarrpl','\u2948':'harrcir','\u2949':'Uarrocir','\u294A':'lurdshar','\u294B':'ldrushar','\u294E':'LeftRightVector','\u294F':'RightUpDownVector','\u2950':'DownLeftRightVector','\u2951':'LeftUpDownVector','\u2952':'LeftVectorBar','\u2953':'RightVectorBar','\u2954':'RightUpVectorBar','\u2955':'RightDownVectorBar','\u2956':'DownLeftVectorBar','\u2957':'DownRightVectorBar','\u2958':'LeftUpVectorBar','\u2959':'LeftDownVectorBar','\u295A':'LeftTeeVector','\u295B':'RightTeeVector','\u295C':'RightUpTeeVector','\u295D':'RightDownTeeVector','\u295E':'DownLeftTeeVector','\u295F':'DownRightTeeVector','\u2960':'LeftUpTeeVector','\u2961':'LeftDownTeeVector','\u2962':'lHar','\u2963':'uHar','\u2964':'rHar','\u2965':'dHar','\u2966':'luruhar','\u2967':'ldrdhar','\u2968':'ruluhar','\u2969':'rdldhar','\u296A':'lharul','\u296B':'llhard','\u296C':'rharul','\u296D':'lrhard','\u296E':'udhar','\u296F':'duhar','\u2970':'RoundImplies','\u2971':'erarr','\u2972':'simrarr','\u2973':'larrsim','\u2974':'rarrsim','\u2975':'rarrap','\u2976':'ltlarr','\u2978':'gtrarr','\u2979':'subrarr','\u297B':'suplarr','\u297C':'lfisht','\u297D':'rfisht','\u297E':'ufisht','\u297F':'dfisht','\u299A':'vzigzag','\u299C':'vangrt','\u299D':'angrtvbd','\u29A4':'ange','\u29A5':'range','\u29A6':'dwangle','\u29A7':'uwangle','\u29A8':'angmsdaa','\u29A9':'angmsdab','\u29AA':'angmsdac','\u29AB':'angmsdad','\u29AC':'angmsdae','\u29AD':'angmsdaf','\u29AE':'angmsdag','\u29AF':'angmsdah','\u29B0':'bemptyv','\u29B1':'demptyv','\u29B2':'cemptyv','\u29B3':'raemptyv','\u29B4':'laemptyv','\u29B5':'ohbar','\u29B6':'omid','\u29B7':'opar','\u29B9':'operp','\u29BB':'olcross','\u29BC':'odsold','\u29BE':'olcir','\u29BF':'ofcir','\u29C0':'olt','\u29C1':'ogt','\u29C2':'cirscir','\u29C3':'cirE','\u29C4':'solb','\u29C5':'bsolb','\u29C9':'boxbox','\u29CD':'trisb','\u29CE':'rtriltri','\u29CF':'LeftTriangleBar','\u29CF\u0338':'NotLeftTriangleBar','\u29D0':'RightTriangleBar','\u29D0\u0338':'NotRightTriangleBar','\u29DC':'iinfin','\u29DD':'infintie','\u29DE':'nvinfin','\u29E3':'eparsl','\u29E4':'smeparsl','\u29E5':'eqvparsl','\u29EB':'lozf','\u29F4':'RuleDelayed','\u29F6':'dsol','\u2A00':'xodot','\u2A01':'xoplus','\u2A02':'xotime','\u2A04':'xuplus','\u2A06':'xsqcup','\u2A0D':'fpartint','\u2A10':'cirfnint','\u2A11':'awint','\u2A12':'rppolint','\u2A13':'scpolint','\u2A14':'npolint','\u2A15':'pointint','\u2A16':'quatint','\u2A17':'intlarhk','\u2A22':'pluscir','\u2A23':'plusacir','\u2A24':'simplus','\u2A25':'plusdu','\u2A26':'plussim','\u2A27':'plustwo','\u2A29':'mcomma','\u2A2A':'minusdu','\u2A2D':'loplus','\u2A2E':'roplus','\u2A2F':'Cross','\u2A30':'timesd','\u2A31':'timesbar','\u2A33':'smashp','\u2A34':'lotimes','\u2A35':'rotimes','\u2A36':'otimesas','\u2A37':'Otimes','\u2A38':'odiv','\u2A39':'triplus','\u2A3A':'triminus','\u2A3B':'tritime','\u2A3C':'iprod','\u2A3F':'amalg','\u2A40':'capdot','\u2A42':'ncup','\u2A43':'ncap','\u2A44':'capand','\u2A45':'cupor','\u2A46':'cupcap','\u2A47':'capcup','\u2A48':'cupbrcap','\u2A49':'capbrcup','\u2A4A':'cupcup','\u2A4B':'capcap','\u2A4C':'ccups','\u2A4D':'ccaps','\u2A50':'ccupssm','\u2A53':'And','\u2A54':'Or','\u2A55':'andand','\u2A56':'oror','\u2A57':'orslope','\u2A58':'andslope','\u2A5A':'andv','\u2A5B':'orv','\u2A5C':'andd','\u2A5D':'ord','\u2A5F':'wedbar','\u2A66':'sdote','\u2A6A':'simdot','\u2A6D':'congdot','\u2A6D\u0338':'ncongdot','\u2A6E':'easter','\u2A6F':'apacir','\u2A70':'apE','\u2A70\u0338':'napE','\u2A71':'eplus','\u2A72':'pluse','\u2A73':'Esim','\u2A77':'eDDot','\u2A78':'equivDD','\u2A79':'ltcir','\u2A7A':'gtcir','\u2A7B':'ltquest','\u2A7C':'gtquest','\u2A7D':'les','\u2A7D\u0338':'nles','\u2A7E':'ges','\u2A7E\u0338':'nges','\u2A7F':'lesdot','\u2A80':'gesdot','\u2A81':'lesdoto','\u2A82':'gesdoto','\u2A83':'lesdotor','\u2A84':'gesdotol','\u2A85':'lap','\u2A86':'gap','\u2A87':'lne','\u2A88':'gne','\u2A89':'lnap','\u2A8A':'gnap','\u2A8B':'lEg','\u2A8C':'gEl','\u2A8D':'lsime','\u2A8E':'gsime','\u2A8F':'lsimg','\u2A90':'gsiml','\u2A91':'lgE','\u2A92':'glE','\u2A93':'lesges','\u2A94':'gesles','\u2A95':'els','\u2A96':'egs','\u2A97':'elsdot','\u2A98':'egsdot','\u2A99':'el','\u2A9A':'eg','\u2A9D':'siml','\u2A9E':'simg','\u2A9F':'simlE','\u2AA0':'simgE','\u2AA1':'LessLess','\u2AA1\u0338':'NotNestedLessLess','\u2AA2':'GreaterGreater','\u2AA2\u0338':'NotNestedGreaterGreater','\u2AA4':'glj','\u2AA5':'gla','\u2AA6':'ltcc','\u2AA7':'gtcc','\u2AA8':'lescc','\u2AA9':'gescc','\u2AAA':'smt','\u2AAB':'lat','\u2AAC':'smte','\u2AAC\uFE00':'smtes','\u2AAD':'late','\u2AAD\uFE00':'lates','\u2AAE':'bumpE','\u2AAF':'pre','\u2AAF\u0338':'npre','\u2AB0':'sce','\u2AB0\u0338':'nsce','\u2AB3':'prE','\u2AB4':'scE','\u2AB5':'prnE','\u2AB6':'scnE','\u2AB7':'prap','\u2AB8':'scap','\u2AB9':'prnap','\u2ABA':'scnap','\u2ABB':'Pr','\u2ABC':'Sc','\u2ABD':'subdot','\u2ABE':'supdot','\u2ABF':'subplus','\u2AC0':'supplus','\u2AC1':'submult','\u2AC2':'supmult','\u2AC3':'subedot','\u2AC4':'supedot','\u2AC5':'subE','\u2AC5\u0338':'nsubE','\u2AC6':'supE','\u2AC6\u0338':'nsupE','\u2AC7':'subsim','\u2AC8':'supsim','\u2ACB\uFE00':'vsubnE','\u2ACB':'subnE','\u2ACC\uFE00':'vsupnE','\u2ACC':'supnE','\u2ACF':'csub','\u2AD0':'csup','\u2AD1':'csube','\u2AD2':'csupe','\u2AD3':'subsup','\u2AD4':'supsub','\u2AD5':'subsub','\u2AD6':'supsup','\u2AD7':'suphsub','\u2AD8':'supdsub','\u2AD9':'forkv','\u2ADA':'topfork','\u2ADB':'mlcp','\u2AE4':'Dashv','\u2AE6':'Vdashl','\u2AE7':'Barv','\u2AE8':'vBar','\u2AE9':'vBarv','\u2AEB':'Vbar','\u2AEC':'Not','\u2AED':'bNot','\u2AEE':'rnmid','\u2AEF':'cirmid','\u2AF0':'midcir','\u2AF1':'topcir','\u2AF2':'nhpar','\u2AF3':'parsim','\u2AFD':'parsl','\u2AFD\u20E5':'nparsl','\u266D':'flat','\u266E':'natur','\u266F':'sharp','\xA4':'curren','\xA2':'cent','$':'dollar','\xA3':'pound','\xA5':'yen','\u20AC':'euro','\xB9':'sup1','\xBD':'half','\u2153':'frac13','\xBC':'frac14','\u2155':'frac15','\u2159':'frac16','\u215B':'frac18','\xB2':'sup2','\u2154':'frac23','\u2156':'frac25','\xB3':'sup3','\xBE':'frac34','\u2157':'frac35','\u215C':'frac38','\u2158':'frac45','\u215A':'frac56','\u215D':'frac58','\u215E':'frac78','\uD835\uDCB6':'ascr','\uD835\uDD52':'aopf','\uD835\uDD1E':'afr','\uD835\uDD38':'Aopf','\uD835\uDD04':'Afr','\uD835\uDC9C':'Ascr','\xAA':'ordf','\xE1':'aacute','\xC1':'Aacute','\xE0':'agrave','\xC0':'Agrave','\u0103':'abreve','\u0102':'Abreve','\xE2':'acirc','\xC2':'Acirc','\xE5':'aring','\xC5':'angst','\xE4':'auml','\xC4':'Auml','\xE3':'atilde','\xC3':'Atilde','\u0105':'aogon','\u0104':'Aogon','\u0101':'amacr','\u0100':'Amacr','\xE6':'aelig','\xC6':'AElig','\uD835\uDCB7':'bscr','\uD835\uDD53':'bopf','\uD835\uDD1F':'bfr','\uD835\uDD39':'Bopf','\u212C':'Bscr','\uD835\uDD05':'Bfr','\uD835\uDD20':'cfr','\uD835\uDCB8':'cscr','\uD835\uDD54':'copf','\u212D':'Cfr','\uD835\uDC9E':'Cscr','\u2102':'Copf','\u0107':'cacute','\u0106':'Cacute','\u0109':'ccirc','\u0108':'Ccirc','\u010D':'ccaron','\u010C':'Ccaron','\u010B':'cdot','\u010A':'Cdot','\xE7':'ccedil','\xC7':'Ccedil','\u2105':'incare','\uD835\uDD21':'dfr','\u2146':'dd','\uD835\uDD55':'dopf','\uD835\uDCB9':'dscr','\uD835\uDC9F':'Dscr','\uD835\uDD07':'Dfr','\u2145':'DD','\uD835\uDD3B':'Dopf','\u010F':'dcaron','\u010E':'Dcaron','\u0111':'dstrok','\u0110':'Dstrok','\xF0':'eth','\xD0':'ETH','\u2147':'ee','\u212F':'escr','\uD835\uDD22':'efr','\uD835\uDD56':'eopf','\u2130':'Escr','\uD835\uDD08':'Efr','\uD835\uDD3C':'Eopf','\xE9':'eacute','\xC9':'Eacute','\xE8':'egrave','\xC8':'Egrave','\xEA':'ecirc','\xCA':'Ecirc','\u011B':'ecaron','\u011A':'Ecaron','\xEB':'euml','\xCB':'Euml','\u0117':'edot','\u0116':'Edot','\u0119':'eogon','\u0118':'Eogon','\u0113':'emacr','\u0112':'Emacr','\uD835\uDD23':'ffr','\uD835\uDD57':'fopf','\uD835\uDCBB':'fscr','\uD835\uDD09':'Ffr','\uD835\uDD3D':'Fopf','\u2131':'Fscr','\uFB00':'fflig','\uFB03':'ffilig','\uFB04':'ffllig','\uFB01':'filig','fj':'fjlig','\uFB02':'fllig','\u0192':'fnof','\u210A':'gscr','\uD835\uDD58':'gopf','\uD835\uDD24':'gfr','\uD835\uDCA2':'Gscr','\uD835\uDD3E':'Gopf','\uD835\uDD0A':'Gfr','\u01F5':'gacute','\u011F':'gbreve','\u011E':'Gbreve','\u011D':'gcirc','\u011C':'Gcirc','\u0121':'gdot','\u0120':'Gdot','\u0122':'Gcedil','\uD835\uDD25':'hfr','\u210E':'planckh','\uD835\uDCBD':'hscr','\uD835\uDD59':'hopf','\u210B':'Hscr','\u210C':'Hfr','\u210D':'Hopf','\u0125':'hcirc','\u0124':'Hcirc','\u210F':'hbar','\u0127':'hstrok','\u0126':'Hstrok','\uD835\uDD5A':'iopf','\uD835\uDD26':'ifr','\uD835\uDCBE':'iscr','\u2148':'ii','\uD835\uDD40':'Iopf','\u2110':'Iscr','\u2111':'Im','\xED':'iacute','\xCD':'Iacute','\xEC':'igrave','\xCC':'Igrave','\xEE':'icirc','\xCE':'Icirc','\xEF':'iuml','\xCF':'Iuml','\u0129':'itilde','\u0128':'Itilde','\u0130':'Idot','\u012F':'iogon','\u012E':'Iogon','\u012B':'imacr','\u012A':'Imacr','\u0133':'ijlig','\u0132':'IJlig','\u0131':'imath','\uD835\uDCBF':'jscr','\uD835\uDD5B':'jopf','\uD835\uDD27':'jfr','\uD835\uDCA5':'Jscr','\uD835\uDD0D':'Jfr','\uD835\uDD41':'Jopf','\u0135':'jcirc','\u0134':'Jcirc','\u0237':'jmath','\uD835\uDD5C':'kopf','\uD835\uDCC0':'kscr','\uD835\uDD28':'kfr','\uD835\uDCA6':'Kscr','\uD835\uDD42':'Kopf','\uD835\uDD0E':'Kfr','\u0137':'kcedil','\u0136':'Kcedil','\uD835\uDD29':'lfr','\uD835\uDCC1':'lscr','\u2113':'ell','\uD835\uDD5D':'lopf','\u2112':'Lscr','\uD835\uDD0F':'Lfr','\uD835\uDD43':'Lopf','\u013A':'lacute','\u0139':'Lacute','\u013E':'lcaron','\u013D':'Lcaron','\u013C':'lcedil','\u013B':'Lcedil','\u0142':'lstrok','\u0141':'Lstrok','\u0140':'lmidot','\u013F':'Lmidot','\uD835\uDD2A':'mfr','\uD835\uDD5E':'mopf','\uD835\uDCC2':'mscr','\uD835\uDD10':'Mfr','\uD835\uDD44':'Mopf','\u2133':'Mscr','\uD835\uDD2B':'nfr','\uD835\uDD5F':'nopf','\uD835\uDCC3':'nscr','\u2115':'Nopf','\uD835\uDCA9':'Nscr','\uD835\uDD11':'Nfr','\u0144':'nacute','\u0143':'Nacute','\u0148':'ncaron','\u0147':'Ncaron','\xF1':'ntilde','\xD1':'Ntilde','\u0146':'ncedil','\u0145':'Ncedil','\u2116':'numero','\u014B':'eng','\u014A':'ENG','\uD835\uDD60':'oopf','\uD835\uDD2C':'ofr','\u2134':'oscr','\uD835\uDCAA':'Oscr','\uD835\uDD12':'Ofr','\uD835\uDD46':'Oopf','\xBA':'ordm','\xF3':'oacute','\xD3':'Oacute','\xF2':'ograve','\xD2':'Ograve','\xF4':'ocirc','\xD4':'Ocirc','\xF6':'ouml','\xD6':'Ouml','\u0151':'odblac','\u0150':'Odblac','\xF5':'otilde','\xD5':'Otilde','\xF8':'oslash','\xD8':'Oslash','\u014D':'omacr','\u014C':'Omacr','\u0153':'oelig','\u0152':'OElig','\uD835\uDD2D':'pfr','\uD835\uDCC5':'pscr','\uD835\uDD61':'popf','\u2119':'Popf','\uD835\uDD13':'Pfr','\uD835\uDCAB':'Pscr','\uD835\uDD62':'qopf','\uD835\uDD2E':'qfr','\uD835\uDCC6':'qscr','\uD835\uDCAC':'Qscr','\uD835\uDD14':'Qfr','\u211A':'Qopf','\u0138':'kgreen','\uD835\uDD2F':'rfr','\uD835\uDD63':'ropf','\uD835\uDCC7':'rscr','\u211B':'Rscr','\u211C':'Re','\u211D':'Ropf','\u0155':'racute','\u0154':'Racute','\u0159':'rcaron','\u0158':'Rcaron','\u0157':'rcedil','\u0156':'Rcedil','\uD835\uDD64':'sopf','\uD835\uDCC8':'sscr','\uD835\uDD30':'sfr','\uD835\uDD4A':'Sopf','\uD835\uDD16':'Sfr','\uD835\uDCAE':'Sscr','\u24C8':'oS','\u015B':'sacute','\u015A':'Sacute','\u015D':'scirc','\u015C':'Scirc','\u0161':'scaron','\u0160':'Scaron','\u015F':'scedil','\u015E':'Scedil','\xDF':'szlig','\uD835\uDD31':'tfr','\uD835\uDCC9':'tscr','\uD835\uDD65':'topf','\uD835\uDCAF':'Tscr','\uD835\uDD17':'Tfr','\uD835\uDD4B':'Topf','\u0165':'tcaron','\u0164':'Tcaron','\u0163':'tcedil','\u0162':'Tcedil','\u2122':'trade','\u0167':'tstrok','\u0166':'Tstrok','\uD835\uDCCA':'uscr','\uD835\uDD66':'uopf','\uD835\uDD32':'ufr','\uD835\uDD4C':'Uopf','\uD835\uDD18':'Ufr','\uD835\uDCB0':'Uscr','\xFA':'uacute','\xDA':'Uacute','\xF9':'ugrave','\xD9':'Ugrave','\u016D':'ubreve','\u016C':'Ubreve','\xFB':'ucirc','\xDB':'Ucirc','\u016F':'uring','\u016E':'Uring','\xFC':'uuml','\xDC':'Uuml','\u0171':'udblac','\u0170':'Udblac','\u0169':'utilde','\u0168':'Utilde','\u0173':'uogon','\u0172':'Uogon','\u016B':'umacr','\u016A':'Umacr','\uD835\uDD33':'vfr','\uD835\uDD67':'vopf','\uD835\uDCCB':'vscr','\uD835\uDD19':'Vfr','\uD835\uDD4D':'Vopf','\uD835\uDCB1':'Vscr','\uD835\uDD68':'wopf','\uD835\uDCCC':'wscr','\uD835\uDD34':'wfr','\uD835\uDCB2':'Wscr','\uD835\uDD4E':'Wopf','\uD835\uDD1A':'Wfr','\u0175':'wcirc','\u0174':'Wcirc','\uD835\uDD35':'xfr','\uD835\uDCCD':'xscr','\uD835\uDD69':'xopf','\uD835\uDD4F':'Xopf','\uD835\uDD1B':'Xfr','\uD835\uDCB3':'Xscr','\uD835\uDD36':'yfr','\uD835\uDCCE':'yscr','\uD835\uDD6A':'yopf','\uD835\uDCB4':'Yscr','\uD835\uDD1C':'Yfr','\uD835\uDD50':'Yopf','\xFD':'yacute','\xDD':'Yacute','\u0177':'ycirc','\u0176':'Ycirc','\xFF':'yuml','\u0178':'Yuml','\uD835\uDCCF':'zscr','\uD835\uDD37':'zfr','\uD835\uDD6B':'zopf','\u2128':'Zfr','\u2124':'Zopf','\uD835\uDCB5':'Zscr','\u017A':'zacute','\u0179':'Zacute','\u017E':'zcaron','\u017D':'Zcaron','\u017C':'zdot','\u017B':'Zdot','\u01B5':'imped','\xFE':'thorn','\xDE':'THORN','\u0149':'napos','\u03B1':'alpha','\u0391':'Alpha','\u03B2':'beta','\u0392':'Beta','\u03B3':'gamma','\u0393':'Gamma','\u03B4':'delta','\u0394':'Delta','\u03B5':'epsi','\u03F5':'epsiv','\u0395':'Epsilon','\u03DD':'gammad','\u03DC':'Gammad','\u03B6':'zeta','\u0396':'Zeta','\u03B7':'eta','\u0397':'Eta','\u03B8':'theta','\u03D1':'thetav','\u0398':'Theta','\u03B9':'iota','\u0399':'Iota','\u03BA':'kappa','\u03F0':'kappav','\u039A':'Kappa','\u03BB':'lambda','\u039B':'Lambda','\u03BC':'mu','\xB5':'micro','\u039C':'Mu','\u03BD':'nu','\u039D':'Nu','\u03BE':'xi','\u039E':'Xi','\u03BF':'omicron','\u039F':'Omicron','\u03C0':'pi','\u03D6':'piv','\u03A0':'Pi','\u03C1':'rho','\u03F1':'rhov','\u03A1':'Rho','\u03C3':'sigma','\u03A3':'Sigma','\u03C2':'sigmaf','\u03C4':'tau','\u03A4':'Tau','\u03C5':'upsi','\u03A5':'Upsilon','\u03D2':'Upsi','\u03C6':'phi','\u03D5':'phiv','\u03A6':'Phi','\u03C7':'chi','\u03A7':'Chi','\u03C8':'psi','\u03A8':'Psi','\u03C9':'omega','\u03A9':'ohm','\u0430':'acy','\u0410':'Acy','\u0431':'bcy','\u0411':'Bcy','\u0432':'vcy','\u0412':'Vcy','\u0433':'gcy','\u0413':'Gcy','\u0453':'gjcy','\u0403':'GJcy','\u0434':'dcy','\u0414':'Dcy','\u0452':'djcy','\u0402':'DJcy','\u0435':'iecy','\u0415':'IEcy','\u0451':'iocy','\u0401':'IOcy','\u0454':'jukcy','\u0404':'Jukcy','\u0436':'zhcy','\u0416':'ZHcy','\u0437':'zcy','\u0417':'Zcy','\u0455':'dscy','\u0405':'DScy','\u0438':'icy','\u0418':'Icy','\u0456':'iukcy','\u0406':'Iukcy','\u0457':'yicy','\u0407':'YIcy','\u0439':'jcy','\u0419':'Jcy','\u0458':'jsercy','\u0408':'Jsercy','\u043A':'kcy','\u041A':'Kcy','\u045C':'kjcy','\u040C':'KJcy','\u043B':'lcy','\u041B':'Lcy','\u0459':'ljcy','\u0409':'LJcy','\u043C':'mcy','\u041C':'Mcy','\u043D':'ncy','\u041D':'Ncy','\u045A':'njcy','\u040A':'NJcy','\u043E':'ocy','\u041E':'Ocy','\u043F':'pcy','\u041F':'Pcy','\u0440':'rcy','\u0420':'Rcy','\u0441':'scy','\u0421':'Scy','\u0442':'tcy','\u0422':'Tcy','\u045B':'tshcy','\u040B':'TSHcy','\u0443':'ucy','\u0423':'Ucy','\u045E':'ubrcy','\u040E':'Ubrcy','\u0444':'fcy','\u0424':'Fcy','\u0445':'khcy','\u0425':'KHcy','\u0446':'tscy','\u0426':'TScy','\u0447':'chcy','\u0427':'CHcy','\u045F':'dzcy','\u040F':'DZcy','\u0448':'shcy','\u0428':'SHcy','\u0449':'shchcy','\u0429':'SHCHcy','\u044A':'hardcy','\u042A':'HARDcy','\u044B':'ycy','\u042B':'Ycy','\u044C':'softcy','\u042C':'SOFTcy','\u044D':'ecy','\u042D':'Ecy','\u044E':'yucy','\u042E':'YUcy','\u044F':'yacy','\u042F':'YAcy','\u2135':'aleph','\u2136':'beth','\u2137':'gimel','\u2138':'daleth'};

		var regexEscape = /["&'<>`]/g;
		var escapeMap = {
			'"': '&quot;',
			'&': '&amp;',
			'\'': '&#x27;',
			'<': '&lt;',
			// See https://mathiasbynens.be/notes/ambiguous-ampersands: in HTML, the
			// following is not strictly necessary unless it’s part of a tag or an
			// unquoted attribute value. We’re only escaping it to support those
			// situations, and for XML support.
			'>': '&gt;',
			// In Internet Explorer ≤ 8, the backtick character can be used
			// to break out of (un)quoted attribute values or HTML comments.
			// See http://html5sec.org/#102, http://html5sec.org/#108, and
			// http://html5sec.org/#133.
			'`': '&#x60;'
		};

		var regexInvalidEntity = /&#(?:[xX][^a-fA-F0-9]|[^0-9xX])/;
		var regexInvalidRawCodePoint = /[\0-\x08\x0B\x0E-\x1F\x7F-\x9F\uFDD0-\uFDEF\uFFFE\uFFFF]|[\uD83F\uD87F\uD8BF\uD8FF\uD93F\uD97F\uD9BF\uD9FF\uDA3F\uDA7F\uDABF\uDAFF\uDB3F\uDB7F\uDBBF\uDBFF][\uDFFE\uDFFF]|[\uD800-\uDBFF](?![\uDC00-\uDFFF])|(?:[^\uD800-\uDBFF]|^)[\uDC00-\uDFFF]/;
		var regexDecode = /&(CounterClockwiseContourIntegral|DoubleLongLeftRightArrow|ClockwiseContourIntegral|NotNestedGreaterGreater|NotSquareSupersetEqual|DiacriticalDoubleAcute|NotRightTriangleEqual|NotSucceedsSlantEqual|NotPrecedesSlantEqual|CloseCurlyDoubleQuote|NegativeVeryThinSpace|DoubleContourIntegral|FilledVerySmallSquare|CapitalDifferentialD|OpenCurlyDoubleQuote|EmptyVerySmallSquare|NestedGreaterGreater|DoubleLongRightArrow|NotLeftTriangleEqual|NotGreaterSlantEqual|ReverseUpEquilibrium|DoubleLeftRightArrow|NotSquareSubsetEqual|NotDoubleVerticalBar|RightArrowLeftArrow|NotGreaterFullEqual|NotRightTriangleBar|SquareSupersetEqual|DownLeftRightVector|DoubleLongLeftArrow|leftrightsquigarrow|LeftArrowRightArrow|NegativeMediumSpace|blacktriangleright|RightDownVectorBar|PrecedesSlantEqual|RightDoubleBracket|SucceedsSlantEqual|NotLeftTriangleBar|RightTriangleEqual|SquareIntersection|RightDownTeeVector|ReverseEquilibrium|NegativeThickSpace|longleftrightarrow|Longleftrightarrow|LongLeftRightArrow|DownRightTeeVector|DownRightVectorBar|GreaterSlantEqual|SquareSubsetEqual|LeftDownVectorBar|LeftDoubleBracket|VerticalSeparator|rightleftharpoons|NotGreaterGreater|NotSquareSuperset|blacktriangleleft|blacktriangledown|NegativeThinSpace|LeftDownTeeVector|NotLessSlantEqual|leftrightharpoons|DoubleUpDownArrow|DoubleVerticalBar|LeftTriangleEqual|FilledSmallSquare|twoheadrightarrow|NotNestedLessLess|DownLeftTeeVector|DownLeftVectorBar|RightAngleBracket|NotTildeFullEqual|NotReverseElement|RightUpDownVector|DiacriticalTilde|NotSucceedsTilde|circlearrowright|NotPrecedesEqual|rightharpoondown|DoubleRightArrow|NotSucceedsEqual|NonBreakingSpace|NotRightTriangle|LessEqualGreater|RightUpTeeVector|LeftAngleBracket|GreaterFullEqual|DownArrowUpArrow|RightUpVectorBar|twoheadleftarrow|GreaterEqualLess|downharpoonright|RightTriangleBar|ntrianglerighteq|NotSupersetEqual|LeftUpDownVector|DiacriticalAcute|rightrightarrows|vartriangleright|UpArrowDownArrow|DiacriticalGrave|UnderParenthesis|EmptySmallSquare|LeftUpVectorBar|leftrightarrows|DownRightVector|downharpoonleft|trianglerighteq|ShortRightArrow|OverParenthesis|DoubleLeftArrow|DoubleDownArrow|NotSquareSubset|bigtriangledown|ntrianglelefteq|UpperRightArrow|curvearrowright|vartriangleleft|NotLeftTriangle|nleftrightarrow|LowerRightArrow|NotHumpDownHump|NotGreaterTilde|rightthreetimes|LeftUpTeeVector|NotGreaterEqual|straightepsilon|LeftTriangleBar|rightsquigarrow|ContourIntegral|rightleftarrows|CloseCurlyQuote|RightDownVector|LeftRightVector|nLeftrightarrow|leftharpoondown|circlearrowleft|SquareSuperset|OpenCurlyQuote|hookrightarrow|HorizontalLine|DiacriticalDot|NotLessGreater|ntriangleright|DoubleRightTee|InvisibleComma|InvisibleTimes|LowerLeftArrow|DownLeftVector|NotSubsetEqual|curvearrowleft|trianglelefteq|NotVerticalBar|TildeFullEqual|downdownarrows|NotGreaterLess|RightTeeVector|ZeroWidthSpace|looparrowright|LongRightArrow|doublebarwedge|ShortLeftArrow|ShortDownArrow|RightVectorBar|GreaterGreater|ReverseElement|rightharpoonup|LessSlantEqual|leftthreetimes|upharpoonright|rightarrowtail|LeftDownVector|Longrightarrow|NestedLessLess|UpperLeftArrow|nshortparallel|leftleftarrows|leftrightarrow|Leftrightarrow|LeftRightArrow|longrightarrow|upharpoonleft|RightArrowBar|ApplyFunction|LeftTeeVector|leftarrowtail|NotEqualTilde|varsubsetneqq|varsupsetneqq|RightTeeArrow|SucceedsEqual|SucceedsTilde|LeftVectorBar|SupersetEqual|hookleftarrow|DifferentialD|VerticalTilde|VeryThinSpace|blacktriangle|bigtriangleup|LessFullEqual|divideontimes|leftharpoonup|UpEquilibrium|ntriangleleft|RightTriangle|measuredangle|shortparallel|longleftarrow|Longleftarrow|LongLeftArrow|DoubleLeftTee|Poincareplane|PrecedesEqual|triangleright|DoubleUpArrow|RightUpVector|fallingdotseq|looparrowleft|PrecedesTilde|NotTildeEqual|NotTildeTilde|smallsetminus|Proportional|triangleleft|triangledown|UnderBracket|NotHumpEqual|exponentiale|ExponentialE|NotLessTilde|HilbertSpace|RightCeiling|blacklozenge|varsupsetneq|HumpDownHump|GreaterEqual|VerticalLine|LeftTeeArrow|NotLessEqual|DownTeeArrow|LeftTriangle|varsubsetneq|Intersection|NotCongruent|DownArrowBar|LeftUpVector|LeftArrowBar|risingdotseq|GreaterTilde|RoundImplies|SquareSubset|ShortUpArrow|NotSuperset|quaternions|precnapprox|backepsilon|preccurlyeq|OverBracket|blacksquare|MediumSpace|VerticalBar|circledcirc|circleddash|CircleMinus|CircleTimes|LessGreater|curlyeqprec|curlyeqsucc|diamondsuit|UpDownArrow|Updownarrow|RuleDelayed|Rrightarrow|updownarrow|RightVector|nRightarrow|nrightarrow|eqslantless|LeftCeiling|Equilibrium|SmallCircle|expectation|NotSucceeds|thickapprox|GreaterLess|SquareUnion|NotPrecedes|NotLessLess|straightphi|succnapprox|succcurlyeq|SubsetEqual|sqsupseteq|Proportion|Laplacetrf|ImaginaryI|supsetneqq|NotGreater|gtreqqless|NotElement|ThickSpace|TildeEqual|TildeTilde|Fouriertrf|rmoustache|EqualTilde|eqslantgtr|UnderBrace|LeftVector|UpArrowBar|nLeftarrow|nsubseteqq|subsetneqq|nsupseteqq|nleftarrow|succapprox|lessapprox|UpTeeArrow|upuparrows|curlywedge|lesseqqgtr|varepsilon|varnothing|RightFloor|complement|CirclePlus|sqsubseteq|Lleftarrow|circledast|RightArrow|Rightarrow|rightarrow|lmoustache|Bernoullis|precapprox|mapstoleft|mapstodown|longmapsto|dotsquare|downarrow|DoubleDot|nsubseteq|supsetneq|leftarrow|nsupseteq|subsetneq|ThinSpace|ngeqslant|subseteqq|HumpEqual|NotSubset|triangleq|NotCupCap|lesseqgtr|heartsuit|TripleDot|Leftarrow|Coproduct|Congruent|varpropto|complexes|gvertneqq|LeftArrow|LessTilde|supseteqq|MinusPlus|CircleDot|nleqslant|NotExists|gtreqless|nparallel|UnionPlus|LeftFloor|checkmark|CenterDot|centerdot|Mellintrf|gtrapprox|bigotimes|OverBrace|spadesuit|therefore|pitchfork|rationals|PlusMinus|Backslash|Therefore|DownBreve|backsimeq|backprime|DownArrow|nshortmid|Downarrow|lvertneqq|eqvparsl|imagline|imagpart|infintie|integers|Integral|intercal|LessLess|Uarrocir|intlarhk|sqsupset|angmsdaf|sqsubset|llcorner|vartheta|cupbrcap|lnapprox|Superset|SuchThat|succnsim|succneqq|angmsdag|biguplus|curlyvee|trpezium|Succeeds|NotTilde|bigwedge|angmsdah|angrtvbd|triminus|cwconint|fpartint|lrcorner|smeparsl|subseteq|urcorner|lurdshar|laemptyv|DDotrahd|approxeq|ldrushar|awconint|mapstoup|backcong|shortmid|triangle|geqslant|gesdotol|timesbar|circledR|circledS|setminus|multimap|naturals|scpolint|ncongdot|RightTee|boxminus|gnapprox|boxtimes|andslope|thicksim|angmsdaa|varsigma|cirfnint|rtriltri|angmsdab|rppolint|angmsdac|barwedge|drbkarow|clubsuit|thetasym|bsolhsub|capbrcup|dzigrarr|doteqdot|DotEqual|dotminus|UnderBar|NotEqual|realpart|otimesas|ulcorner|hksearow|hkswarow|parallel|PartialD|elinters|emptyset|plusacir|bbrktbrk|angmsdad|pointint|bigoplus|angmsdae|Precedes|bigsqcup|varkappa|notindot|supseteq|precneqq|precnsim|profalar|profline|profsurf|leqslant|lesdotor|raemptyv|subplus|notnivb|notnivc|subrarr|zigrarr|vzigzag|submult|subedot|Element|between|cirscir|larrbfs|larrsim|lotimes|lbrksld|lbrkslu|lozenge|ldrdhar|dbkarow|bigcirc|epsilon|simrarr|simplus|ltquest|Epsilon|luruhar|gtquest|maltese|npolint|eqcolon|npreceq|bigodot|ddagger|gtrless|bnequiv|harrcir|ddotseq|equivDD|backsim|demptyv|nsqsube|nsqsupe|Upsilon|nsubset|upsilon|minusdu|nsucceq|swarrow|nsupset|coloneq|searrow|boxplus|napprox|natural|asympeq|alefsym|congdot|nearrow|bigstar|diamond|supplus|tritime|LeftTee|nvinfin|triplus|NewLine|nvltrie|nvrtrie|nwarrow|nexists|Diamond|ruluhar|Implies|supmult|angzarr|suplarr|suphsub|questeq|because|digamma|Because|olcross|bemptyv|omicron|Omicron|rotimes|NoBreak|intprod|angrtvb|orderof|uwangle|suphsol|lesdoto|orslope|DownTee|realine|cudarrl|rdldhar|OverBar|supedot|lessdot|supdsub|topfork|succsim|rbrkslu|rbrksld|pertenk|cudarrr|isindot|planckh|lessgtr|pluscir|gesdoto|plussim|plustwo|lesssim|cularrp|rarrsim|Cayleys|notinva|notinvb|notinvc|UpArrow|Uparrow|uparrow|NotLess|dwangle|precsim|Product|curarrm|Cconint|dotplus|rarrbfs|ccupssm|Cedilla|cemptyv|notniva|quatint|frac35|frac38|frac45|frac56|frac58|frac78|tridot|xoplus|gacute|gammad|Gammad|lfisht|lfloor|bigcup|sqsupe|gbreve|Gbreve|lharul|sqsube|sqcups|Gcedil|apacir|llhard|lmidot|Lmidot|lmoust|andand|sqcaps|approx|Abreve|spades|circeq|tprime|divide|topcir|Assign|topbot|gesdot|divonx|xuplus|timesd|gesles|atilde|solbar|SOFTcy|loplus|timesb|lowast|lowbar|dlcorn|dlcrop|softcy|dollar|lparlt|thksim|lrhard|Atilde|lsaquo|smashp|bigvee|thinsp|wreath|bkarow|lsquor|lstrok|Lstrok|lthree|ltimes|ltlarr|DotDot|simdot|ltrPar|weierp|xsqcup|angmsd|sigmav|sigmaf|zeetrf|Zcaron|zcaron|mapsto|vsupne|thetav|cirmid|marker|mcomma|Zacute|vsubnE|there4|gtlPar|vsubne|bottom|gtrarr|SHCHcy|shchcy|midast|midcir|middot|minusb|minusd|gtrdot|bowtie|sfrown|mnplus|models|colone|seswar|Colone|mstpos|searhk|gtrsim|nacute|Nacute|boxbox|telrec|hairsp|Tcedil|nbumpe|scnsim|ncaron|Ncaron|ncedil|Ncedil|hamilt|Scedil|nearhk|hardcy|HARDcy|tcedil|Tcaron|commat|nequiv|nesear|tcaron|target|hearts|nexist|varrho|scedil|Scaron|scaron|hellip|Sacute|sacute|hercon|swnwar|compfn|rtimes|rthree|rsquor|rsaquo|zacute|wedgeq|homtht|barvee|barwed|Barwed|rpargt|horbar|conint|swarhk|roplus|nltrie|hslash|hstrok|Hstrok|rmoust|Conint|bprime|hybull|hyphen|iacute|Iacute|supsup|supsub|supsim|varphi|coprod|brvbar|agrave|Supset|supset|igrave|Igrave|notinE|Agrave|iiiint|iinfin|copysr|wedbar|Verbar|vangrt|becaus|incare|verbar|inodot|bullet|drcorn|intcal|drcrop|cularr|vellip|Utilde|bumpeq|cupcap|dstrok|Dstrok|CupCap|cupcup|cupdot|eacute|Eacute|supdot|iquest|easter|ecaron|Ecaron|ecolon|isinsv|utilde|itilde|Itilde|curarr|succeq|Bumpeq|cacute|ulcrop|nparsl|Cacute|nprcue|egrave|Egrave|nrarrc|nrarrw|subsup|subsub|nrtrie|jsercy|nsccue|Jsercy|kappav|kcedil|Kcedil|subsim|ulcorn|nsimeq|egsdot|veebar|kgreen|capand|elsdot|Subset|subset|curren|aacute|lacute|Lacute|emptyv|ntilde|Ntilde|lagran|lambda|Lambda|capcap|Ugrave|langle|subdot|emsp13|numero|emsp14|nvdash|nvDash|nVdash|nVDash|ugrave|ufisht|nvHarr|larrfs|nvlArr|larrhk|larrlp|larrpl|nvrArr|Udblac|nwarhk|larrtl|nwnear|oacute|Oacute|latail|lAtail|sstarf|lbrace|odblac|Odblac|lbrack|udblac|odsold|eparsl|lcaron|Lcaron|ograve|Ograve|lcedil|Lcedil|Aacute|ssmile|ssetmn|squarf|ldquor|capcup|ominus|cylcty|rharul|eqcirc|dagger|rfloor|rfisht|Dagger|daleth|equals|origof|capdot|equest|dcaron|Dcaron|rdquor|oslash|Oslash|otilde|Otilde|otimes|Otimes|urcrop|Ubreve|ubreve|Yacute|Uacute|uacute|Rcedil|rcedil|urcorn|parsim|Rcaron|Vdashl|rcaron|Tstrok|percnt|period|permil|Exists|yacute|rbrack|rbrace|phmmat|ccaron|Ccaron|planck|ccedil|plankv|tstrok|female|plusdo|plusdu|ffilig|plusmn|ffllig|Ccedil|rAtail|dfisht|bernou|ratail|Rarrtl|rarrtl|angsph|rarrpl|rarrlp|rarrhk|xwedge|xotime|forall|ForAll|Vvdash|vsupnE|preceq|bigcap|frac12|frac13|frac14|primes|rarrfs|prnsim|frac15|Square|frac16|square|lesdot|frac18|frac23|propto|prurel|rarrap|rangle|puncsp|frac25|Racute|qprime|racute|lesges|frac34|abreve|AElig|eqsim|utdot|setmn|urtri|Equal|Uring|seArr|uring|searr|dashv|Dashv|mumap|nabla|iogon|Iogon|sdote|sdotb|scsim|napid|napos|equiv|natur|Acirc|dblac|erarr|nbump|iprod|erDot|ucirc|awint|esdot|angrt|ncong|isinE|scnap|Scirc|scirc|ndash|isins|Ubrcy|nearr|neArr|isinv|nedot|ubrcy|acute|Ycirc|iukcy|Iukcy|xutri|nesim|caret|jcirc|Jcirc|caron|twixt|ddarr|sccue|exist|jmath|sbquo|ngeqq|angst|ccaps|lceil|ngsim|UpTee|delta|Delta|rtrif|nharr|nhArr|nhpar|rtrie|jukcy|Jukcy|kappa|rsquo|Kappa|nlarr|nlArr|TSHcy|rrarr|aogon|Aogon|fflig|xrarr|tshcy|ccirc|nleqq|filig|upsih|nless|dharl|nlsim|fjlig|ropar|nltri|dharr|robrk|roarr|fllig|fltns|roang|rnmid|subnE|subne|lAarr|trisb|Ccirc|acirc|ccups|blank|VDash|forkv|Vdash|langd|cedil|blk12|blk14|laquo|strns|diams|notin|vDash|larrb|blk34|block|disin|uplus|vdash|vBarv|aelig|starf|Wedge|check|xrArr|lates|lbarr|lBarr|notni|lbbrk|bcong|frasl|lbrke|frown|vrtri|vprop|vnsup|gamma|Gamma|wedge|xodot|bdquo|srarr|doteq|ldquo|boxdl|boxdL|gcirc|Gcirc|boxDl|boxDL|boxdr|boxdR|boxDr|TRADE|trade|rlhar|boxDR|vnsub|npart|vltri|rlarr|boxhd|boxhD|nprec|gescc|nrarr|nrArr|boxHd|boxHD|boxhu|boxhU|nrtri|boxHu|clubs|boxHU|times|colon|Colon|gimel|xlArr|Tilde|nsime|tilde|nsmid|nspar|THORN|thorn|xlarr|nsube|nsubE|thkap|xhArr|comma|nsucc|boxul|boxuL|nsupe|nsupE|gneqq|gnsim|boxUl|boxUL|grave|boxur|boxuR|boxUr|boxUR|lescc|angle|bepsi|boxvh|varpi|boxvH|numsp|Theta|gsime|gsiml|theta|boxVh|boxVH|boxvl|gtcir|gtdot|boxvL|boxVl|boxVL|crarr|cross|Cross|nvsim|boxvr|nwarr|nwArr|sqsup|dtdot|Uogon|lhard|lharu|dtrif|ocirc|Ocirc|lhblk|duarr|odash|sqsub|Hacek|sqcup|llarr|duhar|oelig|OElig|ofcir|boxvR|uogon|lltri|boxVr|csube|uuarr|ohbar|csupe|ctdot|olarr|olcir|harrw|oline|sqcap|omacr|Omacr|omega|Omega|boxVR|aleph|lneqq|lnsim|loang|loarr|rharu|lobrk|hcirc|operp|oplus|rhard|Hcirc|orarr|Union|order|ecirc|Ecirc|cuepr|szlig|cuesc|breve|reals|eDDot|Breve|hoarr|lopar|utrif|rdquo|Umacr|umacr|efDot|swArr|ultri|alpha|rceil|ovbar|swarr|Wcirc|wcirc|smtes|smile|bsemi|lrarr|aring|parsl|lrhar|bsime|uhblk|lrtri|cupor|Aring|uharr|uharl|slarr|rbrke|bsolb|lsime|rbbrk|RBarr|lsimg|phone|rBarr|rbarr|icirc|lsquo|Icirc|emacr|Emacr|ratio|simne|plusb|simlE|simgE|simeq|pluse|ltcir|ltdot|empty|xharr|xdtri|iexcl|Alpha|ltrie|rarrw|pound|ltrif|xcirc|bumpe|prcue|bumpE|asymp|amacr|cuvee|Sigma|sigma|iiint|udhar|iiota|ijlig|IJlig|supnE|imacr|Imacr|prime|Prime|image|prnap|eogon|Eogon|rarrc|mdash|mDDot|cuwed|imath|supne|imped|Amacr|udarr|prsim|micro|rarrb|cwint|raquo|infin|eplus|range|rangd|Ucirc|radic|minus|amalg|veeeq|rAarr|epsiv|ycirc|quest|sharp|quot|zwnj|Qscr|race|qscr|Qopf|qopf|qint|rang|Rang|Zscr|zscr|Zopf|zopf|rarr|rArr|Rarr|Pscr|pscr|prop|prod|prnE|prec|ZHcy|zhcy|prap|Zeta|zeta|Popf|popf|Zdot|plus|zdot|Yuml|yuml|phiv|YUcy|yucy|Yscr|yscr|perp|Yopf|yopf|part|para|YIcy|Ouml|rcub|yicy|YAcy|rdca|ouml|osol|Oscr|rdsh|yacy|real|oscr|xvee|andd|rect|andv|Xscr|oror|ordm|ordf|xscr|ange|aopf|Aopf|rHar|Xopf|opar|Oopf|xopf|xnis|rhov|oopf|omid|xmap|oint|apid|apos|ogon|ascr|Ascr|odot|odiv|xcup|xcap|ocir|oast|nvlt|nvle|nvgt|nvge|nvap|Wscr|wscr|auml|ntlg|ntgl|nsup|nsub|nsim|Nscr|nscr|nsce|Wopf|ring|npre|wopf|npar|Auml|Barv|bbrk|Nopf|nopf|nmid|nLtv|beta|ropf|Ropf|Beta|beth|nles|rpar|nleq|bnot|bNot|nldr|NJcy|rscr|Rscr|Vscr|vscr|rsqb|njcy|bopf|nisd|Bopf|rtri|Vopf|nGtv|ngtr|vopf|boxh|boxH|boxv|nges|ngeq|boxV|bscr|scap|Bscr|bsim|Vert|vert|bsol|bull|bump|caps|cdot|ncup|scnE|ncap|nbsp|napE|Cdot|cent|sdot|Vbar|nang|vBar|chcy|Mscr|mscr|sect|semi|CHcy|Mopf|mopf|sext|circ|cire|mldr|mlcp|cirE|comp|shcy|SHcy|vArr|varr|cong|copf|Copf|copy|COPY|malt|male|macr|lvnE|cscr|ltri|sime|ltcc|simg|Cscr|siml|csub|Uuml|lsqb|lsim|uuml|csup|Lscr|lscr|utri|smid|lpar|cups|smte|lozf|darr|Lopf|Uscr|solb|lopf|sopf|Sopf|lneq|uscr|spar|dArr|lnap|Darr|dash|Sqrt|LJcy|ljcy|lHar|dHar|Upsi|upsi|diam|lesg|djcy|DJcy|leqq|dopf|Dopf|dscr|Dscr|dscy|ldsh|ldca|squf|DScy|sscr|Sscr|dsol|lcub|late|star|Star|Uopf|Larr|lArr|larr|uopf|dtri|dzcy|sube|subE|Lang|lang|Kscr|kscr|Kopf|kopf|KJcy|kjcy|KHcy|khcy|DZcy|ecir|edot|eDot|Jscr|jscr|succ|Jopf|jopf|Edot|uHar|emsp|ensp|Iuml|iuml|eopf|isin|Iscr|iscr|Eopf|epar|sung|epsi|escr|sup1|sup2|sup3|Iota|iota|supe|supE|Iopf|iopf|IOcy|iocy|Escr|esim|Esim|imof|Uarr|QUOT|uArr|uarr|euml|IEcy|iecy|Idot|Euml|euro|excl|Hscr|hscr|Hopf|hopf|TScy|tscy|Tscr|hbar|tscr|flat|tbrk|fnof|hArr|harr|half|fopf|Fopf|tdot|gvnE|fork|trie|gtcc|fscr|Fscr|gdot|gsim|Gscr|gscr|Gopf|gopf|gneq|Gdot|tosa|gnap|Topf|topf|geqq|toea|GJcy|gjcy|tint|gesl|mid|Sfr|ggg|top|ges|gla|glE|glj|geq|gne|gEl|gel|gnE|Gcy|gcy|gap|Tfr|tfr|Tcy|tcy|Hat|Tau|Ffr|tau|Tab|hfr|Hfr|ffr|Fcy|fcy|icy|Icy|iff|ETH|eth|ifr|Ifr|Eta|eta|int|Int|Sup|sup|ucy|Ucy|Sum|sum|jcy|ENG|ufr|Ufr|eng|Jcy|jfr|els|ell|egs|Efr|efr|Jfr|uml|kcy|Kcy|Ecy|ecy|kfr|Kfr|lap|Sub|sub|lat|lcy|Lcy|leg|Dot|dot|lEg|leq|les|squ|div|die|lfr|Lfr|lgE|Dfr|dfr|Del|deg|Dcy|dcy|lne|lnE|sol|loz|smt|Cup|lrm|cup|lsh|Lsh|sim|shy|map|Map|mcy|Mcy|mfr|Mfr|mho|gfr|Gfr|sfr|cir|Chi|chi|nap|Cfr|vcy|Vcy|cfr|Scy|scy|ncy|Ncy|vee|Vee|Cap|cap|nfr|scE|sce|Nfr|nge|ngE|nGg|vfr|Vfr|ngt|bot|nGt|nis|niv|Rsh|rsh|nle|nlE|bne|Bfr|bfr|nLl|nlt|nLt|Bcy|bcy|not|Not|rlm|wfr|Wfr|npr|nsc|num|ocy|ast|Ocy|ofr|xfr|Xfr|Ofr|ogt|ohm|apE|olt|Rho|ape|rho|Rfr|rfr|ord|REG|ang|reg|orv|And|and|AMP|Rcy|amp|Afr|ycy|Ycy|yen|yfr|Yfr|rcy|par|pcy|Pcy|pfr|Pfr|phi|Phi|afr|Acy|acy|zcy|Zcy|piv|acE|acd|zfr|Zfr|pre|prE|psi|Psi|qfr|Qfr|zwj|Or|ge|Gg|gt|gg|el|oS|lt|Lt|LT|Re|lg|gl|eg|ne|Im|it|le|DD|wp|wr|nu|Nu|dd|lE|Sc|sc|pi|Pi|ee|af|ll|Ll|rx|gE|xi|pm|Xi|ic|pr|Pr|in|ni|mp|mu|ac|Mu|or|ap|Gt|GT|ii);|&(Aacute|Agrave|Atilde|Ccedil|Eacute|Egrave|Iacute|Igrave|Ntilde|Oacute|Ograve|Oslash|Otilde|Uacute|Ugrave|Yacute|aacute|agrave|atilde|brvbar|ccedil|curren|divide|eacute|egrave|frac12|frac14|frac34|iacute|igrave|iquest|middot|ntilde|oacute|ograve|oslash|otilde|plusmn|uacute|ugrave|yacute|AElig|Acirc|Aring|Ecirc|Icirc|Ocirc|THORN|Ucirc|acirc|acute|aelig|aring|cedil|ecirc|icirc|iexcl|laquo|micro|ocirc|pound|raquo|szlig|thorn|times|ucirc|Auml|COPY|Euml|Iuml|Ouml|QUOT|Uuml|auml|cent|copy|euml|iuml|macr|nbsp|ordf|ordm|ouml|para|quot|sect|sup1|sup2|sup3|uuml|yuml|AMP|ETH|REG|amp|deg|eth|not|reg|shy|uml|yen|GT|LT|gt|lt)(?!;)([=a-zA-Z0-9]?)|&#([0-9]+)(;?)|&#[xX]([a-fA-F0-9]+)(;?)|&([0-9a-zA-Z]+)/g;
		var decodeMap = {'aacute':'\xE1','Aacute':'\xC1','abreve':'\u0103','Abreve':'\u0102','ac':'\u223E','acd':'\u223F','acE':'\u223E\u0333','acirc':'\xE2','Acirc':'\xC2','acute':'\xB4','acy':'\u0430','Acy':'\u0410','aelig':'\xE6','AElig':'\xC6','af':'\u2061','afr':'\uD835\uDD1E','Afr':'\uD835\uDD04','agrave':'\xE0','Agrave':'\xC0','alefsym':'\u2135','aleph':'\u2135','alpha':'\u03B1','Alpha':'\u0391','amacr':'\u0101','Amacr':'\u0100','amalg':'\u2A3F','amp':'&','AMP':'&','and':'\u2227','And':'\u2A53','andand':'\u2A55','andd':'\u2A5C','andslope':'\u2A58','andv':'\u2A5A','ang':'\u2220','ange':'\u29A4','angle':'\u2220','angmsd':'\u2221','angmsdaa':'\u29A8','angmsdab':'\u29A9','angmsdac':'\u29AA','angmsdad':'\u29AB','angmsdae':'\u29AC','angmsdaf':'\u29AD','angmsdag':'\u29AE','angmsdah':'\u29AF','angrt':'\u221F','angrtvb':'\u22BE','angrtvbd':'\u299D','angsph':'\u2222','angst':'\xC5','angzarr':'\u237C','aogon':'\u0105','Aogon':'\u0104','aopf':'\uD835\uDD52','Aopf':'\uD835\uDD38','ap':'\u2248','apacir':'\u2A6F','ape':'\u224A','apE':'\u2A70','apid':'\u224B','apos':'\'','ApplyFunction':'\u2061','approx':'\u2248','approxeq':'\u224A','aring':'\xE5','Aring':'\xC5','ascr':'\uD835\uDCB6','Ascr':'\uD835\uDC9C','Assign':'\u2254','ast':'*','asymp':'\u2248','asympeq':'\u224D','atilde':'\xE3','Atilde':'\xC3','auml':'\xE4','Auml':'\xC4','awconint':'\u2233','awint':'\u2A11','backcong':'\u224C','backepsilon':'\u03F6','backprime':'\u2035','backsim':'\u223D','backsimeq':'\u22CD','Backslash':'\u2216','Barv':'\u2AE7','barvee':'\u22BD','barwed':'\u2305','Barwed':'\u2306','barwedge':'\u2305','bbrk':'\u23B5','bbrktbrk':'\u23B6','bcong':'\u224C','bcy':'\u0431','Bcy':'\u0411','bdquo':'\u201E','becaus':'\u2235','because':'\u2235','Because':'\u2235','bemptyv':'\u29B0','bepsi':'\u03F6','bernou':'\u212C','Bernoullis':'\u212C','beta':'\u03B2','Beta':'\u0392','beth':'\u2136','between':'\u226C','bfr':'\uD835\uDD1F','Bfr':'\uD835\uDD05','bigcap':'\u22C2','bigcirc':'\u25EF','bigcup':'\u22C3','bigodot':'\u2A00','bigoplus':'\u2A01','bigotimes':'\u2A02','bigsqcup':'\u2A06','bigstar':'\u2605','bigtriangledown':'\u25BD','bigtriangleup':'\u25B3','biguplus':'\u2A04','bigvee':'\u22C1','bigwedge':'\u22C0','bkarow':'\u290D','blacklozenge':'\u29EB','blacksquare':'\u25AA','blacktriangle':'\u25B4','blacktriangledown':'\u25BE','blacktriangleleft':'\u25C2','blacktriangleright':'\u25B8','blank':'\u2423','blk12':'\u2592','blk14':'\u2591','blk34':'\u2593','block':'\u2588','bne':'=\u20E5','bnequiv':'\u2261\u20E5','bnot':'\u2310','bNot':'\u2AED','bopf':'\uD835\uDD53','Bopf':'\uD835\uDD39','bot':'\u22A5','bottom':'\u22A5','bowtie':'\u22C8','boxbox':'\u29C9','boxdl':'\u2510','boxdL':'\u2555','boxDl':'\u2556','boxDL':'\u2557','boxdr':'\u250C','boxdR':'\u2552','boxDr':'\u2553','boxDR':'\u2554','boxh':'\u2500','boxH':'\u2550','boxhd':'\u252C','boxhD':'\u2565','boxHd':'\u2564','boxHD':'\u2566','boxhu':'\u2534','boxhU':'\u2568','boxHu':'\u2567','boxHU':'\u2569','boxminus':'\u229F','boxplus':'\u229E','boxtimes':'\u22A0','boxul':'\u2518','boxuL':'\u255B','boxUl':'\u255C','boxUL':'\u255D','boxur':'\u2514','boxuR':'\u2558','boxUr':'\u2559','boxUR':'\u255A','boxv':'\u2502','boxV':'\u2551','boxvh':'\u253C','boxvH':'\u256A','boxVh':'\u256B','boxVH':'\u256C','boxvl':'\u2524','boxvL':'\u2561','boxVl':'\u2562','boxVL':'\u2563','boxvr':'\u251C','boxvR':'\u255E','boxVr':'\u255F','boxVR':'\u2560','bprime':'\u2035','breve':'\u02D8','Breve':'\u02D8','brvbar':'\xA6','bscr':'\uD835\uDCB7','Bscr':'\u212C','bsemi':'\u204F','bsim':'\u223D','bsime':'\u22CD','bsol':'\\','bsolb':'\u29C5','bsolhsub':'\u27C8','bull':'\u2022','bullet':'\u2022','bump':'\u224E','bumpe':'\u224F','bumpE':'\u2AAE','bumpeq':'\u224F','Bumpeq':'\u224E','cacute':'\u0107','Cacute':'\u0106','cap':'\u2229','Cap':'\u22D2','capand':'\u2A44','capbrcup':'\u2A49','capcap':'\u2A4B','capcup':'\u2A47','capdot':'\u2A40','CapitalDifferentialD':'\u2145','caps':'\u2229\uFE00','caret':'\u2041','caron':'\u02C7','Cayleys':'\u212D','ccaps':'\u2A4D','ccaron':'\u010D','Ccaron':'\u010C','ccedil':'\xE7','Ccedil':'\xC7','ccirc':'\u0109','Ccirc':'\u0108','Cconint':'\u2230','ccups':'\u2A4C','ccupssm':'\u2A50','cdot':'\u010B','Cdot':'\u010A','cedil':'\xB8','Cedilla':'\xB8','cemptyv':'\u29B2','cent':'\xA2','centerdot':'\xB7','CenterDot':'\xB7','cfr':'\uD835\uDD20','Cfr':'\u212D','chcy':'\u0447','CHcy':'\u0427','check':'\u2713','checkmark':'\u2713','chi':'\u03C7','Chi':'\u03A7','cir':'\u25CB','circ':'\u02C6','circeq':'\u2257','circlearrowleft':'\u21BA','circlearrowright':'\u21BB','circledast':'\u229B','circledcirc':'\u229A','circleddash':'\u229D','CircleDot':'\u2299','circledR':'\xAE','circledS':'\u24C8','CircleMinus':'\u2296','CirclePlus':'\u2295','CircleTimes':'\u2297','cire':'\u2257','cirE':'\u29C3','cirfnint':'\u2A10','cirmid':'\u2AEF','cirscir':'\u29C2','ClockwiseContourIntegral':'\u2232','CloseCurlyDoubleQuote':'\u201D','CloseCurlyQuote':'\u2019','clubs':'\u2663','clubsuit':'\u2663','colon':':','Colon':'\u2237','colone':'\u2254','Colone':'\u2A74','coloneq':'\u2254','comma':',','commat':'@','comp':'\u2201','compfn':'\u2218','complement':'\u2201','complexes':'\u2102','cong':'\u2245','congdot':'\u2A6D','Congruent':'\u2261','conint':'\u222E','Conint':'\u222F','ContourIntegral':'\u222E','copf':'\uD835\uDD54','Copf':'\u2102','coprod':'\u2210','Coproduct':'\u2210','copy':'\xA9','COPY':'\xA9','copysr':'\u2117','CounterClockwiseContourIntegral':'\u2233','crarr':'\u21B5','cross':'\u2717','Cross':'\u2A2F','cscr':'\uD835\uDCB8','Cscr':'\uD835\uDC9E','csub':'\u2ACF','csube':'\u2AD1','csup':'\u2AD0','csupe':'\u2AD2','ctdot':'\u22EF','cudarrl':'\u2938','cudarrr':'\u2935','cuepr':'\u22DE','cuesc':'\u22DF','cularr':'\u21B6','cularrp':'\u293D','cup':'\u222A','Cup':'\u22D3','cupbrcap':'\u2A48','cupcap':'\u2A46','CupCap':'\u224D','cupcup':'\u2A4A','cupdot':'\u228D','cupor':'\u2A45','cups':'\u222A\uFE00','curarr':'\u21B7','curarrm':'\u293C','curlyeqprec':'\u22DE','curlyeqsucc':'\u22DF','curlyvee':'\u22CE','curlywedge':'\u22CF','curren':'\xA4','curvearrowleft':'\u21B6','curvearrowright':'\u21B7','cuvee':'\u22CE','cuwed':'\u22CF','cwconint':'\u2232','cwint':'\u2231','cylcty':'\u232D','dagger':'\u2020','Dagger':'\u2021','daleth':'\u2138','darr':'\u2193','dArr':'\u21D3','Darr':'\u21A1','dash':'\u2010','dashv':'\u22A3','Dashv':'\u2AE4','dbkarow':'\u290F','dblac':'\u02DD','dcaron':'\u010F','Dcaron':'\u010E','dcy':'\u0434','Dcy':'\u0414','dd':'\u2146','DD':'\u2145','ddagger':'\u2021','ddarr':'\u21CA','DDotrahd':'\u2911','ddotseq':'\u2A77','deg':'\xB0','Del':'\u2207','delta':'\u03B4','Delta':'\u0394','demptyv':'\u29B1','dfisht':'\u297F','dfr':'\uD835\uDD21','Dfr':'\uD835\uDD07','dHar':'\u2965','dharl':'\u21C3','dharr':'\u21C2','DiacriticalAcute':'\xB4','DiacriticalDot':'\u02D9','DiacriticalDoubleAcute':'\u02DD','DiacriticalGrave':'`','DiacriticalTilde':'\u02DC','diam':'\u22C4','diamond':'\u22C4','Diamond':'\u22C4','diamondsuit':'\u2666','diams':'\u2666','die':'\xA8','DifferentialD':'\u2146','digamma':'\u03DD','disin':'\u22F2','div':'\xF7','divide':'\xF7','divideontimes':'\u22C7','divonx':'\u22C7','djcy':'\u0452','DJcy':'\u0402','dlcorn':'\u231E','dlcrop':'\u230D','dollar':'$','dopf':'\uD835\uDD55','Dopf':'\uD835\uDD3B','dot':'\u02D9','Dot':'\xA8','DotDot':'\u20DC','doteq':'\u2250','doteqdot':'\u2251','DotEqual':'\u2250','dotminus':'\u2238','dotplus':'\u2214','dotsquare':'\u22A1','doublebarwedge':'\u2306','DoubleContourIntegral':'\u222F','DoubleDot':'\xA8','DoubleDownArrow':'\u21D3','DoubleLeftArrow':'\u21D0','DoubleLeftRightArrow':'\u21D4','DoubleLeftTee':'\u2AE4','DoubleLongLeftArrow':'\u27F8','DoubleLongLeftRightArrow':'\u27FA','DoubleLongRightArrow':'\u27F9','DoubleRightArrow':'\u21D2','DoubleRightTee':'\u22A8','DoubleUpArrow':'\u21D1','DoubleUpDownArrow':'\u21D5','DoubleVerticalBar':'\u2225','downarrow':'\u2193','Downarrow':'\u21D3','DownArrow':'\u2193','DownArrowBar':'\u2913','DownArrowUpArrow':'\u21F5','DownBreve':'\u0311','downdownarrows':'\u21CA','downharpoonleft':'\u21C3','downharpoonright':'\u21C2','DownLeftRightVector':'\u2950','DownLeftTeeVector':'\u295E','DownLeftVector':'\u21BD','DownLeftVectorBar':'\u2956','DownRightTeeVector':'\u295F','DownRightVector':'\u21C1','DownRightVectorBar':'\u2957','DownTee':'\u22A4','DownTeeArrow':'\u21A7','drbkarow':'\u2910','drcorn':'\u231F','drcrop':'\u230C','dscr':'\uD835\uDCB9','Dscr':'\uD835\uDC9F','dscy':'\u0455','DScy':'\u0405','dsol':'\u29F6','dstrok':'\u0111','Dstrok':'\u0110','dtdot':'\u22F1','dtri':'\u25BF','dtrif':'\u25BE','duarr':'\u21F5','duhar':'\u296F','dwangle':'\u29A6','dzcy':'\u045F','DZcy':'\u040F','dzigrarr':'\u27FF','eacute':'\xE9','Eacute':'\xC9','easter':'\u2A6E','ecaron':'\u011B','Ecaron':'\u011A','ecir':'\u2256','ecirc':'\xEA','Ecirc':'\xCA','ecolon':'\u2255','ecy':'\u044D','Ecy':'\u042D','eDDot':'\u2A77','edot':'\u0117','eDot':'\u2251','Edot':'\u0116','ee':'\u2147','efDot':'\u2252','efr':'\uD835\uDD22','Efr':'\uD835\uDD08','eg':'\u2A9A','egrave':'\xE8','Egrave':'\xC8','egs':'\u2A96','egsdot':'\u2A98','el':'\u2A99','Element':'\u2208','elinters':'\u23E7','ell':'\u2113','els':'\u2A95','elsdot':'\u2A97','emacr':'\u0113','Emacr':'\u0112','empty':'\u2205','emptyset':'\u2205','EmptySmallSquare':'\u25FB','emptyv':'\u2205','EmptyVerySmallSquare':'\u25AB','emsp':'\u2003','emsp13':'\u2004','emsp14':'\u2005','eng':'\u014B','ENG':'\u014A','ensp':'\u2002','eogon':'\u0119','Eogon':'\u0118','eopf':'\uD835\uDD56','Eopf':'\uD835\uDD3C','epar':'\u22D5','eparsl':'\u29E3','eplus':'\u2A71','epsi':'\u03B5','epsilon':'\u03B5','Epsilon':'\u0395','epsiv':'\u03F5','eqcirc':'\u2256','eqcolon':'\u2255','eqsim':'\u2242','eqslantgtr':'\u2A96','eqslantless':'\u2A95','Equal':'\u2A75','equals':'=','EqualTilde':'\u2242','equest':'\u225F','Equilibrium':'\u21CC','equiv':'\u2261','equivDD':'\u2A78','eqvparsl':'\u29E5','erarr':'\u2971','erDot':'\u2253','escr':'\u212F','Escr':'\u2130','esdot':'\u2250','esim':'\u2242','Esim':'\u2A73','eta':'\u03B7','Eta':'\u0397','eth':'\xF0','ETH':'\xD0','euml':'\xEB','Euml':'\xCB','euro':'\u20AC','excl':'!','exist':'\u2203','Exists':'\u2203','expectation':'\u2130','exponentiale':'\u2147','ExponentialE':'\u2147','fallingdotseq':'\u2252','fcy':'\u0444','Fcy':'\u0424','female':'\u2640','ffilig':'\uFB03','fflig':'\uFB00','ffllig':'\uFB04','ffr':'\uD835\uDD23','Ffr':'\uD835\uDD09','filig':'\uFB01','FilledSmallSquare':'\u25FC','FilledVerySmallSquare':'\u25AA','fjlig':'fj','flat':'\u266D','fllig':'\uFB02','fltns':'\u25B1','fnof':'\u0192','fopf':'\uD835\uDD57','Fopf':'\uD835\uDD3D','forall':'\u2200','ForAll':'\u2200','fork':'\u22D4','forkv':'\u2AD9','Fouriertrf':'\u2131','fpartint':'\u2A0D','frac12':'\xBD','frac13':'\u2153','frac14':'\xBC','frac15':'\u2155','frac16':'\u2159','frac18':'\u215B','frac23':'\u2154','frac25':'\u2156','frac34':'\xBE','frac35':'\u2157','frac38':'\u215C','frac45':'\u2158','frac56':'\u215A','frac58':'\u215D','frac78':'\u215E','frasl':'\u2044','frown':'\u2322','fscr':'\uD835\uDCBB','Fscr':'\u2131','gacute':'\u01F5','gamma':'\u03B3','Gamma':'\u0393','gammad':'\u03DD','Gammad':'\u03DC','gap':'\u2A86','gbreve':'\u011F','Gbreve':'\u011E','Gcedil':'\u0122','gcirc':'\u011D','Gcirc':'\u011C','gcy':'\u0433','Gcy':'\u0413','gdot':'\u0121','Gdot':'\u0120','ge':'\u2265','gE':'\u2267','gel':'\u22DB','gEl':'\u2A8C','geq':'\u2265','geqq':'\u2267','geqslant':'\u2A7E','ges':'\u2A7E','gescc':'\u2AA9','gesdot':'\u2A80','gesdoto':'\u2A82','gesdotol':'\u2A84','gesl':'\u22DB\uFE00','gesles':'\u2A94','gfr':'\uD835\uDD24','Gfr':'\uD835\uDD0A','gg':'\u226B','Gg':'\u22D9','ggg':'\u22D9','gimel':'\u2137','gjcy':'\u0453','GJcy':'\u0403','gl':'\u2277','gla':'\u2AA5','glE':'\u2A92','glj':'\u2AA4','gnap':'\u2A8A','gnapprox':'\u2A8A','gne':'\u2A88','gnE':'\u2269','gneq':'\u2A88','gneqq':'\u2269','gnsim':'\u22E7','gopf':'\uD835\uDD58','Gopf':'\uD835\uDD3E','grave':'`','GreaterEqual':'\u2265','GreaterEqualLess':'\u22DB','GreaterFullEqual':'\u2267','GreaterGreater':'\u2AA2','GreaterLess':'\u2277','GreaterSlantEqual':'\u2A7E','GreaterTilde':'\u2273','gscr':'\u210A','Gscr':'\uD835\uDCA2','gsim':'\u2273','gsime':'\u2A8E','gsiml':'\u2A90','gt':'>','Gt':'\u226B','GT':'>','gtcc':'\u2AA7','gtcir':'\u2A7A','gtdot':'\u22D7','gtlPar':'\u2995','gtquest':'\u2A7C','gtrapprox':'\u2A86','gtrarr':'\u2978','gtrdot':'\u22D7','gtreqless':'\u22DB','gtreqqless':'\u2A8C','gtrless':'\u2277','gtrsim':'\u2273','gvertneqq':'\u2269\uFE00','gvnE':'\u2269\uFE00','Hacek':'\u02C7','hairsp':'\u200A','half':'\xBD','hamilt':'\u210B','hardcy':'\u044A','HARDcy':'\u042A','harr':'\u2194','hArr':'\u21D4','harrcir':'\u2948','harrw':'\u21AD','Hat':'^','hbar':'\u210F','hcirc':'\u0125','Hcirc':'\u0124','hearts':'\u2665','heartsuit':'\u2665','hellip':'\u2026','hercon':'\u22B9','hfr':'\uD835\uDD25','Hfr':'\u210C','HilbertSpace':'\u210B','hksearow':'\u2925','hkswarow':'\u2926','hoarr':'\u21FF','homtht':'\u223B','hookleftarrow':'\u21A9','hookrightarrow':'\u21AA','hopf':'\uD835\uDD59','Hopf':'\u210D','horbar':'\u2015','HorizontalLine':'\u2500','hscr':'\uD835\uDCBD','Hscr':'\u210B','hslash':'\u210F','hstrok':'\u0127','Hstrok':'\u0126','HumpDownHump':'\u224E','HumpEqual':'\u224F','hybull':'\u2043','hyphen':'\u2010','iacute':'\xED','Iacute':'\xCD','ic':'\u2063','icirc':'\xEE','Icirc':'\xCE','icy':'\u0438','Icy':'\u0418','Idot':'\u0130','iecy':'\u0435','IEcy':'\u0415','iexcl':'\xA1','iff':'\u21D4','ifr':'\uD835\uDD26','Ifr':'\u2111','igrave':'\xEC','Igrave':'\xCC','ii':'\u2148','iiiint':'\u2A0C','iiint':'\u222D','iinfin':'\u29DC','iiota':'\u2129','ijlig':'\u0133','IJlig':'\u0132','Im':'\u2111','imacr':'\u012B','Imacr':'\u012A','image':'\u2111','ImaginaryI':'\u2148','imagline':'\u2110','imagpart':'\u2111','imath':'\u0131','imof':'\u22B7','imped':'\u01B5','Implies':'\u21D2','in':'\u2208','incare':'\u2105','infin':'\u221E','infintie':'\u29DD','inodot':'\u0131','int':'\u222B','Int':'\u222C','intcal':'\u22BA','integers':'\u2124','Integral':'\u222B','intercal':'\u22BA','Intersection':'\u22C2','intlarhk':'\u2A17','intprod':'\u2A3C','InvisibleComma':'\u2063','InvisibleTimes':'\u2062','iocy':'\u0451','IOcy':'\u0401','iogon':'\u012F','Iogon':'\u012E','iopf':'\uD835\uDD5A','Iopf':'\uD835\uDD40','iota':'\u03B9','Iota':'\u0399','iprod':'\u2A3C','iquest':'\xBF','iscr':'\uD835\uDCBE','Iscr':'\u2110','isin':'\u2208','isindot':'\u22F5','isinE':'\u22F9','isins':'\u22F4','isinsv':'\u22F3','isinv':'\u2208','it':'\u2062','itilde':'\u0129','Itilde':'\u0128','iukcy':'\u0456','Iukcy':'\u0406','iuml':'\xEF','Iuml':'\xCF','jcirc':'\u0135','Jcirc':'\u0134','jcy':'\u0439','Jcy':'\u0419','jfr':'\uD835\uDD27','Jfr':'\uD835\uDD0D','jmath':'\u0237','jopf':'\uD835\uDD5B','Jopf':'\uD835\uDD41','jscr':'\uD835\uDCBF','Jscr':'\uD835\uDCA5','jsercy':'\u0458','Jsercy':'\u0408','jukcy':'\u0454','Jukcy':'\u0404','kappa':'\u03BA','Kappa':'\u039A','kappav':'\u03F0','kcedil':'\u0137','Kcedil':'\u0136','kcy':'\u043A','Kcy':'\u041A','kfr':'\uD835\uDD28','Kfr':'\uD835\uDD0E','kgreen':'\u0138','khcy':'\u0445','KHcy':'\u0425','kjcy':'\u045C','KJcy':'\u040C','kopf':'\uD835\uDD5C','Kopf':'\uD835\uDD42','kscr':'\uD835\uDCC0','Kscr':'\uD835\uDCA6','lAarr':'\u21DA','lacute':'\u013A','Lacute':'\u0139','laemptyv':'\u29B4','lagran':'\u2112','lambda':'\u03BB','Lambda':'\u039B','lang':'\u27E8','Lang':'\u27EA','langd':'\u2991','langle':'\u27E8','lap':'\u2A85','Laplacetrf':'\u2112','laquo':'\xAB','larr':'\u2190','lArr':'\u21D0','Larr':'\u219E','larrb':'\u21E4','larrbfs':'\u291F','larrfs':'\u291D','larrhk':'\u21A9','larrlp':'\u21AB','larrpl':'\u2939','larrsim':'\u2973','larrtl':'\u21A2','lat':'\u2AAB','latail':'\u2919','lAtail':'\u291B','late':'\u2AAD','lates':'\u2AAD\uFE00','lbarr':'\u290C','lBarr':'\u290E','lbbrk':'\u2772','lbrace':'{','lbrack':'[','lbrke':'\u298B','lbrksld':'\u298F','lbrkslu':'\u298D','lcaron':'\u013E','Lcaron':'\u013D','lcedil':'\u013C','Lcedil':'\u013B','lceil':'\u2308','lcub':'{','lcy':'\u043B','Lcy':'\u041B','ldca':'\u2936','ldquo':'\u201C','ldquor':'\u201E','ldrdhar':'\u2967','ldrushar':'\u294B','ldsh':'\u21B2','le':'\u2264','lE':'\u2266','LeftAngleBracket':'\u27E8','leftarrow':'\u2190','Leftarrow':'\u21D0','LeftArrow':'\u2190','LeftArrowBar':'\u21E4','LeftArrowRightArrow':'\u21C6','leftarrowtail':'\u21A2','LeftCeiling':'\u2308','LeftDoubleBracket':'\u27E6','LeftDownTeeVector':'\u2961','LeftDownVector':'\u21C3','LeftDownVectorBar':'\u2959','LeftFloor':'\u230A','leftharpoondown':'\u21BD','leftharpoonup':'\u21BC','leftleftarrows':'\u21C7','leftrightarrow':'\u2194','Leftrightarrow':'\u21D4','LeftRightArrow':'\u2194','leftrightarrows':'\u21C6','leftrightharpoons':'\u21CB','leftrightsquigarrow':'\u21AD','LeftRightVector':'\u294E','LeftTee':'\u22A3','LeftTeeArrow':'\u21A4','LeftTeeVector':'\u295A','leftthreetimes':'\u22CB','LeftTriangle':'\u22B2','LeftTriangleBar':'\u29CF','LeftTriangleEqual':'\u22B4','LeftUpDownVector':'\u2951','LeftUpTeeVector':'\u2960','LeftUpVector':'\u21BF','LeftUpVectorBar':'\u2958','LeftVector':'\u21BC','LeftVectorBar':'\u2952','leg':'\u22DA','lEg':'\u2A8B','leq':'\u2264','leqq':'\u2266','leqslant':'\u2A7D','les':'\u2A7D','lescc':'\u2AA8','lesdot':'\u2A7F','lesdoto':'\u2A81','lesdotor':'\u2A83','lesg':'\u22DA\uFE00','lesges':'\u2A93','lessapprox':'\u2A85','lessdot':'\u22D6','lesseqgtr':'\u22DA','lesseqqgtr':'\u2A8B','LessEqualGreater':'\u22DA','LessFullEqual':'\u2266','LessGreater':'\u2276','lessgtr':'\u2276','LessLess':'\u2AA1','lesssim':'\u2272','LessSlantEqual':'\u2A7D','LessTilde':'\u2272','lfisht':'\u297C','lfloor':'\u230A','lfr':'\uD835\uDD29','Lfr':'\uD835\uDD0F','lg':'\u2276','lgE':'\u2A91','lHar':'\u2962','lhard':'\u21BD','lharu':'\u21BC','lharul':'\u296A','lhblk':'\u2584','ljcy':'\u0459','LJcy':'\u0409','ll':'\u226A','Ll':'\u22D8','llarr':'\u21C7','llcorner':'\u231E','Lleftarrow':'\u21DA','llhard':'\u296B','lltri':'\u25FA','lmidot':'\u0140','Lmidot':'\u013F','lmoust':'\u23B0','lmoustache':'\u23B0','lnap':'\u2A89','lnapprox':'\u2A89','lne':'\u2A87','lnE':'\u2268','lneq':'\u2A87','lneqq':'\u2268','lnsim':'\u22E6','loang':'\u27EC','loarr':'\u21FD','lobrk':'\u27E6','longleftarrow':'\u27F5','Longleftarrow':'\u27F8','LongLeftArrow':'\u27F5','longleftrightarrow':'\u27F7','Longleftrightarrow':'\u27FA','LongLeftRightArrow':'\u27F7','longmapsto':'\u27FC','longrightarrow':'\u27F6','Longrightarrow':'\u27F9','LongRightArrow':'\u27F6','looparrowleft':'\u21AB','looparrowright':'\u21AC','lopar':'\u2985','lopf':'\uD835\uDD5D','Lopf':'\uD835\uDD43','loplus':'\u2A2D','lotimes':'\u2A34','lowast':'\u2217','lowbar':'_','LowerLeftArrow':'\u2199','LowerRightArrow':'\u2198','loz':'\u25CA','lozenge':'\u25CA','lozf':'\u29EB','lpar':'(','lparlt':'\u2993','lrarr':'\u21C6','lrcorner':'\u231F','lrhar':'\u21CB','lrhard':'\u296D','lrm':'\u200E','lrtri':'\u22BF','lsaquo':'\u2039','lscr':'\uD835\uDCC1','Lscr':'\u2112','lsh':'\u21B0','Lsh':'\u21B0','lsim':'\u2272','lsime':'\u2A8D','lsimg':'\u2A8F','lsqb':'[','lsquo':'\u2018','lsquor':'\u201A','lstrok':'\u0142','Lstrok':'\u0141','lt':'<','Lt':'\u226A','LT':'<','ltcc':'\u2AA6','ltcir':'\u2A79','ltdot':'\u22D6','lthree':'\u22CB','ltimes':'\u22C9','ltlarr':'\u2976','ltquest':'\u2A7B','ltri':'\u25C3','ltrie':'\u22B4','ltrif':'\u25C2','ltrPar':'\u2996','lurdshar':'\u294A','luruhar':'\u2966','lvertneqq':'\u2268\uFE00','lvnE':'\u2268\uFE00','macr':'\xAF','male':'\u2642','malt':'\u2720','maltese':'\u2720','map':'\u21A6','Map':'\u2905','mapsto':'\u21A6','mapstodown':'\u21A7','mapstoleft':'\u21A4','mapstoup':'\u21A5','marker':'\u25AE','mcomma':'\u2A29','mcy':'\u043C','Mcy':'\u041C','mdash':'\u2014','mDDot':'\u223A','measuredangle':'\u2221','MediumSpace':'\u205F','Mellintrf':'\u2133','mfr':'\uD835\uDD2A','Mfr':'\uD835\uDD10','mho':'\u2127','micro':'\xB5','mid':'\u2223','midast':'*','midcir':'\u2AF0','middot':'\xB7','minus':'\u2212','minusb':'\u229F','minusd':'\u2238','minusdu':'\u2A2A','MinusPlus':'\u2213','mlcp':'\u2ADB','mldr':'\u2026','mnplus':'\u2213','models':'\u22A7','mopf':'\uD835\uDD5E','Mopf':'\uD835\uDD44','mp':'\u2213','mscr':'\uD835\uDCC2','Mscr':'\u2133','mstpos':'\u223E','mu':'\u03BC','Mu':'\u039C','multimap':'\u22B8','mumap':'\u22B8','nabla':'\u2207','nacute':'\u0144','Nacute':'\u0143','nang':'\u2220\u20D2','nap':'\u2249','napE':'\u2A70\u0338','napid':'\u224B\u0338','napos':'\u0149','napprox':'\u2249','natur':'\u266E','natural':'\u266E','naturals':'\u2115','nbsp':'\xA0','nbump':'\u224E\u0338','nbumpe':'\u224F\u0338','ncap':'\u2A43','ncaron':'\u0148','Ncaron':'\u0147','ncedil':'\u0146','Ncedil':'\u0145','ncong':'\u2247','ncongdot':'\u2A6D\u0338','ncup':'\u2A42','ncy':'\u043D','Ncy':'\u041D','ndash':'\u2013','ne':'\u2260','nearhk':'\u2924','nearr':'\u2197','neArr':'\u21D7','nearrow':'\u2197','nedot':'\u2250\u0338','NegativeMediumSpace':'\u200B','NegativeThickSpace':'\u200B','NegativeThinSpace':'\u200B','NegativeVeryThinSpace':'\u200B','nequiv':'\u2262','nesear':'\u2928','nesim':'\u2242\u0338','NestedGreaterGreater':'\u226B','NestedLessLess':'\u226A','NewLine':'\n','nexist':'\u2204','nexists':'\u2204','nfr':'\uD835\uDD2B','Nfr':'\uD835\uDD11','nge':'\u2271','ngE':'\u2267\u0338','ngeq':'\u2271','ngeqq':'\u2267\u0338','ngeqslant':'\u2A7E\u0338','nges':'\u2A7E\u0338','nGg':'\u22D9\u0338','ngsim':'\u2275','ngt':'\u226F','nGt':'\u226B\u20D2','ngtr':'\u226F','nGtv':'\u226B\u0338','nharr':'\u21AE','nhArr':'\u21CE','nhpar':'\u2AF2','ni':'\u220B','nis':'\u22FC','nisd':'\u22FA','niv':'\u220B','njcy':'\u045A','NJcy':'\u040A','nlarr':'\u219A','nlArr':'\u21CD','nldr':'\u2025','nle':'\u2270','nlE':'\u2266\u0338','nleftarrow':'\u219A','nLeftarrow':'\u21CD','nleftrightarrow':'\u21AE','nLeftrightarrow':'\u21CE','nleq':'\u2270','nleqq':'\u2266\u0338','nleqslant':'\u2A7D\u0338','nles':'\u2A7D\u0338','nless':'\u226E','nLl':'\u22D8\u0338','nlsim':'\u2274','nlt':'\u226E','nLt':'\u226A\u20D2','nltri':'\u22EA','nltrie':'\u22EC','nLtv':'\u226A\u0338','nmid':'\u2224','NoBreak':'\u2060','NonBreakingSpace':'\xA0','nopf':'\uD835\uDD5F','Nopf':'\u2115','not':'\xAC','Not':'\u2AEC','NotCongruent':'\u2262','NotCupCap':'\u226D','NotDoubleVerticalBar':'\u2226','NotElement':'\u2209','NotEqual':'\u2260','NotEqualTilde':'\u2242\u0338','NotExists':'\u2204','NotGreater':'\u226F','NotGreaterEqual':'\u2271','NotGreaterFullEqual':'\u2267\u0338','NotGreaterGreater':'\u226B\u0338','NotGreaterLess':'\u2279','NotGreaterSlantEqual':'\u2A7E\u0338','NotGreaterTilde':'\u2275','NotHumpDownHump':'\u224E\u0338','NotHumpEqual':'\u224F\u0338','notin':'\u2209','notindot':'\u22F5\u0338','notinE':'\u22F9\u0338','notinva':'\u2209','notinvb':'\u22F7','notinvc':'\u22F6','NotLeftTriangle':'\u22EA','NotLeftTriangleBar':'\u29CF\u0338','NotLeftTriangleEqual':'\u22EC','NotLess':'\u226E','NotLessEqual':'\u2270','NotLessGreater':'\u2278','NotLessLess':'\u226A\u0338','NotLessSlantEqual':'\u2A7D\u0338','NotLessTilde':'\u2274','NotNestedGreaterGreater':'\u2AA2\u0338','NotNestedLessLess':'\u2AA1\u0338','notni':'\u220C','notniva':'\u220C','notnivb':'\u22FE','notnivc':'\u22FD','NotPrecedes':'\u2280','NotPrecedesEqual':'\u2AAF\u0338','NotPrecedesSlantEqual':'\u22E0','NotReverseElement':'\u220C','NotRightTriangle':'\u22EB','NotRightTriangleBar':'\u29D0\u0338','NotRightTriangleEqual':'\u22ED','NotSquareSubset':'\u228F\u0338','NotSquareSubsetEqual':'\u22E2','NotSquareSuperset':'\u2290\u0338','NotSquareSupersetEqual':'\u22E3','NotSubset':'\u2282\u20D2','NotSubsetEqual':'\u2288','NotSucceeds':'\u2281','NotSucceedsEqual':'\u2AB0\u0338','NotSucceedsSlantEqual':'\u22E1','NotSucceedsTilde':'\u227F\u0338','NotSuperset':'\u2283\u20D2','NotSupersetEqual':'\u2289','NotTilde':'\u2241','NotTildeEqual':'\u2244','NotTildeFullEqual':'\u2247','NotTildeTilde':'\u2249','NotVerticalBar':'\u2224','npar':'\u2226','nparallel':'\u2226','nparsl':'\u2AFD\u20E5','npart':'\u2202\u0338','npolint':'\u2A14','npr':'\u2280','nprcue':'\u22E0','npre':'\u2AAF\u0338','nprec':'\u2280','npreceq':'\u2AAF\u0338','nrarr':'\u219B','nrArr':'\u21CF','nrarrc':'\u2933\u0338','nrarrw':'\u219D\u0338','nrightarrow':'\u219B','nRightarrow':'\u21CF','nrtri':'\u22EB','nrtrie':'\u22ED','nsc':'\u2281','nsccue':'\u22E1','nsce':'\u2AB0\u0338','nscr':'\uD835\uDCC3','Nscr':'\uD835\uDCA9','nshortmid':'\u2224','nshortparallel':'\u2226','nsim':'\u2241','nsime':'\u2244','nsimeq':'\u2244','nsmid':'\u2224','nspar':'\u2226','nsqsube':'\u22E2','nsqsupe':'\u22E3','nsub':'\u2284','nsube':'\u2288','nsubE':'\u2AC5\u0338','nsubset':'\u2282\u20D2','nsubseteq':'\u2288','nsubseteqq':'\u2AC5\u0338','nsucc':'\u2281','nsucceq':'\u2AB0\u0338','nsup':'\u2285','nsupe':'\u2289','nsupE':'\u2AC6\u0338','nsupset':'\u2283\u20D2','nsupseteq':'\u2289','nsupseteqq':'\u2AC6\u0338','ntgl':'\u2279','ntilde':'\xF1','Ntilde':'\xD1','ntlg':'\u2278','ntriangleleft':'\u22EA','ntrianglelefteq':'\u22EC','ntriangleright':'\u22EB','ntrianglerighteq':'\u22ED','nu':'\u03BD','Nu':'\u039D','num':'#','numero':'\u2116','numsp':'\u2007','nvap':'\u224D\u20D2','nvdash':'\u22AC','nvDash':'\u22AD','nVdash':'\u22AE','nVDash':'\u22AF','nvge':'\u2265\u20D2','nvgt':'>\u20D2','nvHarr':'\u2904','nvinfin':'\u29DE','nvlArr':'\u2902','nvle':'\u2264\u20D2','nvlt':'<\u20D2','nvltrie':'\u22B4\u20D2','nvrArr':'\u2903','nvrtrie':'\u22B5\u20D2','nvsim':'\u223C\u20D2','nwarhk':'\u2923','nwarr':'\u2196','nwArr':'\u21D6','nwarrow':'\u2196','nwnear':'\u2927','oacute':'\xF3','Oacute':'\xD3','oast':'\u229B','ocir':'\u229A','ocirc':'\xF4','Ocirc':'\xD4','ocy':'\u043E','Ocy':'\u041E','odash':'\u229D','odblac':'\u0151','Odblac':'\u0150','odiv':'\u2A38','odot':'\u2299','odsold':'\u29BC','oelig':'\u0153','OElig':'\u0152','ofcir':'\u29BF','ofr':'\uD835\uDD2C','Ofr':'\uD835\uDD12','ogon':'\u02DB','ograve':'\xF2','Ograve':'\xD2','ogt':'\u29C1','ohbar':'\u29B5','ohm':'\u03A9','oint':'\u222E','olarr':'\u21BA','olcir':'\u29BE','olcross':'\u29BB','oline':'\u203E','olt':'\u29C0','omacr':'\u014D','Omacr':'\u014C','omega':'\u03C9','Omega':'\u03A9','omicron':'\u03BF','Omicron':'\u039F','omid':'\u29B6','ominus':'\u2296','oopf':'\uD835\uDD60','Oopf':'\uD835\uDD46','opar':'\u29B7','OpenCurlyDoubleQuote':'\u201C','OpenCurlyQuote':'\u2018','operp':'\u29B9','oplus':'\u2295','or':'\u2228','Or':'\u2A54','orarr':'\u21BB','ord':'\u2A5D','order':'\u2134','orderof':'\u2134','ordf':'\xAA','ordm':'\xBA','origof':'\u22B6','oror':'\u2A56','orslope':'\u2A57','orv':'\u2A5B','oS':'\u24C8','oscr':'\u2134','Oscr':'\uD835\uDCAA','oslash':'\xF8','Oslash':'\xD8','osol':'\u2298','otilde':'\xF5','Otilde':'\xD5','otimes':'\u2297','Otimes':'\u2A37','otimesas':'\u2A36','ouml':'\xF6','Ouml':'\xD6','ovbar':'\u233D','OverBar':'\u203E','OverBrace':'\u23DE','OverBracket':'\u23B4','OverParenthesis':'\u23DC','par':'\u2225','para':'\xB6','parallel':'\u2225','parsim':'\u2AF3','parsl':'\u2AFD','part':'\u2202','PartialD':'\u2202','pcy':'\u043F','Pcy':'\u041F','percnt':'%','period':'.','permil':'\u2030','perp':'\u22A5','pertenk':'\u2031','pfr':'\uD835\uDD2D','Pfr':'\uD835\uDD13','phi':'\u03C6','Phi':'\u03A6','phiv':'\u03D5','phmmat':'\u2133','phone':'\u260E','pi':'\u03C0','Pi':'\u03A0','pitchfork':'\u22D4','piv':'\u03D6','planck':'\u210F','planckh':'\u210E','plankv':'\u210F','plus':'+','plusacir':'\u2A23','plusb':'\u229E','pluscir':'\u2A22','plusdo':'\u2214','plusdu':'\u2A25','pluse':'\u2A72','PlusMinus':'\xB1','plusmn':'\xB1','plussim':'\u2A26','plustwo':'\u2A27','pm':'\xB1','Poincareplane':'\u210C','pointint':'\u2A15','popf':'\uD835\uDD61','Popf':'\u2119','pound':'\xA3','pr':'\u227A','Pr':'\u2ABB','prap':'\u2AB7','prcue':'\u227C','pre':'\u2AAF','prE':'\u2AB3','prec':'\u227A','precapprox':'\u2AB7','preccurlyeq':'\u227C','Precedes':'\u227A','PrecedesEqual':'\u2AAF','PrecedesSlantEqual':'\u227C','PrecedesTilde':'\u227E','preceq':'\u2AAF','precnapprox':'\u2AB9','precneqq':'\u2AB5','precnsim':'\u22E8','precsim':'\u227E','prime':'\u2032','Prime':'\u2033','primes':'\u2119','prnap':'\u2AB9','prnE':'\u2AB5','prnsim':'\u22E8','prod':'\u220F','Product':'\u220F','profalar':'\u232E','profline':'\u2312','profsurf':'\u2313','prop':'\u221D','Proportion':'\u2237','Proportional':'\u221D','propto':'\u221D','prsim':'\u227E','prurel':'\u22B0','pscr':'\uD835\uDCC5','Pscr':'\uD835\uDCAB','psi':'\u03C8','Psi':'\u03A8','puncsp':'\u2008','qfr':'\uD835\uDD2E','Qfr':'\uD835\uDD14','qint':'\u2A0C','qopf':'\uD835\uDD62','Qopf':'\u211A','qprime':'\u2057','qscr':'\uD835\uDCC6','Qscr':'\uD835\uDCAC','quaternions':'\u210D','quatint':'\u2A16','quest':'?','questeq':'\u225F','quot':'"','QUOT':'"','rAarr':'\u21DB','race':'\u223D\u0331','racute':'\u0155','Racute':'\u0154','radic':'\u221A','raemptyv':'\u29B3','rang':'\u27E9','Rang':'\u27EB','rangd':'\u2992','range':'\u29A5','rangle':'\u27E9','raquo':'\xBB','rarr':'\u2192','rArr':'\u21D2','Rarr':'\u21A0','rarrap':'\u2975','rarrb':'\u21E5','rarrbfs':'\u2920','rarrc':'\u2933','rarrfs':'\u291E','rarrhk':'\u21AA','rarrlp':'\u21AC','rarrpl':'\u2945','rarrsim':'\u2974','rarrtl':'\u21A3','Rarrtl':'\u2916','rarrw':'\u219D','ratail':'\u291A','rAtail':'\u291C','ratio':'\u2236','rationals':'\u211A','rbarr':'\u290D','rBarr':'\u290F','RBarr':'\u2910','rbbrk':'\u2773','rbrace':'}','rbrack':']','rbrke':'\u298C','rbrksld':'\u298E','rbrkslu':'\u2990','rcaron':'\u0159','Rcaron':'\u0158','rcedil':'\u0157','Rcedil':'\u0156','rceil':'\u2309','rcub':'}','rcy':'\u0440','Rcy':'\u0420','rdca':'\u2937','rdldhar':'\u2969','rdquo':'\u201D','rdquor':'\u201D','rdsh':'\u21B3','Re':'\u211C','real':'\u211C','realine':'\u211B','realpart':'\u211C','reals':'\u211D','rect':'\u25AD','reg':'\xAE','REG':'\xAE','ReverseElement':'\u220B','ReverseEquilibrium':'\u21CB','ReverseUpEquilibrium':'\u296F','rfisht':'\u297D','rfloor':'\u230B','rfr':'\uD835\uDD2F','Rfr':'\u211C','rHar':'\u2964','rhard':'\u21C1','rharu':'\u21C0','rharul':'\u296C','rho':'\u03C1','Rho':'\u03A1','rhov':'\u03F1','RightAngleBracket':'\u27E9','rightarrow':'\u2192','Rightarrow':'\u21D2','RightArrow':'\u2192','RightArrowBar':'\u21E5','RightArrowLeftArrow':'\u21C4','rightarrowtail':'\u21A3','RightCeiling':'\u2309','RightDoubleBracket':'\u27E7','RightDownTeeVector':'\u295D','RightDownVector':'\u21C2','RightDownVectorBar':'\u2955','RightFloor':'\u230B','rightharpoondown':'\u21C1','rightharpoonup':'\u21C0','rightleftarrows':'\u21C4','rightleftharpoons':'\u21CC','rightrightarrows':'\u21C9','rightsquigarrow':'\u219D','RightTee':'\u22A2','RightTeeArrow':'\u21A6','RightTeeVector':'\u295B','rightthreetimes':'\u22CC','RightTriangle':'\u22B3','RightTriangleBar':'\u29D0','RightTriangleEqual':'\u22B5','RightUpDownVector':'\u294F','RightUpTeeVector':'\u295C','RightUpVector':'\u21BE','RightUpVectorBar':'\u2954','RightVector':'\u21C0','RightVectorBar':'\u2953','ring':'\u02DA','risingdotseq':'\u2253','rlarr':'\u21C4','rlhar':'\u21CC','rlm':'\u200F','rmoust':'\u23B1','rmoustache':'\u23B1','rnmid':'\u2AEE','roang':'\u27ED','roarr':'\u21FE','robrk':'\u27E7','ropar':'\u2986','ropf':'\uD835\uDD63','Ropf':'\u211D','roplus':'\u2A2E','rotimes':'\u2A35','RoundImplies':'\u2970','rpar':')','rpargt':'\u2994','rppolint':'\u2A12','rrarr':'\u21C9','Rrightarrow':'\u21DB','rsaquo':'\u203A','rscr':'\uD835\uDCC7','Rscr':'\u211B','rsh':'\u21B1','Rsh':'\u21B1','rsqb':']','rsquo':'\u2019','rsquor':'\u2019','rthree':'\u22CC','rtimes':'\u22CA','rtri':'\u25B9','rtrie':'\u22B5','rtrif':'\u25B8','rtriltri':'\u29CE','RuleDelayed':'\u29F4','ruluhar':'\u2968','rx':'\u211E','sacute':'\u015B','Sacute':'\u015A','sbquo':'\u201A','sc':'\u227B','Sc':'\u2ABC','scap':'\u2AB8','scaron':'\u0161','Scaron':'\u0160','sccue':'\u227D','sce':'\u2AB0','scE':'\u2AB4','scedil':'\u015F','Scedil':'\u015E','scirc':'\u015D','Scirc':'\u015C','scnap':'\u2ABA','scnE':'\u2AB6','scnsim':'\u22E9','scpolint':'\u2A13','scsim':'\u227F','scy':'\u0441','Scy':'\u0421','sdot':'\u22C5','sdotb':'\u22A1','sdote':'\u2A66','searhk':'\u2925','searr':'\u2198','seArr':'\u21D8','searrow':'\u2198','sect':'\xA7','semi':';','seswar':'\u2929','setminus':'\u2216','setmn':'\u2216','sext':'\u2736','sfr':'\uD835\uDD30','Sfr':'\uD835\uDD16','sfrown':'\u2322','sharp':'\u266F','shchcy':'\u0449','SHCHcy':'\u0429','shcy':'\u0448','SHcy':'\u0428','ShortDownArrow':'\u2193','ShortLeftArrow':'\u2190','shortmid':'\u2223','shortparallel':'\u2225','ShortRightArrow':'\u2192','ShortUpArrow':'\u2191','shy':'\xAD','sigma':'\u03C3','Sigma':'\u03A3','sigmaf':'\u03C2','sigmav':'\u03C2','sim':'\u223C','simdot':'\u2A6A','sime':'\u2243','simeq':'\u2243','simg':'\u2A9E','simgE':'\u2AA0','siml':'\u2A9D','simlE':'\u2A9F','simne':'\u2246','simplus':'\u2A24','simrarr':'\u2972','slarr':'\u2190','SmallCircle':'\u2218','smallsetminus':'\u2216','smashp':'\u2A33','smeparsl':'\u29E4','smid':'\u2223','smile':'\u2323','smt':'\u2AAA','smte':'\u2AAC','smtes':'\u2AAC\uFE00','softcy':'\u044C','SOFTcy':'\u042C','sol':'/','solb':'\u29C4','solbar':'\u233F','sopf':'\uD835\uDD64','Sopf':'\uD835\uDD4A','spades':'\u2660','spadesuit':'\u2660','spar':'\u2225','sqcap':'\u2293','sqcaps':'\u2293\uFE00','sqcup':'\u2294','sqcups':'\u2294\uFE00','Sqrt':'\u221A','sqsub':'\u228F','sqsube':'\u2291','sqsubset':'\u228F','sqsubseteq':'\u2291','sqsup':'\u2290','sqsupe':'\u2292','sqsupset':'\u2290','sqsupseteq':'\u2292','squ':'\u25A1','square':'\u25A1','Square':'\u25A1','SquareIntersection':'\u2293','SquareSubset':'\u228F','SquareSubsetEqual':'\u2291','SquareSuperset':'\u2290','SquareSupersetEqual':'\u2292','SquareUnion':'\u2294','squarf':'\u25AA','squf':'\u25AA','srarr':'\u2192','sscr':'\uD835\uDCC8','Sscr':'\uD835\uDCAE','ssetmn':'\u2216','ssmile':'\u2323','sstarf':'\u22C6','star':'\u2606','Star':'\u22C6','starf':'\u2605','straightepsilon':'\u03F5','straightphi':'\u03D5','strns':'\xAF','sub':'\u2282','Sub':'\u22D0','subdot':'\u2ABD','sube':'\u2286','subE':'\u2AC5','subedot':'\u2AC3','submult':'\u2AC1','subne':'\u228A','subnE':'\u2ACB','subplus':'\u2ABF','subrarr':'\u2979','subset':'\u2282','Subset':'\u22D0','subseteq':'\u2286','subseteqq':'\u2AC5','SubsetEqual':'\u2286','subsetneq':'\u228A','subsetneqq':'\u2ACB','subsim':'\u2AC7','subsub':'\u2AD5','subsup':'\u2AD3','succ':'\u227B','succapprox':'\u2AB8','succcurlyeq':'\u227D','Succeeds':'\u227B','SucceedsEqual':'\u2AB0','SucceedsSlantEqual':'\u227D','SucceedsTilde':'\u227F','succeq':'\u2AB0','succnapprox':'\u2ABA','succneqq':'\u2AB6','succnsim':'\u22E9','succsim':'\u227F','SuchThat':'\u220B','sum':'\u2211','Sum':'\u2211','sung':'\u266A','sup':'\u2283','Sup':'\u22D1','sup1':'\xB9','sup2':'\xB2','sup3':'\xB3','supdot':'\u2ABE','supdsub':'\u2AD8','supe':'\u2287','supE':'\u2AC6','supedot':'\u2AC4','Superset':'\u2283','SupersetEqual':'\u2287','suphsol':'\u27C9','suphsub':'\u2AD7','suplarr':'\u297B','supmult':'\u2AC2','supne':'\u228B','supnE':'\u2ACC','supplus':'\u2AC0','supset':'\u2283','Supset':'\u22D1','supseteq':'\u2287','supseteqq':'\u2AC6','supsetneq':'\u228B','supsetneqq':'\u2ACC','supsim':'\u2AC8','supsub':'\u2AD4','supsup':'\u2AD6','swarhk':'\u2926','swarr':'\u2199','swArr':'\u21D9','swarrow':'\u2199','swnwar':'\u292A','szlig':'\xDF','Tab':'\t','target':'\u2316','tau':'\u03C4','Tau':'\u03A4','tbrk':'\u23B4','tcaron':'\u0165','Tcaron':'\u0164','tcedil':'\u0163','Tcedil':'\u0162','tcy':'\u0442','Tcy':'\u0422','tdot':'\u20DB','telrec':'\u2315','tfr':'\uD835\uDD31','Tfr':'\uD835\uDD17','there4':'\u2234','therefore':'\u2234','Therefore':'\u2234','theta':'\u03B8','Theta':'\u0398','thetasym':'\u03D1','thetav':'\u03D1','thickapprox':'\u2248','thicksim':'\u223C','ThickSpace':'\u205F\u200A','thinsp':'\u2009','ThinSpace':'\u2009','thkap':'\u2248','thksim':'\u223C','thorn':'\xFE','THORN':'\xDE','tilde':'\u02DC','Tilde':'\u223C','TildeEqual':'\u2243','TildeFullEqual':'\u2245','TildeTilde':'\u2248','times':'\xD7','timesb':'\u22A0','timesbar':'\u2A31','timesd':'\u2A30','tint':'\u222D','toea':'\u2928','top':'\u22A4','topbot':'\u2336','topcir':'\u2AF1','topf':'\uD835\uDD65','Topf':'\uD835\uDD4B','topfork':'\u2ADA','tosa':'\u2929','tprime':'\u2034','trade':'\u2122','TRADE':'\u2122','triangle':'\u25B5','triangledown':'\u25BF','triangleleft':'\u25C3','trianglelefteq':'\u22B4','triangleq':'\u225C','triangleright':'\u25B9','trianglerighteq':'\u22B5','tridot':'\u25EC','trie':'\u225C','triminus':'\u2A3A','TripleDot':'\u20DB','triplus':'\u2A39','trisb':'\u29CD','tritime':'\u2A3B','trpezium':'\u23E2','tscr':'\uD835\uDCC9','Tscr':'\uD835\uDCAF','tscy':'\u0446','TScy':'\u0426','tshcy':'\u045B','TSHcy':'\u040B','tstrok':'\u0167','Tstrok':'\u0166','twixt':'\u226C','twoheadleftarrow':'\u219E','twoheadrightarrow':'\u21A0','uacute':'\xFA','Uacute':'\xDA','uarr':'\u2191','uArr':'\u21D1','Uarr':'\u219F','Uarrocir':'\u2949','ubrcy':'\u045E','Ubrcy':'\u040E','ubreve':'\u016D','Ubreve':'\u016C','ucirc':'\xFB','Ucirc':'\xDB','ucy':'\u0443','Ucy':'\u0423','udarr':'\u21C5','udblac':'\u0171','Udblac':'\u0170','udhar':'\u296E','ufisht':'\u297E','ufr':'\uD835\uDD32','Ufr':'\uD835\uDD18','ugrave':'\xF9','Ugrave':'\xD9','uHar':'\u2963','uharl':'\u21BF','uharr':'\u21BE','uhblk':'\u2580','ulcorn':'\u231C','ulcorner':'\u231C','ulcrop':'\u230F','ultri':'\u25F8','umacr':'\u016B','Umacr':'\u016A','uml':'\xA8','UnderBar':'_','UnderBrace':'\u23DF','UnderBracket':'\u23B5','UnderParenthesis':'\u23DD','Union':'\u22C3','UnionPlus':'\u228E','uogon':'\u0173','Uogon':'\u0172','uopf':'\uD835\uDD66','Uopf':'\uD835\uDD4C','uparrow':'\u2191','Uparrow':'\u21D1','UpArrow':'\u2191','UpArrowBar':'\u2912','UpArrowDownArrow':'\u21C5','updownarrow':'\u2195','Updownarrow':'\u21D5','UpDownArrow':'\u2195','UpEquilibrium':'\u296E','upharpoonleft':'\u21BF','upharpoonright':'\u21BE','uplus':'\u228E','UpperLeftArrow':'\u2196','UpperRightArrow':'\u2197','upsi':'\u03C5','Upsi':'\u03D2','upsih':'\u03D2','upsilon':'\u03C5','Upsilon':'\u03A5','UpTee':'\u22A5','UpTeeArrow':'\u21A5','upuparrows':'\u21C8','urcorn':'\u231D','urcorner':'\u231D','urcrop':'\u230E','uring':'\u016F','Uring':'\u016E','urtri':'\u25F9','uscr':'\uD835\uDCCA','Uscr':'\uD835\uDCB0','utdot':'\u22F0','utilde':'\u0169','Utilde':'\u0168','utri':'\u25B5','utrif':'\u25B4','uuarr':'\u21C8','uuml':'\xFC','Uuml':'\xDC','uwangle':'\u29A7','vangrt':'\u299C','varepsilon':'\u03F5','varkappa':'\u03F0','varnothing':'\u2205','varphi':'\u03D5','varpi':'\u03D6','varpropto':'\u221D','varr':'\u2195','vArr':'\u21D5','varrho':'\u03F1','varsigma':'\u03C2','varsubsetneq':'\u228A\uFE00','varsubsetneqq':'\u2ACB\uFE00','varsupsetneq':'\u228B\uFE00','varsupsetneqq':'\u2ACC\uFE00','vartheta':'\u03D1','vartriangleleft':'\u22B2','vartriangleright':'\u22B3','vBar':'\u2AE8','Vbar':'\u2AEB','vBarv':'\u2AE9','vcy':'\u0432','Vcy':'\u0412','vdash':'\u22A2','vDash':'\u22A8','Vdash':'\u22A9','VDash':'\u22AB','Vdashl':'\u2AE6','vee':'\u2228','Vee':'\u22C1','veebar':'\u22BB','veeeq':'\u225A','vellip':'\u22EE','verbar':'|','Verbar':'\u2016','vert':'|','Vert':'\u2016','VerticalBar':'\u2223','VerticalLine':'|','VerticalSeparator':'\u2758','VerticalTilde':'\u2240','VeryThinSpace':'\u200A','vfr':'\uD835\uDD33','Vfr':'\uD835\uDD19','vltri':'\u22B2','vnsub':'\u2282\u20D2','vnsup':'\u2283\u20D2','vopf':'\uD835\uDD67','Vopf':'\uD835\uDD4D','vprop':'\u221D','vrtri':'\u22B3','vscr':'\uD835\uDCCB','Vscr':'\uD835\uDCB1','vsubne':'\u228A\uFE00','vsubnE':'\u2ACB\uFE00','vsupne':'\u228B\uFE00','vsupnE':'\u2ACC\uFE00','Vvdash':'\u22AA','vzigzag':'\u299A','wcirc':'\u0175','Wcirc':'\u0174','wedbar':'\u2A5F','wedge':'\u2227','Wedge':'\u22C0','wedgeq':'\u2259','weierp':'\u2118','wfr':'\uD835\uDD34','Wfr':'\uD835\uDD1A','wopf':'\uD835\uDD68','Wopf':'\uD835\uDD4E','wp':'\u2118','wr':'\u2240','wreath':'\u2240','wscr':'\uD835\uDCCC','Wscr':'\uD835\uDCB2','xcap':'\u22C2','xcirc':'\u25EF','xcup':'\u22C3','xdtri':'\u25BD','xfr':'\uD835\uDD35','Xfr':'\uD835\uDD1B','xharr':'\u27F7','xhArr':'\u27FA','xi':'\u03BE','Xi':'\u039E','xlarr':'\u27F5','xlArr':'\u27F8','xmap':'\u27FC','xnis':'\u22FB','xodot':'\u2A00','xopf':'\uD835\uDD69','Xopf':'\uD835\uDD4F','xoplus':'\u2A01','xotime':'\u2A02','xrarr':'\u27F6','xrArr':'\u27F9','xscr':'\uD835\uDCCD','Xscr':'\uD835\uDCB3','xsqcup':'\u2A06','xuplus':'\u2A04','xutri':'\u25B3','xvee':'\u22C1','xwedge':'\u22C0','yacute':'\xFD','Yacute':'\xDD','yacy':'\u044F','YAcy':'\u042F','ycirc':'\u0177','Ycirc':'\u0176','ycy':'\u044B','Ycy':'\u042B','yen':'\xA5','yfr':'\uD835\uDD36','Yfr':'\uD835\uDD1C','yicy':'\u0457','YIcy':'\u0407','yopf':'\uD835\uDD6A','Yopf':'\uD835\uDD50','yscr':'\uD835\uDCCE','Yscr':'\uD835\uDCB4','yucy':'\u044E','YUcy':'\u042E','yuml':'\xFF','Yuml':'\u0178','zacute':'\u017A','Zacute':'\u0179','zcaron':'\u017E','Zcaron':'\u017D','zcy':'\u0437','Zcy':'\u0417','zdot':'\u017C','Zdot':'\u017B','zeetrf':'\u2128','ZeroWidthSpace':'\u200B','zeta':'\u03B6','Zeta':'\u0396','zfr':'\uD835\uDD37','Zfr':'\u2128','zhcy':'\u0436','ZHcy':'\u0416','zigrarr':'\u21DD','zopf':'\uD835\uDD6B','Zopf':'\u2124','zscr':'\uD835\uDCCF','Zscr':'\uD835\uDCB5','zwj':'\u200D','zwnj':'\u200C'};
		var decodeMapLegacy = {'aacute':'\xE1','Aacute':'\xC1','acirc':'\xE2','Acirc':'\xC2','acute':'\xB4','aelig':'\xE6','AElig':'\xC6','agrave':'\xE0','Agrave':'\xC0','amp':'&','AMP':'&','aring':'\xE5','Aring':'\xC5','atilde':'\xE3','Atilde':'\xC3','auml':'\xE4','Auml':'\xC4','brvbar':'\xA6','ccedil':'\xE7','Ccedil':'\xC7','cedil':'\xB8','cent':'\xA2','copy':'\xA9','COPY':'\xA9','curren':'\xA4','deg':'\xB0','divide':'\xF7','eacute':'\xE9','Eacute':'\xC9','ecirc':'\xEA','Ecirc':'\xCA','egrave':'\xE8','Egrave':'\xC8','eth':'\xF0','ETH':'\xD0','euml':'\xEB','Euml':'\xCB','frac12':'\xBD','frac14':'\xBC','frac34':'\xBE','gt':'>','GT':'>','iacute':'\xED','Iacute':'\xCD','icirc':'\xEE','Icirc':'\xCE','iexcl':'\xA1','igrave':'\xEC','Igrave':'\xCC','iquest':'\xBF','iuml':'\xEF','Iuml':'\xCF','laquo':'\xAB','lt':'<','LT':'<','macr':'\xAF','micro':'\xB5','middot':'\xB7','nbsp':'\xA0','not':'\xAC','ntilde':'\xF1','Ntilde':'\xD1','oacute':'\xF3','Oacute':'\xD3','ocirc':'\xF4','Ocirc':'\xD4','ograve':'\xF2','Ograve':'\xD2','ordf':'\xAA','ordm':'\xBA','oslash':'\xF8','Oslash':'\xD8','otilde':'\xF5','Otilde':'\xD5','ouml':'\xF6','Ouml':'\xD6','para':'\xB6','plusmn':'\xB1','pound':'\xA3','quot':'"','QUOT':'"','raquo':'\xBB','reg':'\xAE','REG':'\xAE','sect':'\xA7','shy':'\xAD','sup1':'\xB9','sup2':'\xB2','sup3':'\xB3','szlig':'\xDF','thorn':'\xFE','THORN':'\xDE','times':'\xD7','uacute':'\xFA','Uacute':'\xDA','ucirc':'\xFB','Ucirc':'\xDB','ugrave':'\xF9','Ugrave':'\xD9','uml':'\xA8','uuml':'\xFC','Uuml':'\xDC','yacute':'\xFD','Yacute':'\xDD','yen':'\xA5','yuml':'\xFF'};
		var decodeMapNumeric = {'0':'\uFFFD','128':'\u20AC','130':'\u201A','131':'\u0192','132':'\u201E','133':'\u2026','134':'\u2020','135':'\u2021','136':'\u02C6','137':'\u2030','138':'\u0160','139':'\u2039','140':'\u0152','142':'\u017D','145':'\u2018','146':'\u2019','147':'\u201C','148':'\u201D','149':'\u2022','150':'\u2013','151':'\u2014','152':'\u02DC','153':'\u2122','154':'\u0161','155':'\u203A','156':'\u0153','158':'\u017E','159':'\u0178'};
		var invalidReferenceCodePoints = [1,2,3,4,5,6,7,8,11,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,127,128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,64976,64977,64978,64979,64980,64981,64982,64983,64984,64985,64986,64987,64988,64989,64990,64991,64992,64993,64994,64995,64996,64997,64998,64999,65000,65001,65002,65003,65004,65005,65006,65007,65534,65535,131070,131071,196606,196607,262142,262143,327678,327679,393214,393215,458750,458751,524286,524287,589822,589823,655358,655359,720894,720895,786430,786431,851966,851967,917502,917503,983038,983039,1048574,1048575,1114110,1114111];

		/*--------------------------------------------------------------------------*/

		var stringFromCharCode = String.fromCharCode;

		var object = {};
		var hasOwnProperty = object.hasOwnProperty;
		var has = function(object, propertyName) {
			return hasOwnProperty.call(object, propertyName);
		};

		var contains = function(array, value) {
			var index = -1;
			var length = array.length;
			while (++index < length) {
				if (array[index] == value) {
					return true;
				}
			}
			return false;
		};

		var merge = function(options, defaults) {
			if (!options) {
				return defaults;
			}
			var result = {};
			var key;
			for (key in defaults) {
				// A `hasOwnProperty` check is not needed here, since only recognized
				// option names are used anyway. Any others are ignored.
				result[key] = has(options, key) ? options[key] : defaults[key];
			}
			return result;
		};

		// Modified version of `ucs2encode`; see https://mths.be/punycode.
		var codePointToSymbol = function(codePoint, strict) {
			var output = '';
			if ((codePoint >= 0xD800 && codePoint <= 0xDFFF) || codePoint > 0x10FFFF) {
				// See issue #4:
				// “Otherwise, if the number is in the range 0xD800 to 0xDFFF or is
				// greater than 0x10FFFF, then this is a parse error. Return a U+FFFD
				// REPLACEMENT CHARACTER.”
				if (strict) {
					parseError('character reference outside the permissible Unicode range');
				}
				return '\uFFFD';
			}
			if (has(decodeMapNumeric, codePoint)) {
				if (strict) {
					parseError('disallowed character reference');
				}
				return decodeMapNumeric[codePoint];
			}
			if (strict && contains(invalidReferenceCodePoints, codePoint)) {
				parseError('disallowed character reference');
			}
			if (codePoint > 0xFFFF) {
				codePoint -= 0x10000;
				output += stringFromCharCode(codePoint >>> 10 & 0x3FF | 0xD800);
				codePoint = 0xDC00 | codePoint & 0x3FF;
			}
			output += stringFromCharCode(codePoint);
			return output;
		};

		var hexEscape = function(codePoint) {
			return '&#x' + codePoint.toString(16).toUpperCase() + ';';
		};

		var decEscape = function(codePoint) {
			return '&#' + codePoint + ';';
		};

		var parseError = function(message) {
			throw Error('Parse error: ' + message);
		};

		/*--------------------------------------------------------------------------*/

		var encode = function(string, options) {
			options = merge(options, encode.options);
			var strict = options.strict;
			if (strict && regexInvalidRawCodePoint.test(string)) {
				parseError('forbidden code point');
			}
			var encodeEverything = options.encodeEverything;
			var useNamedReferences = options.useNamedReferences;
			var allowUnsafeSymbols = options.allowUnsafeSymbols;
			var escapeCodePoint = options.decimal ? decEscape : hexEscape;

			var escapeBmpSymbol = function(symbol) {
				return escapeCodePoint(symbol.charCodeAt(0));
			};

			if (encodeEverything) {
				// Encode ASCII symbols.
				string = string.replace(regexAsciiWhitelist, function(symbol) {
					// Use named references if requested & possible.
					if (useNamedReferences && has(encodeMap, symbol)) {
						return '&' + encodeMap[symbol] + ';';
					}
					return escapeBmpSymbol(symbol);
				});
				// Shorten a few escapes that represent two symbols, of which at least one
				// is within the ASCII range.
				if (useNamedReferences) {
					string = string
						.replace(/&gt;\u20D2/g, '&nvgt;')
						.replace(/&lt;\u20D2/g, '&nvlt;')
						.replace(/&#x66;&#x6A;/g, '&fjlig;');
				}
				// Encode non-ASCII symbols.
				if (useNamedReferences) {
					// Encode non-ASCII symbols that can be replaced with a named reference.
					string = string.replace(regexEncodeNonAscii, function(string) {
						// Note: there is no need to check `has(encodeMap, string)` here.
						return '&' + encodeMap[string] + ';';
					});
				}
				// Note: any remaining non-ASCII symbols are handled outside of the `if`.
			} else if (useNamedReferences) {
				// Apply named character references.
				// Encode `<>"'&` using named character references.
				if (!allowUnsafeSymbols) {
					string = string.replace(regexEscape, function(string) {
						return '&' + encodeMap[string] + ';'; // no need to check `has()` here
					});
				}
				// Shorten escapes that represent two symbols, of which at least one is
				// `<>"'&`.
				string = string
					.replace(/&gt;\u20D2/g, '&nvgt;')
					.replace(/&lt;\u20D2/g, '&nvlt;');
				// Encode non-ASCII symbols that can be replaced with a named reference.
				string = string.replace(regexEncodeNonAscii, function(string) {
					// Note: there is no need to check `has(encodeMap, string)` here.
					return '&' + encodeMap[string] + ';';
				});
			} else if (!allowUnsafeSymbols) {
				// Encode `<>"'&` using hexadecimal escapes, now that they’re not handled
				// using named character references.
				string = string.replace(regexEscape, escapeBmpSymbol);
			}
			return string
				// Encode astral symbols.
				.replace(regexAstralSymbols, function($0) {
					// https://mathiasbynens.be/notes/javascript-encoding#surrogate-formulae
					var high = $0.charCodeAt(0);
					var low = $0.charCodeAt(1);
					var codePoint = (high - 0xD800) * 0x400 + low - 0xDC00 + 0x10000;
					return escapeCodePoint(codePoint);
				})
				// Encode any remaining BMP symbols that are not printable ASCII symbols
				// using a hexadecimal escape.
				.replace(regexBmpWhitelist, escapeBmpSymbol);
		};
		// Expose default options (so they can be overridden globally).
		encode.options = {
			'allowUnsafeSymbols': false,
			'encodeEverything': false,
			'strict': false,
			'useNamedReferences': false,
			'decimal' : false
		};

		var decode = function(html, options) {
			options = merge(options, decode.options);
			var strict = options.strict;
			if (strict && regexInvalidEntity.test(html)) {
				parseError('malformed character reference');
			}
			return html.replace(regexDecode, function($0, $1, $2, $3, $4, $5, $6, $7, $8) {
				var codePoint;
				var semicolon;
				var decDigits;
				var hexDigits;
				var reference;
				var next;

				if ($1) {
					reference = $1;
					// Note: there is no need to check `has(decodeMap, reference)`.
					return decodeMap[reference];
				}

				if ($2) {
					// Decode named character references without trailing `;`, e.g. `&amp`.
					// This is only a parse error if it gets converted to `&`, or if it is
					// followed by `=` in an attribute context.
					reference = $2;
					next = $3;
					if (next && options.isAttributeValue) {
						if (strict && next == '=') {
							parseError('`&` did not start a character reference');
						}
						return $0;
					} else {
						if (strict) {
							parseError(
								'named character reference was not terminated by a semicolon'
							);
						}
						// Note: there is no need to check `has(decodeMapLegacy, reference)`.
						return decodeMapLegacy[reference] + (next || '');
					}
				}

				if ($4) {
					// Decode decimal escapes, e.g. `&#119558;`.
					decDigits = $4;
					semicolon = $5;
					if (strict && !semicolon) {
						parseError('character reference was not terminated by a semicolon');
					}
					codePoint = parseInt(decDigits, 10);
					return codePointToSymbol(codePoint, strict);
				}

				if ($6) {
					// Decode hexadecimal escapes, e.g. `&#x1D306;`.
					hexDigits = $6;
					semicolon = $7;
					if (strict && !semicolon) {
						parseError('character reference was not terminated by a semicolon');
					}
					codePoint = parseInt(hexDigits, 16);
					return codePointToSymbol(codePoint, strict);
				}

				// If we’re still here, `if ($7)` is implied; it’s an ambiguous
				// ampersand for sure. https://mths.be/notes/ambiguous-ampersands
				if (strict) {
					parseError(
						'named character reference was not terminated by a semicolon'
					);
				}
				return $0;
			});
		};
		// Expose default options (so they can be overridden globally).
		decode.options = {
			'isAttributeValue': false,
			'strict': false
		};

		var escape = function(string) {
			return string.replace(regexEscape, function($0) {
				// Note: there is no need to check `has(escapeMap, $0)` here.
				return escapeMap[$0];
			});
		};

		/*--------------------------------------------------------------------------*/

		var he = {
			'version': '1.2.0',
			'encode': encode,
			'decode': decode,
			'escape': escape,
			'unescape': decode
		};

		// Some AMD build optimizers, like r.js, check for specific condition patterns
		// like the following:
		{
			!(__WEBPACK_AMD_DEFINE_RESULT__ = (function() {
				return he;
			}).call(exports, __webpack_require__, exports, module),
			__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));
		}

	}());


	/***/ }),

	/***/ 192:
	/***/ ((module) => {

	/**
	 * Helpers.
	 */

	var s = 1000;
	var m = s * 60;
	var h = m * 60;
	var d = h * 24;
	var w = d * 7;
	var y = d * 365.25;

	/**
	 * Parse or format the given `val`.
	 *
	 * Options:
	 *
	 *  - `long` verbose formatting [false]
	 *
	 * @param {String|Number} val
	 * @param {Object} [options]
	 * @throws {Error} throw an error if val is not a non-empty string or a number
	 * @return {String|Number}
	 * @api public
	 */

	module.exports = function (val, options) {
	  options = options || {};
	  var type = typeof val;
	  if (type === 'string' && val.length > 0) {
	    return parse(val);
	  } else if (type === 'number' && isFinite(val)) {
	    return options.long ? fmtLong(val) : fmtShort(val);
	  }
	  throw new Error(
	    'val is not a non-empty string or a valid number. val=' +
	      JSON.stringify(val)
	  );
	};

	/**
	 * Parse the given `str` and return milliseconds.
	 *
	 * @param {String} str
	 * @return {Number}
	 * @api private
	 */

	function parse(str) {
	  str = String(str);
	  if (str.length > 100) {
	    return;
	  }
	  var match = /^(-?(?:\d+)?\.?\d+) *(milliseconds?|msecs?|ms|seconds?|secs?|s|minutes?|mins?|m|hours?|hrs?|h|days?|d|weeks?|w|years?|yrs?|y)?$/i.exec(
	    str
	  );
	  if (!match) {
	    return;
	  }
	  var n = parseFloat(match[1]);
	  var type = (match[2] || 'ms').toLowerCase();
	  switch (type) {
	    case 'years':
	    case 'year':
	    case 'yrs':
	    case 'yr':
	    case 'y':
	      return n * y;
	    case 'weeks':
	    case 'week':
	    case 'w':
	      return n * w;
	    case 'days':
	    case 'day':
	    case 'd':
	      return n * d;
	    case 'hours':
	    case 'hour':
	    case 'hrs':
	    case 'hr':
	    case 'h':
	      return n * h;
	    case 'minutes':
	    case 'minute':
	    case 'mins':
	    case 'min':
	    case 'm':
	      return n * m;
	    case 'seconds':
	    case 'second':
	    case 'secs':
	    case 'sec':
	    case 's':
	      return n * s;
	    case 'milliseconds':
	    case 'millisecond':
	    case 'msecs':
	    case 'msec':
	    case 'ms':
	      return n;
	    default:
	      return undefined;
	  }
	}

	/**
	 * Short format for `ms`.
	 *
	 * @param {Number} ms
	 * @return {String}
	 * @api private
	 */

	function fmtShort(ms) {
	  var msAbs = Math.abs(ms);
	  if (msAbs >= d) {
	    return Math.round(ms / d) + 'd';
	  }
	  if (msAbs >= h) {
	    return Math.round(ms / h) + 'h';
	  }
	  if (msAbs >= m) {
	    return Math.round(ms / m) + 'm';
	  }
	  if (msAbs >= s) {
	    return Math.round(ms / s) + 's';
	  }
	  return ms + 'ms';
	}

	/**
	 * Long format for `ms`.
	 *
	 * @param {Number} ms
	 * @return {String}
	 * @api private
	 */

	function fmtLong(ms) {
	  var msAbs = Math.abs(ms);
	  if (msAbs >= d) {
	    return plural(ms, msAbs, d, 'day');
	  }
	  if (msAbs >= h) {
	    return plural(ms, msAbs, h, 'hour');
	  }
	  if (msAbs >= m) {
	    return plural(ms, msAbs, m, 'minute');
	  }
	  if (msAbs >= s) {
	    return plural(ms, msAbs, s, 'second');
	  }
	  return ms + ' ms';
	}

	/**
	 * Pluralization helper.
	 */

	function plural(ms, msAbs, n, name) {
	  var isPlural = msAbs >= n * 1.5;
	  return Math.round(ms / n) + ' ' + name + (isPlural ? 's' : '');
	}


	/***/ }),

	/***/ 325:
	/***/ ((module) => {

	// Break out of WebPack to avoid a circular replacement
	/* global __non_webpack_require__ */
	const debug = require$$0("mocha-remote");
	module.exports = debug.extend.bind(debug);


	/***/ }),

	/***/ 44:
	/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

	const Context = __webpack_require__(906);
	const Runner = __webpack_require__(255);
	const Suite = __webpack_require__(461);
	const Test = __webpack_require__(121);
	const Hook = __webpack_require__(338);
	const interfaces = __webpack_require__(334);
	const createStatsCollector = __webpack_require__(580);

	module.exports = { Context, Runner, Suite, Test, Hook, interfaces, createStatsCollector };


	/***/ }),

	/***/ 397:
	/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {
	__webpack_require__.r(__webpack_exports__);
	/* harmony export */ __webpack_require__.d(__webpack_exports__, {
	/* harmony export */   sep: () => (/* binding */ sep)
	/* harmony export */ });
	// @see https://github.com/mochajs/mocha/blob/v8.3.2/lib/utils.js#L441
	const sep = '/';


	/***/ }),

	/***/ 735:
	/***/ ((module) => {
	module.exports = require$$1;

	/***/ }),

	/***/ 354:
	/***/ ((module) => {
	module.exports = require$$2;

	/***/ }),

	/***/ 906:
	/***/ ((module) => {

	/**
	 * @module Context
	 */
	/**
	 * Expose `Context`.
	 */

	module.exports = Context;

	/**
	 * Initialize a new `Context`.
	 *
	 * @private
	 */
	function Context() {}

	/**
	 * Set or get the context `Runnable` to `runnable`.
	 *
	 * @private
	 * @param {Runnable} runnable
	 * @return {Context} context
	 */
	Context.prototype.runnable = function (runnable) {
	  if (!arguments.length) {
	    return this._runnable;
	  }
	  this.test = this._runnable = runnable;
	  return this;
	};

	/**
	 * Set or get test timeout `ms`.
	 *
	 * @private
	 * @param {number} ms
	 * @return {Context} self
	 */
	Context.prototype.timeout = function (ms) {
	  if (!arguments.length) {
	    return this.runnable().timeout();
	  }
	  this.runnable().timeout(ms);
	  return this;
	};

	/**
	 * Set or get test slowness threshold `ms`.
	 *
	 * @private
	 * @param {number} ms
	 * @return {Context} self
	 */
	Context.prototype.slow = function (ms) {
	  if (!arguments.length) {
	    return this.runnable().slow();
	  }
	  this.runnable().slow(ms);
	  return this;
	};

	/**
	 * Mark a test as skipped.
	 *
	 * @private
	 * @throws Pending
	 */
	Context.prototype.skip = function () {
	  this.runnable().skip();
	};

	/**
	 * Set or get a number of allowed retries on failed tests
	 *
	 * @private
	 * @param {number} n
	 * @return {Context} self
	 */
	Context.prototype.retries = function (n) {
	  if (!arguments.length) {
	    return this.runnable().retries();
	  }
	  this.runnable().retries(n);
	  return this;
	};


	/***/ }),

	/***/ 298:
	/***/ ((module, __unused_webpack_exports, __webpack_require__) => {


	const {format} = __webpack_require__(354);

	/**
	 * Contains error codes, factory functions to create throwable error objects,
	 * and warning/deprecation functions.
	 * @module
	 */

	/**
	 * process.emitWarning or a polyfill
	 * @see https://nodejs.org/api/process.html#process_process_emitwarning_warning_options
	 * @ignore
	 */
	const emitWarning = (msg, type) => {
	  if (process.emitWarning) {
	    process.emitWarning(msg, type);
	  } else {
	    /* istanbul ignore next */
	    process.nextTick(function () {
	      console.warn(type + ': ' + msg);
	    });
	  }
	};

	/**
	 * Show a deprecation warning. Each distinct message is only displayed once.
	 * Ignores empty messages.
	 *
	 * @param {string} [msg] - Warning to print
	 * @private
	 */
	const deprecate = msg => {
	  msg = String(msg);
	  if (msg && !deprecate.cache[msg]) {
	    deprecate.cache[msg] = true;
	    emitWarning(msg, 'DeprecationWarning');
	  }
	};
	deprecate.cache = {};

	/**
	 * Show a generic warning.
	 * Ignores empty messages.
	 *
	 * @param {string} [msg] - Warning to print
	 * @private
	 */
	const warn = msg => {
	  if (msg) {
	    emitWarning(msg);
	  }
	};

	/**
	 * When Mocha throws exceptions (or rejects `Promise`s), it attempts to assign a `code` property to the `Error` object, for easier handling. These are the potential values of `code`.
	 * @public
	 * @namespace
	 * @memberof module:lib/errors
	 */
	var constants = {
	  /**
	   * An unrecoverable error.
	   * @constant
	   * @default
	   */
	  FATAL: 'ERR_MOCHA_FATAL',

	  /**
	   * The type of an argument to a function call is invalid
	   * @constant
	   * @default
	   */
	  INVALID_ARG_TYPE: 'ERR_MOCHA_INVALID_ARG_TYPE',

	  /**
	   * The value of an argument to a function call is invalid
	   * @constant
	   * @default
	   */
	  INVALID_ARG_VALUE: 'ERR_MOCHA_INVALID_ARG_VALUE',

	  /**
	   * Something was thrown, but it wasn't an `Error`
	   * @constant
	   * @default
	   */
	  INVALID_EXCEPTION: 'ERR_MOCHA_INVALID_EXCEPTION',

	  /**
	   * An interface (e.g., `Mocha.interfaces`) is unknown or invalid
	   * @constant
	   * @default
	   */
	  INVALID_INTERFACE: 'ERR_MOCHA_INVALID_INTERFACE',

	  /**
	   * A reporter (.e.g, `Mocha.reporters`) is unknown or invalid
	   * @constant
	   * @default
	   */
	  INVALID_REPORTER: 'ERR_MOCHA_INVALID_REPORTER',

	  /**
	   * `done()` was called twice in a `Test` or `Hook` callback
	   * @constant
	   * @default
	   */
	  MULTIPLE_DONE: 'ERR_MOCHA_MULTIPLE_DONE',

	  /**
	   * No files matched the pattern provided by the user
	   * @constant
	   * @default
	   */
	  NO_FILES_MATCH_PATTERN: 'ERR_MOCHA_NO_FILES_MATCH_PATTERN',

	  /**
	   * Known, but unsupported behavior of some kind
	   * @constant
	   * @default
	   */
	  UNSUPPORTED: 'ERR_MOCHA_UNSUPPORTED',

	  /**
	   * Invalid state transition occurring in `Mocha` instance
	   * @constant
	   * @default
	   */
	  INSTANCE_ALREADY_RUNNING: 'ERR_MOCHA_INSTANCE_ALREADY_RUNNING',

	  /**
	   * Invalid state transition occurring in `Mocha` instance
	   * @constant
	   * @default
	   */
	  INSTANCE_ALREADY_DISPOSED: 'ERR_MOCHA_INSTANCE_ALREADY_DISPOSED',

	  /**
	   * Use of `only()` w/ `--forbid-only` results in this error.
	   * @constant
	   * @default
	   */
	  FORBIDDEN_EXCLUSIVITY: 'ERR_MOCHA_FORBIDDEN_EXCLUSIVITY',

	  /**
	   * To be thrown when a user-defined plugin implementation (e.g., `mochaHooks`) is invalid
	   * @constant
	   * @default
	   */
	  INVALID_PLUGIN_IMPLEMENTATION: 'ERR_MOCHA_INVALID_PLUGIN_IMPLEMENTATION',

	  /**
	   * To be thrown when a builtin or third-party plugin definition (the _definition_ of `mochaHooks`) is invalid
	   * @constant
	   * @default
	   */
	  INVALID_PLUGIN_DEFINITION: 'ERR_MOCHA_INVALID_PLUGIN_DEFINITION',

	  /**
	   * When a runnable exceeds its allowed run time.
	   * @constant
	   * @default
	   */
	  TIMEOUT: 'ERR_MOCHA_TIMEOUT',

	  /**
	   * Input file is not able to be parsed
	   * @constant
	   * @default
	   */
	  UNPARSABLE_FILE: 'ERR_MOCHA_UNPARSABLE_FILE'
	};

	/**
	 * A set containing all string values of all Mocha error constants, for use by {@link isMochaError}.
	 * @private
	 */
	const MOCHA_ERRORS = new Set(Object.values(constants));

	/**
	 * Creates an error object to be thrown when no files to be tested could be found using specified pattern.
	 *
	 * @public
	 * @static
	 * @param {string} message - Error message to be displayed.
	 * @param {string} pattern - User-specified argument value.
	 * @returns {Error} instance detailing the error condition
	 */
	function createNoFilesMatchPatternError(message, pattern) {
	  var err = new Error(message);
	  err.code = constants.NO_FILES_MATCH_PATTERN;
	  err.pattern = pattern;
	  return err;
	}

	/**
	 * Creates an error object to be thrown when the reporter specified in the options was not found.
	 *
	 * @public
	 * @param {string} message - Error message to be displayed.
	 * @param {string} reporter - User-specified reporter value.
	 * @returns {Error} instance detailing the error condition
	 */
	function createInvalidReporterError(message, reporter) {
	  var err = new TypeError(message);
	  err.code = constants.INVALID_REPORTER;
	  err.reporter = reporter;
	  return err;
	}

	/**
	 * Creates an error object to be thrown when the interface specified in the options was not found.
	 *
	 * @public
	 * @static
	 * @param {string} message - Error message to be displayed.
	 * @param {string} ui - User-specified interface value.
	 * @returns {Error} instance detailing the error condition
	 */
	function createInvalidInterfaceError(message, ui) {
	  var err = new Error(message);
	  err.code = constants.INVALID_INTERFACE;
	  err.interface = ui;
	  return err;
	}

	/**
	 * Creates an error object to be thrown when a behavior, option, or parameter is unsupported.
	 *
	 * @public
	 * @static
	 * @param {string} message - Error message to be displayed.
	 * @returns {Error} instance detailing the error condition
	 */
	function createUnsupportedError(message) {
	  var err = new Error(message);
	  err.code = constants.UNSUPPORTED;
	  return err;
	}

	/**
	 * Creates an error object to be thrown when an argument is missing.
	 *
	 * @public
	 * @static
	 * @param {string} message - Error message to be displayed.
	 * @param {string} argument - Argument name.
	 * @param {string} expected - Expected argument datatype.
	 * @returns {Error} instance detailing the error condition
	 */
	function createMissingArgumentError(message, argument, expected) {
	  return createInvalidArgumentTypeError(message, argument, expected);
	}

	/**
	 * Creates an error object to be thrown when an argument did not use the supported type
	 *
	 * @public
	 * @static
	 * @param {string} message - Error message to be displayed.
	 * @param {string} argument - Argument name.
	 * @param {string} expected - Expected argument datatype.
	 * @returns {Error} instance detailing the error condition
	 */
	function createInvalidArgumentTypeError(message, argument, expected) {
	  var err = new TypeError(message);
	  err.code = constants.INVALID_ARG_TYPE;
	  err.argument = argument;
	  err.expected = expected;
	  err.actual = typeof argument;
	  return err;
	}

	/**
	 * Creates an error object to be thrown when an argument did not use the supported value
	 *
	 * @public
	 * @static
	 * @param {string} message - Error message to be displayed.
	 * @param {string} argument - Argument name.
	 * @param {string} value - Argument value.
	 * @param {string} [reason] - Why value is invalid.
	 * @returns {Error} instance detailing the error condition
	 */
	function createInvalidArgumentValueError(message, argument, value, reason) {
	  var err = new TypeError(message);
	  err.code = constants.INVALID_ARG_VALUE;
	  err.argument = argument;
	  err.value = value;
	  err.reason = typeof reason !== 'undefined' ? reason : 'is invalid';
	  return err;
	}

	/**
	 * Creates an error object to be thrown when an exception was caught, but the `Error` is falsy or undefined.
	 *
	 * @public
	 * @static
	 * @param {string} message - Error message to be displayed.
	 * @returns {Error} instance detailing the error condition
	 */
	function createInvalidExceptionError(message, value) {
	  var err = new Error(message);
	  err.code = constants.INVALID_EXCEPTION;
	  err.valueType = typeof value;
	  err.value = value;
	  return err;
	}

	/**
	 * Creates an error object to be thrown when an unrecoverable error occurs.
	 *
	 * @public
	 * @static
	 * @param {string} message - Error message to be displayed.
	 * @returns {Error} instance detailing the error condition
	 */
	function createFatalError(message, value) {
	  var err = new Error(message);
	  err.code = constants.FATAL;
	  err.valueType = typeof value;
	  err.value = value;
	  return err;
	}

	/**
	 * Dynamically creates a plugin-type-specific error based on plugin type
	 * @param {string} message - Error message
	 * @param {"reporter"|"ui"} pluginType - Plugin type. Future: expand as needed
	 * @param {string} [pluginId] - Name/path of plugin, if any
	 * @throws When `pluginType` is not known
	 * @public
	 * @static
	 * @returns {Error}
	 */
	function createInvalidLegacyPluginError(message, pluginType, pluginId) {
	  switch (pluginType) {
	    case 'reporter':
	      return createInvalidReporterError(message, pluginId);
	    case 'ui':
	      return createInvalidInterfaceError(message, pluginId);
	    default:
	      throw new Error('unknown pluginType "' + pluginType + '"');
	  }
	}

	/**
	 * **DEPRECATED**.  Use {@link createInvalidLegacyPluginError} instead  Dynamically creates a plugin-type-specific error based on plugin type
	 * @deprecated
	 * @param {string} message - Error message
	 * @param {"reporter"|"interface"} pluginType - Plugin type. Future: expand as needed
	 * @param {string} [pluginId] - Name/path of plugin, if any
	 * @throws When `pluginType` is not known
	 * @public
	 * @static
	 * @returns {Error}
	 */
	function createInvalidPluginError(...args) {
	  deprecate('Use createInvalidLegacyPluginError() instead');
	  return createInvalidLegacyPluginError(...args);
	}

	/**
	 * Creates an error object to be thrown when a mocha object's `run` method is executed while it is already disposed.
	 * @param {string} message The error message to be displayed.
	 * @param {boolean} cleanReferencesAfterRun the value of `cleanReferencesAfterRun`
	 * @param {Mocha} instance the mocha instance that throw this error
	 * @static
	 */
	function createMochaInstanceAlreadyDisposedError(
	  message,
	  cleanReferencesAfterRun,
	  instance
	) {
	  var err = new Error(message);
	  err.code = constants.INSTANCE_ALREADY_DISPOSED;
	  err.cleanReferencesAfterRun = cleanReferencesAfterRun;
	  err.instance = instance;
	  return err;
	}

	/**
	 * Creates an error object to be thrown when a mocha object's `run` method is called while a test run is in progress.
	 * @param {string} message The error message to be displayed.
	 * @static
	 * @public
	 */
	function createMochaInstanceAlreadyRunningError(message, instance) {
	  var err = new Error(message);
	  err.code = constants.INSTANCE_ALREADY_RUNNING;
	  err.instance = instance;
	  return err;
	}

	/**
	 * Creates an error object to be thrown when done() is called multiple times in a test
	 *
	 * @public
	 * @param {Runnable} runnable - Original runnable
	 * @param {Error} [originalErr] - Original error, if any
	 * @returns {Error} instance detailing the error condition
	 * @static
	 */
	function createMultipleDoneError(runnable, originalErr) {
	  var title;
	  try {
	    title = format('<%s>', runnable.fullTitle());
	    if (runnable.parent.root) {
	      title += ' (of root suite)';
	    }
	  } catch (ignored) {
	    title = format('<%s> (of unknown suite)', runnable.title);
	  }
	  var message = format(
	    'done() called multiple times in %s %s',
	    runnable.type ? runnable.type : 'unknown runnable',
	    title
	  );
	  if (runnable.file) {
	    message += format(' of file %s', runnable.file);
	  }
	  if (originalErr) {
	    message += format('; in addition, done() received error: %s', originalErr);
	  }

	  var err = new Error(message);
	  err.code = constants.MULTIPLE_DONE;
	  err.valueType = typeof originalErr;
	  err.value = originalErr;
	  return err;
	}

	/**
	 * Creates an error object to be thrown when `.only()` is used with
	 * `--forbid-only`.
	 * @static
	 * @public
	 * @param {Mocha} mocha - Mocha instance
	 * @returns {Error} Error with code {@link constants.FORBIDDEN_EXCLUSIVITY}
	 */
	function createForbiddenExclusivityError(mocha) {
	  var err = new Error(
	    mocha.isWorker
	      ? '`.only` is not supported in parallel mode'
	      : '`.only` forbidden by --forbid-only'
	  );
	  err.code = constants.FORBIDDEN_EXCLUSIVITY;
	  return err;
	}

	/**
	 * Creates an error object to be thrown when a plugin definition is invalid
	 * @static
	 * @param {string} msg - Error message
	 * @param {PluginDefinition} [pluginDef] - Problematic plugin definition
	 * @public
	 * @returns {Error} Error with code {@link constants.INVALID_PLUGIN_DEFINITION}
	 */
	function createInvalidPluginDefinitionError(msg, pluginDef) {
	  const err = new Error(msg);
	  err.code = constants.INVALID_PLUGIN_DEFINITION;
	  err.pluginDef = pluginDef;
	  return err;
	}

	/**
	 * Creates an error object to be thrown when a plugin implementation (user code) is invalid
	 * @static
	 * @param {string} msg - Error message
	 * @param {Object} [opts] - Plugin definition and user-supplied implementation
	 * @param {PluginDefinition} [opts.pluginDef] - Plugin Definition
	 * @param {*} [opts.pluginImpl] - Plugin Implementation (user-supplied)
	 * @public
	 * @returns {Error} Error with code {@link constants.INVALID_PLUGIN_DEFINITION}
	 */
	function createInvalidPluginImplementationError(
	  msg,
	  {pluginDef, pluginImpl} = {}
	) {
	  const err = new Error(msg);
	  err.code = constants.INVALID_PLUGIN_IMPLEMENTATION;
	  err.pluginDef = pluginDef;
	  err.pluginImpl = pluginImpl;
	  return err;
	}

	/**
	 * Creates an error object to be thrown when a runnable exceeds its allowed run time.
	 * @static
	 * @param {string} msg - Error message
	 * @param {number} [timeout] - Timeout in ms
	 * @param {string} [file] - File, if given
	 * @returns {MochaTimeoutError}
	 */
	function createTimeoutError(msg, timeout, file) {
	  const err = new Error(msg);
	  err.code = constants.TIMEOUT;
	  err.timeout = timeout;
	  err.file = file;
	  return err;
	}

	/**
	 * Creates an error object to be thrown when file is unparsable
	 * @public
	 * @static
	 * @param {string} message - Error message to be displayed.
	 * @param {string} filename - File name
	 * @returns {Error} Error with code {@link constants.UNPARSABLE_FILE}
	 */
	function createUnparsableFileError(message, filename) {
	  var err = new Error(message);
	  err.code = constants.UNPARSABLE_FILE;
	  return err;
	}

	/**
	 * Returns `true` if an error came out of Mocha.
	 * _Can suffer from false negatives, but not false positives._
	 * @static
	 * @public
	 * @param {*} err - Error, or anything
	 * @returns {boolean}
	 */
	const isMochaError = err =>
	  Boolean(err && typeof err === 'object' && MOCHA_ERRORS.has(err.code));

	module.exports = {
	  constants,
	  createFatalError,
	  createForbiddenExclusivityError,
	  createInvalidArgumentTypeError,
	  createInvalidArgumentValueError,
	  createInvalidExceptionError,
	  createInvalidInterfaceError,
	  createInvalidLegacyPluginError,
	  createInvalidPluginDefinitionError,
	  createInvalidPluginError,
	  createInvalidPluginImplementationError,
	  createInvalidReporterError,
	  createMissingArgumentError,
	  createMochaInstanceAlreadyDisposedError,
	  createMochaInstanceAlreadyRunningError,
	  createMultipleDoneError,
	  createNoFilesMatchPatternError,
	  createTimeoutError,
	  createUnparsableFileError,
	  createUnsupportedError,
	  deprecate,
	  isMochaError,
	  warn
	};

	/**
	 * The error thrown when a Runnable times out
	 * @memberof module:lib/errors
	 * @typedef {Error} MochaTimeoutError
	 * @property {constants.TIMEOUT} code - Error code
	 * @property {number?} timeout Timeout in ms
	 * @property {string?} file Filepath, if given
	 */


	/***/ }),

	/***/ 338:
	/***/ ((module, __unused_webpack_exports, __webpack_require__) => {


	var Runnable = __webpack_require__(4);
	const {inherits, constants} = __webpack_require__(272);
	const {MOCHA_ID_PROP_NAME} = constants;

	/**
	 * Expose `Hook`.
	 */

	module.exports = Hook;

	/**
	 * Initialize a new `Hook` with the given `title` and callback `fn`
	 *
	 * @class
	 * @extends Runnable
	 * @param {String} title
	 * @param {Function} fn
	 */
	function Hook(title, fn) {
	  Runnable.call(this, title, fn);
	  this.type = 'hook';
	}

	/**
	 * Inherit from `Runnable.prototype`.
	 */
	inherits(Hook, Runnable);

	/**
	 * Resets the state for a next run.
	 */
	Hook.prototype.reset = function () {
	  Runnable.prototype.reset.call(this);
	  delete this._error;
	};

	/**
	 * Get or set the test `err`.
	 *
	 * @memberof Hook
	 * @public
	 * @param {Error} err
	 * @return {Error}
	 */
	Hook.prototype.error = function (err) {
	  if (!arguments.length) {
	    err = this._error;
	    this._error = null;
	    return err;
	  }

	  this._error = err;
	};

	/**
	 * Returns an object suitable for IPC.
	 * Functions are represented by keys beginning with `$$`.
	 * @private
	 * @returns {Object}
	 */
	Hook.prototype.serialize = function serialize() {
	  return {
	    $$currentRetry: this.currentRetry(),
	    $$fullTitle: this.fullTitle(),
	    $$isPending: Boolean(this.isPending()),
	    $$titlePath: this.titlePath(),
	    ctx:
	      this.ctx && this.ctx.currentTest
	        ? {
	            currentTest: {
	              title: this.ctx.currentTest.title,
	              [MOCHA_ID_PROP_NAME]: this.ctx.currentTest.id
	            }
	          }
	        : {},
	    duration: this.duration,
	    file: this.file,
	    parent: {
	      $$fullTitle: this.parent.fullTitle(),
	      [MOCHA_ID_PROP_NAME]: this.parent.id
	    },
	    state: this.state,
	    title: this.title,
	    type: this.type,
	    [MOCHA_ID_PROP_NAME]: this.id
	  };
	};


	/***/ }),

	/***/ 356:
	/***/ ((module, __unused_webpack_exports, __webpack_require__) => {


	var Test = __webpack_require__(121);
	var EVENT_FILE_PRE_REQUIRE =
	  (__webpack_require__(461).constants).EVENT_FILE_PRE_REQUIRE;

	/**
	 * BDD-style interface:
	 *
	 *      describe('Array', function() {
	 *        describe('#indexOf()', function() {
	 *          it('should return -1 when not present', function() {
	 *            // ...
	 *          });
	 *
	 *          it('should return the index when present', function() {
	 *            // ...
	 *          });
	 *        });
	 *      });
	 *
	 * @param {Suite} suite Root suite.
	 */
	module.exports = function bddInterface(suite) {
	  var suites = [suite];

	  suite.on(EVENT_FILE_PRE_REQUIRE, function (context, file, mocha) {
	    var common = __webpack_require__(905)(suites, context, mocha);

	    context.before = common.before;
	    context.after = common.after;
	    context.beforeEach = common.beforeEach;
	    context.afterEach = common.afterEach;
	    context.run = mocha.options.delay && common.runWithSuite(suite);
	    /**
	     * Describe a "suite" with the given `title`
	     * and callback `fn` containing nested suites
	     * and/or tests.
	     */

	    context.describe = context.context = function (title, fn) {
	      return common.suite.create({
	        title,
	        file,
	        fn
	      });
	    };

	    /**
	     * Pending describe.
	     */

	    context.xdescribe =
	      context.xcontext =
	      context.describe.skip =
	        function (title, fn) {
	          return common.suite.skip({
	            title,
	            file,
	            fn
	          });
	        };

	    /**
	     * Exclusive suite.
	     */

	    context.describe.only = function (title, fn) {
	      return common.suite.only({
	        title,
	        file,
	        fn
	      });
	    };

	    /**
	     * Describe a specification or test-case
	     * with the given `title` and callback `fn`
	     * acting as a thunk.
	     */

	    context.it = context.specify = function (title, fn) {
	      var suite = suites[0];
	      if (suite.isPending()) {
	        fn = null;
	      }
	      var test = new Test(title, fn);
	      test.file = file;
	      suite.addTest(test);
	      return test;
	    };

	    /**
	     * Exclusive test-case.
	     */

	    context.it.only = function (title, fn) {
	      return common.test.only(mocha, context.it(title, fn));
	    };

	    /**
	     * Pending test case.
	     */

	    context.xit =
	      context.xspecify =
	      context.it.skip =
	        function (title) {
	          return context.it(title);
	        };
	  });
	};

	module.exports.description = 'BDD or RSpec style [default]';


	/***/ }),

	/***/ 905:
	/***/ ((module, __unused_webpack_exports, __webpack_require__) => {


	/**
	 @module interfaces/common
	*/

	var Suite = __webpack_require__(461);
	var errors = __webpack_require__(298);
	var createMissingArgumentError = errors.createMissingArgumentError;
	var createUnsupportedError = errors.createUnsupportedError;
	var createForbiddenExclusivityError = errors.createForbiddenExclusivityError;

	/**
	 * Functions common to more than one interface.
	 *
	 * @private
	 * @param {Suite[]} suites
	 * @param {Context} context
	 * @param {Mocha} mocha
	 * @return {Object} An object containing common functions.
	 */
	module.exports = function (suites, context, mocha) {
	  /**
	   * Check if the suite should be tested.
	   *
	   * @private
	   * @param {Suite} suite - suite to check
	   * @returns {boolean}
	   */
	  function shouldBeTested(suite) {
	    return (
	      !mocha.options.grep ||
	      (mocha.options.grep &&
	        mocha.options.grep.test(suite.fullTitle()) &&
	        !mocha.options.invert)
	    );
	  }

	  return {
	    /**
	     * This is only present if flag --delay is passed into Mocha. It triggers
	     * root suite execution.
	     *
	     * @param {Suite} suite The root suite.
	     * @return {Function} A function which runs the root suite
	     */
	    runWithSuite: function runWithSuite(suite) {
	      return function run() {
	        suite.run();
	      };
	    },

	    /**
	     * Execute before running tests.
	     *
	     * @param {string} name
	     * @param {Function} fn
	     */
	    before: function (name, fn) {
	      suites[0].beforeAll(name, fn);
	    },

	    /**
	     * Execute after running tests.
	     *
	     * @param {string} name
	     * @param {Function} fn
	     */
	    after: function (name, fn) {
	      suites[0].afterAll(name, fn);
	    },

	    /**
	     * Execute before each test case.
	     *
	     * @param {string} name
	     * @param {Function} fn
	     */
	    beforeEach: function (name, fn) {
	      suites[0].beforeEach(name, fn);
	    },

	    /**
	     * Execute after each test case.
	     *
	     * @param {string} name
	     * @param {Function} fn
	     */
	    afterEach: function (name, fn) {
	      suites[0].afterEach(name, fn);
	    },

	    suite: {
	      /**
	       * Create an exclusive Suite; convenience function
	       * See docstring for create() below.
	       *
	       * @param {Object} opts
	       * @returns {Suite}
	       */
	      only: function only(opts) {
	        if (mocha.options.forbidOnly) {
	          throw createForbiddenExclusivityError(mocha);
	        }
	        opts.isOnly = true;
	        return this.create(opts);
	      },

	      /**
	       * Create a Suite, but skip it; convenience function
	       * See docstring for create() below.
	       *
	       * @param {Object} opts
	       * @returns {Suite}
	       */
	      skip: function skip(opts) {
	        opts.pending = true;
	        return this.create(opts);
	      },

	      /**
	       * Creates a suite.
	       *
	       * @param {Object} opts Options
	       * @param {string} opts.title Title of Suite
	       * @param {Function} [opts.fn] Suite Function (not always applicable)
	       * @param {boolean} [opts.pending] Is Suite pending?
	       * @param {string} [opts.file] Filepath where this Suite resides
	       * @param {boolean} [opts.isOnly] Is Suite exclusive?
	       * @returns {Suite}
	       */
	      create: function create(opts) {
	        var suite = Suite.create(suites[0], opts.title);
	        suite.pending = Boolean(opts.pending);
	        suite.file = opts.file;
	        suites.unshift(suite);
	        if (opts.isOnly) {
	          suite.markOnly();
	        }
	        if (
	          suite.pending &&
	          mocha.options.forbidPending &&
	          shouldBeTested(suite)
	        ) {
	          throw createUnsupportedError('Pending test forbidden');
	        }
	        if (typeof opts.fn === 'function') {
	          opts.fn.call(suite);
	          suites.shift();
	        } else if (typeof opts.fn === 'undefined' && !suite.pending) {
	          throw createMissingArgumentError(
	            'Suite "' +
	              suite.fullTitle() +
	              '" was defined but no callback was supplied. ' +
	              'Supply a callback or explicitly skip the suite.',
	            'callback',
	            'function'
	          );
	        } else if (!opts.fn && suite.pending) {
	          suites.shift();
	        }

	        return suite;
	      }
	    },

	    test: {
	      /**
	       * Exclusive test-case.
	       *
	       * @param {Object} mocha
	       * @param {Function} test
	       * @returns {*}
	       */
	      only: function (mocha, test) {
	        if (mocha.options.forbidOnly) {
	          throw createForbiddenExclusivityError(mocha);
	        }
	        test.markOnly();
	        return test;
	      },

	      /**
	       * Pending test case.
	       *
	       * @param {string} title
	       */
	      skip: function (title) {
	        context.test(title);
	      }
	    }
	  };
	};


	/***/ }),

	/***/ 941:
	/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

	var Suite = __webpack_require__(461);
	var Test = __webpack_require__(121);

	/**
	 * Exports-style (as Node.js module) interface:
	 *
	 *     exports.Array = {
	 *       '#indexOf()': {
	 *         'should return -1 when the value is not present': function() {
	 *
	 *         },
	 *
	 *         'should return the correct index when the value is present': function() {
	 *
	 *         }
	 *       }
	 *     };
	 *
	 * @param {Suite} suite Root suite.
	 */
	module.exports = function (suite) {
	  var suites = [suite];

	  suite.on(Suite.constants.EVENT_FILE_REQUIRE, visit);

	  function visit(obj, file) {
	    var suite;
	    for (var key in obj) {
	      if (typeof obj[key] === 'function') {
	        var fn = obj[key];
	        switch (key) {
	          case 'before':
	            suites[0].beforeAll(fn);
	            break;
	          case 'after':
	            suites[0].afterAll(fn);
	            break;
	          case 'beforeEach':
	            suites[0].beforeEach(fn);
	            break;
	          case 'afterEach':
	            suites[0].afterEach(fn);
	            break;
	          default:
	            var test = new Test(key, fn);
	            test.file = file;
	            suites[0].addTest(test);
	        }
	      } else {
	        suite = Suite.create(suites[0], key);
	        suites.unshift(suite);
	        visit(obj[key], file);
	        suites.shift();
	      }
	    }
	  }
	};

	module.exports.description = 'Node.js module ("exports") style';


	/***/ }),

	/***/ 334:
	/***/ ((__unused_webpack_module, exports, __webpack_require__) => {


	exports.bdd = __webpack_require__(356);
	exports.tdd = __webpack_require__(522);
	exports.qunit = __webpack_require__(243);
	exports.exports = __webpack_require__(941);


	/***/ }),

	/***/ 243:
	/***/ ((module, __unused_webpack_exports, __webpack_require__) => {


	var Test = __webpack_require__(121);
	var EVENT_FILE_PRE_REQUIRE =
	  (__webpack_require__(461).constants).EVENT_FILE_PRE_REQUIRE;

	/**
	 * QUnit-style interface:
	 *
	 *     suite('Array');
	 *
	 *     test('#length', function() {
	 *       var arr = [1,2,3];
	 *       ok(arr.length == 3);
	 *     });
	 *
	 *     test('#indexOf()', function() {
	 *       var arr = [1,2,3];
	 *       ok(arr.indexOf(1) == 0);
	 *       ok(arr.indexOf(2) == 1);
	 *       ok(arr.indexOf(3) == 2);
	 *     });
	 *
	 *     suite('String');
	 *
	 *     test('#length', function() {
	 *       ok('foo'.length == 3);
	 *     });
	 *
	 * @param {Suite} suite Root suite.
	 */
	module.exports = function qUnitInterface(suite) {
	  var suites = [suite];

	  suite.on(EVENT_FILE_PRE_REQUIRE, function (context, file, mocha) {
	    var common = __webpack_require__(905)(suites, context, mocha);

	    context.before = common.before;
	    context.after = common.after;
	    context.beforeEach = common.beforeEach;
	    context.afterEach = common.afterEach;
	    context.run = mocha.options.delay && common.runWithSuite(suite);
	    /**
	     * Describe a "suite" with the given `title`.
	     */

	    context.suite = function (title) {
	      if (suites.length > 1) {
	        suites.shift();
	      }
	      return common.suite.create({
	        title,
	        file,
	        fn: false
	      });
	    };

	    /**
	     * Exclusive Suite.
	     */

	    context.suite.only = function (title) {
	      if (suites.length > 1) {
	        suites.shift();
	      }
	      return common.suite.only({
	        title,
	        file,
	        fn: false
	      });
	    };

	    /**
	     * Describe a specification or test-case
	     * with the given `title` and callback `fn`
	     * acting as a thunk.
	     */

	    context.test = function (title, fn) {
	      var test = new Test(title, fn);
	      test.file = file;
	      suites[0].addTest(test);
	      return test;
	    };

	    /**
	     * Exclusive test-case.
	     */

	    context.test.only = function (title, fn) {
	      return common.test.only(mocha, context.test(title, fn));
	    };

	    context.test.skip = common.test.skip;
	  });
	};

	module.exports.description = 'QUnit style';


	/***/ }),

	/***/ 522:
	/***/ ((module, __unused_webpack_exports, __webpack_require__) => {


	var Test = __webpack_require__(121);
	var EVENT_FILE_PRE_REQUIRE =
	  (__webpack_require__(461).constants).EVENT_FILE_PRE_REQUIRE;

	/**
	 * TDD-style interface:
	 *
	 *      suite('Array', function() {
	 *        suite('#indexOf()', function() {
	 *          suiteSetup(function() {
	 *
	 *          });
	 *
	 *          test('should return -1 when not present', function() {
	 *
	 *          });
	 *
	 *          test('should return the index when present', function() {
	 *
	 *          });
	 *
	 *          suiteTeardown(function() {
	 *
	 *          });
	 *        });
	 *      });
	 *
	 * @param {Suite} suite Root suite.
	 */
	module.exports = function (suite) {
	  var suites = [suite];

	  suite.on(EVENT_FILE_PRE_REQUIRE, function (context, file, mocha) {
	    var common = __webpack_require__(905)(suites, context, mocha);

	    context.setup = common.beforeEach;
	    context.teardown = common.afterEach;
	    context.suiteSetup = common.before;
	    context.suiteTeardown = common.after;
	    context.run = mocha.options.delay && common.runWithSuite(suite);

	    /**
	     * Describe a "suite" with the given `title` and callback `fn` containing
	     * nested suites and/or tests.
	     */
	    context.suite = function (title, fn) {
	      return common.suite.create({
	        title,
	        file,
	        fn
	      });
	    };

	    /**
	     * Pending suite.
	     */
	    context.suite.skip = function (title, fn) {
	      return common.suite.skip({
	        title,
	        file,
	        fn
	      });
	    };

	    /**
	     * Exclusive test-case.
	     */
	    context.suite.only = function (title, fn) {
	      return common.suite.only({
	        title,
	        file,
	        fn
	      });
	    };

	    /**
	     * Describe a specification or test-case with the given `title` and
	     * callback `fn` acting as a thunk.
	     */
	    context.test = function (title, fn) {
	      var suite = suites[0];
	      if (suite.isPending()) {
	        fn = null;
	      }
	      var test = new Test(title, fn);
	      test.file = file;
	      suite.addTest(test);
	      return test;
	    };

	    /**
	     * Exclusive test-case.
	     */

	    context.test.only = function (title, fn) {
	      return common.test.only(mocha, context.test(title, fn));
	    };

	    context.test.skip = common.test.skip;
	  });
	};

	module.exports.description =
	  'traditional "suite"/"test" instead of BDD\'s "describe"/"it"';


	/***/ }),

	/***/ 642:
	/***/ ((module) => {


	/**
	 @module Pending
	*/

	module.exports = Pending;

	/**
	 * Initialize a new `Pending` error with the given message.
	 *
	 * @param {string} message
	 */
	function Pending(message) {
	  this.message = message;
	}


	/***/ }),

	/***/ 4:
	/***/ ((module, __unused_webpack_exports, __webpack_require__) => {


	var EventEmitter = (__webpack_require__(735).EventEmitter);
	var Pending = __webpack_require__(642);
	var debug = __webpack_require__(325)('mocha:runnable');
	var milliseconds = __webpack_require__(192);
	var utils = __webpack_require__(272);
	const {
	  createInvalidExceptionError,
	  createMultipleDoneError,
	  createTimeoutError
	} = __webpack_require__(298);

	/**
	 * Save timer references to avoid Sinon interfering (see GH-237).
	 * @private
	 */
	var Date = __webpack_require__.g.Date;
	var setTimeout = __webpack_require__.g.setTimeout;
	var clearTimeout = __webpack_require__.g.clearTimeout;
	var toString = Object.prototype.toString;

	module.exports = Runnable;

	/**
	 * Initialize a new `Runnable` with the given `title` and callback `fn`.
	 *
	 * @class
	 * @extends external:EventEmitter
	 * @public
	 * @param {String} title
	 * @param {Function} fn
	 */
	function Runnable(title, fn) {
	  this.title = title;
	  this.fn = fn;
	  this.body = (fn || '').toString();
	  this.async = fn && fn.length;
	  this.sync = !this.async;
	  this._timeout = 2000;
	  this._slow = 75;
	  this._retries = -1;
	  utils.assignNewMochaID(this);
	  Object.defineProperty(this, 'id', {
	    get() {
	      return utils.getMochaID(this);
	    }
	  });
	  this.reset();
	}

	/**
	 * Inherit from `EventEmitter.prototype`.
	 */
	utils.inherits(Runnable, EventEmitter);

	/**
	 * Resets the state initially or for a next run.
	 */
	Runnable.prototype.reset = function () {
	  this.timedOut = false;
	  this._currentRetry = 0;
	  this.pending = false;
	  delete this.state;
	  delete this.err;
	};

	/**
	 * Get current timeout value in msecs.
	 *
	 * @private
	 * @returns {number} current timeout threshold value
	 */
	/**
	 * @summary
	 * Set timeout threshold value (msecs).
	 *
	 * @description
	 * A string argument can use shorthand (e.g., "2s") and will be converted.
	 * The value will be clamped to range [<code>0</code>, <code>2^<sup>31</sup>-1</code>].
	 * If clamped value matches either range endpoint, timeouts will be disabled.
	 *
	 * @private
	 * @see {@link https://developer.mozilla.org/en-US/docs/Web/API/WindowOrWorkerGlobalScope/setTimeout#Maximum_delay_value}
	 * @param {number|string} ms - Timeout threshold value.
	 * @returns {Runnable} this
	 * @chainable
	 */
	Runnable.prototype.timeout = function (ms) {
	  if (!arguments.length) {
	    return this._timeout;
	  }
	  if (typeof ms === 'string') {
	    ms = milliseconds(ms);
	  }

	  // Clamp to range
	  var INT_MAX = Math.pow(2, 31) - 1;
	  var range = [0, INT_MAX];
	  ms = utils.clamp(ms, range);

	  // see #1652 for reasoning
	  if (ms === range[0] || ms === range[1]) {
	    this._timeout = 0;
	  } else {
	    this._timeout = ms;
	  }
	  debug('timeout %d', this._timeout);

	  if (this.timer) {
	    this.resetTimeout();
	  }
	  return this;
	};

	/**
	 * Set or get slow `ms`.
	 *
	 * @private
	 * @param {number|string} ms
	 * @return {Runnable|number} ms or Runnable instance.
	 */
	Runnable.prototype.slow = function (ms) {
	  if (!arguments.length || typeof ms === 'undefined') {
	    return this._slow;
	  }
	  if (typeof ms === 'string') {
	    ms = milliseconds(ms);
	  }
	  debug('slow %d', ms);
	  this._slow = ms;
	  return this;
	};

	/**
	 * Halt and mark as pending.
	 *
	 * @memberof Mocha.Runnable
	 * @public
	 */
	Runnable.prototype.skip = function () {
	  this.pending = true;
	  throw new Pending('sync skip; aborting execution');
	};

	/**
	 * Check if this runnable or its parent suite is marked as pending.
	 *
	 * @private
	 */
	Runnable.prototype.isPending = function () {
	  return this.pending || (this.parent && this.parent.isPending());
	};

	/**
	 * Return `true` if this Runnable has failed.
	 * @return {boolean}
	 * @private
	 */
	Runnable.prototype.isFailed = function () {
	  return !this.isPending() && this.state === constants.STATE_FAILED;
	};

	/**
	 * Return `true` if this Runnable has passed.
	 * @return {boolean}
	 * @private
	 */
	Runnable.prototype.isPassed = function () {
	  return !this.isPending() && this.state === constants.STATE_PASSED;
	};

	/**
	 * Set or get number of retries.
	 *
	 * @private
	 */
	Runnable.prototype.retries = function (n) {
	  if (!arguments.length) {
	    return this._retries;
	  }
	  this._retries = n;
	};

	/**
	 * Set or get current retry
	 *
	 * @private
	 */
	Runnable.prototype.currentRetry = function (n) {
	  if (!arguments.length) {
	    return this._currentRetry;
	  }
	  this._currentRetry = n;
	};

	/**
	 * Return the full title generated by recursively concatenating the parent's
	 * full title.
	 *
	 * @memberof Mocha.Runnable
	 * @public
	 * @return {string}
	 */
	Runnable.prototype.fullTitle = function () {
	  return this.titlePath().join(' ');
	};

	/**
	 * Return the title path generated by concatenating the parent's title path with the title.
	 *
	 * @memberof Mocha.Runnable
	 * @public
	 * @return {string[]}
	 */
	Runnable.prototype.titlePath = function () {
	  return this.parent.titlePath().concat([this.title]);
	};

	/**
	 * Clear the timeout.
	 *
	 * @private
	 */
	Runnable.prototype.clearTimeout = function () {
	  clearTimeout(this.timer);
	};

	/**
	 * Reset the timeout.
	 *
	 * @private
	 */
	Runnable.prototype.resetTimeout = function () {
	  var self = this;
	  var ms = this.timeout();

	  if (ms === 0) {
	    return;
	  }
	  this.clearTimeout();
	  this.timer = setTimeout(function () {
	    if (self.timeout() === 0) {
	      return;
	    }
	    self.callback(self._timeoutError(ms));
	    self.timedOut = true;
	  }, ms);
	};

	/**
	 * Set or get a list of whitelisted globals for this test run.
	 *
	 * @private
	 * @param {string[]} globals
	 */
	Runnable.prototype.globals = function (globals) {
	  if (!arguments.length) {
	    return this._allowedGlobals;
	  }
	  this._allowedGlobals = globals;
	};

	/**
	 * Run the test and invoke `fn(err)`.
	 *
	 * @param {Function} fn
	 * @private
	 */
	Runnable.prototype.run = function (fn) {
	  var self = this;
	  var start = new Date();
	  var ctx = this.ctx;
	  var finished;
	  var errorWasHandled = false;

	  if (this.isPending()) return fn();

	  // Sometimes the ctx exists, but it is not runnable
	  if (ctx && ctx.runnable) {
	    ctx.runnable(this);
	  }

	  // called multiple times
	  function multiple(err) {
	    if (errorWasHandled) {
	      return;
	    }
	    errorWasHandled = true;
	    self.emit('error', createMultipleDoneError(self, err));
	  }

	  // finished
	  function done(err) {
	    var ms = self.timeout();
	    if (self.timedOut) {
	      return;
	    }

	    if (finished) {
	      return multiple(err);
	    }

	    self.clearTimeout();
	    self.duration = new Date() - start;
	    finished = true;
	    if (!err && self.duration > ms && ms > 0) {
	      err = self._timeoutError(ms);
	    }
	    fn(err);
	  }

	  // for .resetTimeout() and Runner#uncaught()
	  this.callback = done;

	  if (this.fn && typeof this.fn.call !== 'function') {
	    done(
	      new TypeError(
	        'A runnable must be passed a function as its second argument.'
	      )
	    );
	    return;
	  }

	  // explicit async with `done` argument
	  if (this.async) {
	    this.resetTimeout();

	    // allows skip() to be used in an explicit async context
	    this.skip = function asyncSkip() {
	      this.pending = true;
	      done();
	      // halt execution, the uncaught handler will ignore the failure.
	      throw new Pending('async skip; aborting execution');
	    };

	    try {
	      callFnAsync(this.fn);
	    } catch (err) {
	      // handles async runnables which actually run synchronously
	      errorWasHandled = true;
	      if (err instanceof Pending) {
	        return; // done() is already called in this.skip()
	      } else if (this.allowUncaught) {
	        throw err;
	      }
	      done(Runnable.toValueOrError(err));
	    }
	    return;
	  }

	  // sync or promise-returning
	  try {
	    callFn(this.fn);
	  } catch (err) {
	    errorWasHandled = true;
	    if (err instanceof Pending) {
	      return done();
	    } else if (this.allowUncaught) {
	      throw err;
	    }
	    done(Runnable.toValueOrError(err));
	  }

	  function callFn(fn) {
	    var result = fn.call(ctx);
	    if (result && typeof result.then === 'function') {
	      self.resetTimeout();
	      result.then(
	        function () {
	          done();
	          // Return null so libraries like bluebird do not warn about
	          // subsequently constructed Promises.
	          return null;
	        },
	        function (reason) {
	          done(reason || new Error('Promise rejected with no or falsy reason'));
	        }
	      );
	    } else {
	      if (self.asyncOnly) {
	        return done(
	          new Error(
	            '--async-only option in use without declaring `done()` or returning a promise'
	          )
	        );
	      }

	      done();
	    }
	  }

	  function callFnAsync(fn) {
	    var result = fn.call(ctx, function (err) {
	      if (err instanceof Error || toString.call(err) === '[object Error]') {
	        return done(err);
	      }
	      if (err) {
	        if (Object.prototype.toString.call(err) === '[object Object]') {
	          return done(
	            new Error('done() invoked with non-Error: ' + JSON.stringify(err))
	          );
	        }
	        return done(new Error('done() invoked with non-Error: ' + err));
	      }
	      if (result && utils.isPromise(result)) {
	        return done(
	          new Error(
	            'Resolution method is overspecified. Specify a callback *or* return a Promise; not both.'
	          )
	        );
	      }

	      done();
	    });
	  }
	};

	/**
	 * Instantiates a "timeout" error
	 *
	 * @param {number} ms - Timeout (in milliseconds)
	 * @returns {Error} a "timeout" error
	 * @private
	 */
	Runnable.prototype._timeoutError = function (ms) {
	  let msg = `Timeout of ${ms}ms exceeded. For async tests and hooks, ensure "done()" is called; if returning a Promise, ensure it resolves.`;
	  if (this.file) {
	    msg += ' (' + this.file + ')';
	  }
	  return createTimeoutError(msg, ms, this.file);
	};

	var constants = utils.defineConstants(
	  /**
	   * {@link Runnable}-related constants.
	   * @public
	   * @memberof Runnable
	   * @readonly
	   * @static
	   * @alias constants
	   * @enum {string}
	   */
	  {
	    /**
	     * Value of `state` prop when a `Runnable` has failed
	     */
	    STATE_FAILED: 'failed',
	    /**
	     * Value of `state` prop when a `Runnable` has passed
	     */
	    STATE_PASSED: 'passed',
	    /**
	     * Value of `state` prop when a `Runnable` has been skipped by user
	     */
	    STATE_PENDING: 'pending'
	  }
	);

	/**
	 * Given `value`, return identity if truthy, otherwise create an "invalid exception" error and return that.
	 * @param {*} [value] - Value to return, if present
	 * @returns {*|Error} `value`, otherwise an `Error`
	 * @private
	 */
	Runnable.toValueOrError = function (value) {
	  return (
	    value ||
	    createInvalidExceptionError(
	      'Runnable failed with falsy or undefined exception. Please throw an Error instead.',
	      value
	    )
	  );
	};

	Runnable.constants = constants;


	/***/ }),

	/***/ 255:
	/***/ ((module, __unused_webpack_exports, __webpack_require__) => {


	/**
	 * Module dependencies.
	 * @private
	 */
	var EventEmitter = (__webpack_require__(735).EventEmitter);
	var Pending = __webpack_require__(642);
	var utils = __webpack_require__(272);
	var debug = __webpack_require__(325)('mocha:runner');
	var Runnable = __webpack_require__(4);
	var Suite = __webpack_require__(461);
	var HOOK_TYPE_BEFORE_EACH = Suite.constants.HOOK_TYPE_BEFORE_EACH;
	var HOOK_TYPE_AFTER_EACH = Suite.constants.HOOK_TYPE_AFTER_EACH;
	var HOOK_TYPE_AFTER_ALL = Suite.constants.HOOK_TYPE_AFTER_ALL;
	var HOOK_TYPE_BEFORE_ALL = Suite.constants.HOOK_TYPE_BEFORE_ALL;
	var EVENT_ROOT_SUITE_RUN = Suite.constants.EVENT_ROOT_SUITE_RUN;
	var STATE_FAILED = Runnable.constants.STATE_FAILED;
	var STATE_PASSED = Runnable.constants.STATE_PASSED;
	var STATE_PENDING = Runnable.constants.STATE_PENDING;
	var stackFilter = utils.stackTraceFilter();
	var stringify = utils.stringify;

	const {
	  createInvalidExceptionError,
	  createUnsupportedError,
	  createFatalError,
	  isMochaError,
	  constants: errorConstants
	} = __webpack_require__(298);

	/**
	 * Non-enumerable globals.
	 * @private
	 * @readonly
	 */
	var globals = [
	  'setTimeout',
	  'clearTimeout',
	  'setInterval',
	  'clearInterval',
	  'XMLHttpRequest',
	  'Date',
	  'setImmediate',
	  'clearImmediate'
	];

	var constants = utils.defineConstants(
	  /**
	   * {@link Runner}-related constants.
	   * @public
	   * @memberof Runner
	   * @readonly
	   * @alias constants
	   * @static
	   * @enum {string}
	   */
	  {
	    /**
	     * Emitted when {@link Hook} execution begins
	     */
	    EVENT_HOOK_BEGIN: 'hook',
	    /**
	     * Emitted when {@link Hook} execution ends
	     */
	    EVENT_HOOK_END: 'hook end',
	    /**
	     * Emitted when Root {@link Suite} execution begins (all files have been parsed and hooks/tests are ready for execution)
	     */
	    EVENT_RUN_BEGIN: 'start',
	    /**
	     * Emitted when Root {@link Suite} execution has been delayed via `delay` option
	     */
	    EVENT_DELAY_BEGIN: 'waiting',
	    /**
	     * Emitted when delayed Root {@link Suite} execution is triggered by user via `global.run()`
	     */
	    EVENT_DELAY_END: 'ready',
	    /**
	     * Emitted when Root {@link Suite} execution ends
	     */
	    EVENT_RUN_END: 'end',
	    /**
	     * Emitted when {@link Suite} execution begins
	     */
	    EVENT_SUITE_BEGIN: 'suite',
	    /**
	     * Emitted when {@link Suite} execution ends
	     */
	    EVENT_SUITE_END: 'suite end',
	    /**
	     * Emitted when {@link Test} execution begins
	     */
	    EVENT_TEST_BEGIN: 'test',
	    /**
	     * Emitted when {@link Test} execution ends
	     */
	    EVENT_TEST_END: 'test end',
	    /**
	     * Emitted when {@link Test} execution fails
	     */
	    EVENT_TEST_FAIL: 'fail',
	    /**
	     * Emitted when {@link Test} execution succeeds
	     */
	    EVENT_TEST_PASS: 'pass',
	    /**
	     * Emitted when {@link Test} becomes pending
	     */
	    EVENT_TEST_PENDING: 'pending',
	    /**
	     * Emitted when {@link Test} execution has failed, but will retry
	     */
	    EVENT_TEST_RETRY: 'retry',
	    /**
	     * Initial state of Runner
	     */
	    STATE_IDLE: 'idle',
	    /**
	     * State set to this value when the Runner has started running
	     */
	    STATE_RUNNING: 'running',
	    /**
	     * State set to this value when the Runner has stopped
	     */
	    STATE_STOPPED: 'stopped'
	  }
	);

	class Runner extends EventEmitter {
	  /**
	   * Initialize a `Runner` at the Root {@link Suite}, which represents a hierarchy of {@link Suite|Suites} and {@link Test|Tests}.
	   *
	   * @extends external:EventEmitter
	   * @public
	   * @class
	   * @param {Suite} suite - Root suite
	   * @param {Object} [opts] - Settings object
	   * @param {boolean} [opts.cleanReferencesAfterRun] - Whether to clean references to test fns and hooks when a suite is done.
	   * @param {boolean} [opts.delay] - Whether to delay execution of root suite until ready.
	   * @param {boolean} [opts.dryRun] - Whether to report tests without running them.
	   * @param {boolean} [opts.failZero] - Whether to fail test run if zero tests encountered.
	   */
	  constructor(suite, opts = {}) {
	    super();

	    var self = this;
	    this._globals = [];
	    this._abort = false;
	    this.suite = suite;
	    this._opts = opts;
	    this.state = constants.STATE_IDLE;
	    this.total = suite.total();
	    this.failures = 0;
	    /**
	     * @type {Map<EventEmitter,Map<string,Set<EventListener>>>}
	     */
	    this._eventListeners = new Map();
	    this.on(constants.EVENT_TEST_END, function (test) {
	      if (test.type === 'test' && test.retriedTest() && test.parent) {
	        var idx =
	          test.parent.tests && test.parent.tests.indexOf(test.retriedTest());
	        if (idx > -1) test.parent.tests[idx] = test;
	      }
	      self.checkGlobals(test);
	    });
	    this.on(constants.EVENT_HOOK_END, function (hook) {
	      self.checkGlobals(hook);
	    });
	    this._defaultGrep = /.*/;
	    this.grep(this._defaultGrep);
	    this.globals(this.globalProps());

	    this.uncaught = this._uncaught.bind(this);
	    this.unhandled = (reason, promise) => {
	      if (isMochaError(reason)) {
	        debug(
	          'trapped unhandled rejection coming out of Mocha; forwarding to uncaught handler:',
	          reason
	        );
	        this.uncaught(reason);
	      } else {
	        debug(
	          'trapped unhandled rejection from (probably) user code; re-emitting on process'
	        );
	        this._removeEventListener(
	          process,
	          'unhandledRejection',
	          this.unhandled
	        );
	        try {
	          process.emit('unhandledRejection', reason, promise);
	        } finally {
	          this._addEventListener(process, 'unhandledRejection', this.unhandled);
	        }
	      }
	    };
	  }
	}

	/**
	 * Wrapper for setImmediate, process.nextTick, or browser polyfill.
	 *
	 * @param {Function} fn
	 * @private
	 */
	Runner.immediately = __webpack_require__.g.setImmediate || process.nextTick;

	/**
	 * Replacement for `target.on(eventName, listener)` that does bookkeeping to remove them when this runner instance is disposed.
	 * @param {EventEmitter} target - The `EventEmitter`
	 * @param {string} eventName - The event name
	 * @param {string} fn - Listener function
	 * @private
	 */
	Runner.prototype._addEventListener = function (target, eventName, listener) {
	  debug(
	    '_addEventListener(): adding for event %s; %d current listeners',
	    eventName,
	    target.listenerCount(eventName)
	  );
	  /* istanbul ignore next */
	  if (
	    this._eventListeners.has(target) &&
	    this._eventListeners.get(target).has(eventName) &&
	    this._eventListeners.get(target).get(eventName).has(listener)
	  ) {
	    debug(
	      'warning: tried to attach duplicate event listener for %s',
	      eventName
	    );
	    return;
	  }
	  target.on(eventName, listener);
	  const targetListeners = this._eventListeners.has(target)
	    ? this._eventListeners.get(target)
	    : new Map();
	  const targetEventListeners = targetListeners.has(eventName)
	    ? targetListeners.get(eventName)
	    : new Set();
	  targetEventListeners.add(listener);
	  targetListeners.set(eventName, targetEventListeners);
	  this._eventListeners.set(target, targetListeners);
	};

	/**
	 * Replacement for `target.removeListener(eventName, listener)` that also updates the bookkeeping.
	 * @param {EventEmitter} target - The `EventEmitter`
	 * @param {string} eventName - The event name
	 * @param {function} listener - Listener function
	 * @private
	 */
	Runner.prototype._removeEventListener = function (target, eventName, listener) {
	  target.removeListener(eventName, listener);

	  if (this._eventListeners.has(target)) {
	    const targetListeners = this._eventListeners.get(target);
	    if (targetListeners.has(eventName)) {
	      const targetEventListeners = targetListeners.get(eventName);
	      targetEventListeners.delete(listener);
	      if (!targetEventListeners.size) {
	        targetListeners.delete(eventName);
	      }
	    }
	    if (!targetListeners.size) {
	      this._eventListeners.delete(target);
	    }
	  } else {
	    debug('trying to remove listener for untracked object %s', target);
	  }
	};

	/**
	 * Removes all event handlers set during a run on this instance.
	 * Remark: this does _not_ clean/dispose the tests or suites themselves.
	 */
	Runner.prototype.dispose = function () {
	  this.removeAllListeners();
	  this._eventListeners.forEach((targetListeners, target) => {
	    targetListeners.forEach((targetEventListeners, eventName) => {
	      targetEventListeners.forEach(listener => {
	        target.removeListener(eventName, listener);
	      });
	    });
	  });
	  this._eventListeners.clear();
	};

	/**
	 * Run tests with full titles matching `re`. Updates runner.total
	 * with number of tests matched.
	 *
	 * @public
	 * @memberof Runner
	 * @param {RegExp} re
	 * @param {boolean} invert
	 * @return {Runner} Runner instance.
	 */
	Runner.prototype.grep = function (re, invert) {
	  debug('grep(): setting to %s', re);
	  this._grep = re;
	  this._invert = invert;
	  this.total = this.grepTotal(this.suite);
	  return this;
	};

	/**
	 * Returns the number of tests matching the grep search for the
	 * given suite.
	 *
	 * @memberof Runner
	 * @public
	 * @param {Suite} suite
	 * @return {number}
	 */
	Runner.prototype.grepTotal = function (suite) {
	  var self = this;
	  var total = 0;

	  suite.eachTest(function (test) {
	    var match = self._grep.test(test.fullTitle());
	    if (self._invert) {
	      match = !match;
	    }
	    if (match) {
	      total++;
	    }
	  });

	  return total;
	};

	/**
	 * Return a list of global properties.
	 *
	 * @return {Array}
	 * @private
	 */
	Runner.prototype.globalProps = function () {
	  var props = Object.keys(__webpack_require__.g);

	  // non-enumerables
	  for (var i = 0; i < globals.length; ++i) {
	    if (~props.indexOf(globals[i])) {
	      continue;
	    }
	    props.push(globals[i]);
	  }

	  return props;
	};

	/**
	 * Allow the given `arr` of globals.
	 *
	 * @public
	 * @memberof Runner
	 * @param {Array} arr
	 * @return {Runner} Runner instance.
	 */
	Runner.prototype.globals = function (arr) {
	  if (!arguments.length) {
	    return this._globals;
	  }
	  debug('globals(): setting to %O', arr);
	  this._globals = this._globals.concat(arr);
	  return this;
	};

	/**
	 * Check for global variable leaks.
	 *
	 * @private
	 */
	Runner.prototype.checkGlobals = function (test) {
	  if (!this.checkLeaks) {
	    return;
	  }
	  var ok = this._globals;

	  var globals = this.globalProps();
	  var leaks;

	  if (test) {
	    ok = ok.concat(test._allowedGlobals || []);
	  }

	  if (this.prevGlobalsLength === globals.length) {
	    return;
	  }
	  this.prevGlobalsLength = globals.length;

	  leaks = filterLeaks(ok, globals);
	  this._globals = this._globals.concat(leaks);

	  if (leaks.length) {
	    var msg = `global leak(s) detected: ${leaks.map(e => `'${e}'`).join(', ')}`;
	    this.fail(test, new Error(msg));
	  }
	};

	/**
	 * Fail the given `test`.
	 *
	 * If `test` is a hook, failures work in the following pattern:
	 * - If bail, run corresponding `after each` and `after` hooks,
	 *   then exit
	 * - Failed `before` hook skips all tests in a suite and subsuites,
	 *   but jumps to corresponding `after` hook
	 * - Failed `before each` hook skips remaining tests in a
	 *   suite and jumps to corresponding `after each` hook,
	 *   which is run only once
	 * - Failed `after` hook does not alter execution order
	 * - Failed `after each` hook skips remaining tests in a
	 *   suite and subsuites, but executes other `after each`
	 *   hooks
	 *
	 * @private
	 * @param {Runnable} test
	 * @param {Error} err
	 * @param {boolean} [force=false] - Whether to fail a pending test.
	 */
	Runner.prototype.fail = function (test, err, force) {
	  force = force === true;
	  if (test.isPending() && !force) {
	    return;
	  }
	  if (this.state === constants.STATE_STOPPED) {
	    if (err.code === errorConstants.MULTIPLE_DONE) {
	      throw err;
	    }
	    throw createFatalError(
	      'Test failed after root suite execution completed!',
	      err
	    );
	  }

	  ++this.failures;
	  debug('total number of failures: %d', this.failures);
	  test.state = STATE_FAILED;

	  if (!isError(err)) {
	    err = thrown2Error(err);
	  }

	  // Filter the stack traces
	  if (!this.fullStackTrace) {
	    const alreadyFiltered = new Set();
	    let currentErr = err;

	    while (currentErr && currentErr.stack && !alreadyFiltered.has(currentErr)) {
	      alreadyFiltered.add(currentErr);

	      try {
	        currentErr.stack = stackFilter(currentErr.stack);
	      } catch (ignore) {
	        // some environments do not take kindly to monkeying with the stack
	      }

	      currentErr = currentErr.cause;
	    }
	  }

	  this.emit(constants.EVENT_TEST_FAIL, test, err);
	};

	/**
	 * Run hook `name` callbacks and then invoke `fn()`.
	 *
	 * @private
	 * @param {string} name
	 * @param {Function} fn
	 */

	Runner.prototype.hook = function (name, fn) {
	  if (this._opts.dryRun) return fn();

	  var suite = this.suite;
	  var hooks = suite.getHooks(name);
	  var self = this;

	  function next(i) {
	    var hook = hooks[i];
	    if (!hook) {
	      return fn();
	    }
	    self.currentRunnable = hook;

	    if (name === HOOK_TYPE_BEFORE_ALL) {
	      hook.ctx.currentTest = hook.parent.tests[0];
	    } else if (name === HOOK_TYPE_AFTER_ALL) {
	      hook.ctx.currentTest = hook.parent.tests[hook.parent.tests.length - 1];
	    } else {
	      hook.ctx.currentTest = self.test;
	    }

	    setHookTitle(hook);

	    hook.allowUncaught = self.allowUncaught;

	    self.emit(constants.EVENT_HOOK_BEGIN, hook);

	    if (!hook.listeners('error').length) {
	      self._addEventListener(hook, 'error', function (err) {
	        self.fail(hook, err);
	      });
	    }

	    hook.run(function cbHookRun(err) {
	      var testError = hook.error();
	      if (testError) {
	        self.fail(self.test, testError);
	      }
	      // conditional skip
	      if (hook.pending) {
	        if (name === HOOK_TYPE_AFTER_EACH) {
	          // TODO define and implement use case
	          if (self.test) {
	            self.test.pending = true;
	          }
	        } else if (name === HOOK_TYPE_BEFORE_EACH) {
	          if (self.test) {
	            self.test.pending = true;
	          }
	          self.emit(constants.EVENT_HOOK_END, hook);
	          hook.pending = false; // activates hook for next test
	          return fn(new Error('abort hookDown'));
	        } else if (name === HOOK_TYPE_BEFORE_ALL) {
	          suite.tests.forEach(function (test) {
	            test.pending = true;
	          });
	          suite.suites.forEach(function (suite) {
	            suite.pending = true;
	          });
	          hooks = [];
	        } else {
	          hook.pending = false;
	          var errForbid = createUnsupportedError('`this.skip` forbidden');
	          self.fail(hook, errForbid);
	          return fn(errForbid);
	        }
	      } else if (err) {
	        self.fail(hook, err);
	        // stop executing hooks, notify callee of hook err
	        return fn(err);
	      }
	      self.emit(constants.EVENT_HOOK_END, hook);
	      delete hook.ctx.currentTest;
	      setHookTitle(hook);
	      next(++i);
	    });

	    function setHookTitle(hook) {
	      hook.originalTitle = hook.originalTitle || hook.title;
	      if (hook.ctx && hook.ctx.currentTest) {
	        hook.title = `${hook.originalTitle} for "${hook.ctx.currentTest.title}"`;
	      } else {
	        var parentTitle;
	        if (hook.parent.title) {
	          parentTitle = hook.parent.title;
	        } else {
	          parentTitle = hook.parent.root ? '{root}' : '';
	        }
	        hook.title = `${hook.originalTitle} in "${parentTitle}"`;
	      }
	    }
	  }

	  Runner.immediately(function () {
	    next(0);
	  });
	};

	/**
	 * Run hook `name` for the given array of `suites`
	 * in order, and callback `fn(err, errSuite)`.
	 *
	 * @private
	 * @param {string} name
	 * @param {Array} suites
	 * @param {Function} fn
	 */
	Runner.prototype.hooks = function (name, suites, fn) {
	  var self = this;
	  var orig = this.suite;

	  function next(suite) {
	    self.suite = suite;

	    if (!suite) {
	      self.suite = orig;
	      return fn();
	    }

	    self.hook(name, function (err) {
	      if (err) {
	        var errSuite = self.suite;
	        self.suite = orig;
	        return fn(err, errSuite);
	      }

	      next(suites.pop());
	    });
	  }

	  next(suites.pop());
	};

	/**
	 * Run 'afterEach' hooks from bottom up.
	 *
	 * @param {String} name
	 * @param {Function} fn
	 * @private
	 */
	Runner.prototype.hookUp = function (name, fn) {
	  var suites = [this.suite].concat(this.parents()).reverse();
	  this.hooks(name, suites, fn);
	};

	/**
	 * Run 'beforeEach' hooks from top level down.
	 *
	 * @param {String} name
	 * @param {Function} fn
	 * @private
	 */
	Runner.prototype.hookDown = function (name, fn) {
	  var suites = [this.suite].concat(this.parents());
	  this.hooks(name, suites, fn);
	};

	/**
	 * Return an array of parent Suites from
	 * closest to furthest.
	 *
	 * @return {Array}
	 * @private
	 */
	Runner.prototype.parents = function () {
	  var suite = this.suite;
	  var suites = [];
	  while (suite.parent) {
	    suite = suite.parent;
	    suites.push(suite);
	  }
	  return suites;
	};

	/**
	 * Run the current test and callback `fn(err)`.
	 *
	 * @param {Function} fn
	 * @private
	 */
	Runner.prototype.runTest = function (fn) {
	  if (this._opts.dryRun) return Runner.immediately(fn);

	  var self = this;
	  var test = this.test;

	  if (!test) {
	    return;
	  }

	  if (this.asyncOnly) {
	    test.asyncOnly = true;
	  }
	  this._addEventListener(test, 'error', function (err) {
	    self.fail(test, err);
	  });
	  if (this.allowUncaught) {
	    test.allowUncaught = true;
	    return test.run(fn);
	  }
	  try {
	    test.run(fn);
	  } catch (err) {
	    fn(err);
	  }
	};

	/**
	 * Run tests in the given `suite` and invoke the callback `fn()` when complete.
	 *
	 * @private
	 * @param {Suite} suite
	 * @param {Function} fn
	 */
	Runner.prototype.runTests = function (suite, fn) {
	  var self = this;
	  var tests = suite.tests.slice();
	  var test;

	  function hookErr(_, errSuite, after) {
	    // before/after Each hook for errSuite failed:
	    var orig = self.suite;

	    // for failed 'after each' hook start from errSuite parent,
	    // otherwise start from errSuite itself
	    self.suite = after ? errSuite.parent : errSuite;

	    if (self.suite) {
	      self.hookUp(HOOK_TYPE_AFTER_EACH, function (err2, errSuite2) {
	        self.suite = orig;
	        // some hooks may fail even now
	        if (err2) {
	          return hookErr(err2, errSuite2, true);
	        }
	        // report error suite
	        fn(errSuite);
	      });
	    } else {
	      // there is no need calling other 'after each' hooks
	      self.suite = orig;
	      fn(errSuite);
	    }
	  }

	  function next(err, errSuite) {
	    // if we bail after first err
	    if (self.failures && suite._bail) {
	      tests = [];
	    }

	    if (self._abort) {
	      return fn();
	    }

	    if (err) {
	      return hookErr(err, errSuite, true);
	    }

	    // next test
	    test = tests.shift();

	    // all done
	    if (!test) {
	      return fn();
	    }

	    // grep
	    var match = self._grep.test(test.fullTitle());
	    if (self._invert) {
	      match = !match;
	    }
	    if (!match) {
	      // Run immediately only if we have defined a grep. When we
	      // define a grep — It can cause maximum callstack error if
	      // the grep is doing a large recursive loop by neglecting
	      // all tests. The run immediately function also comes with
	      // a performance cost. So we don't want to run immediately
	      // if we run the whole test suite, because running the whole
	      // test suite don't do any immediate recursive loops. Thus,
	      // allowing a JS runtime to breathe.
	      if (self._grep !== self._defaultGrep) {
	        Runner.immediately(next);
	      } else {
	        next();
	      }
	      return;
	    }

	    // static skip, no hooks are executed
	    if (test.isPending()) {
	      if (self.forbidPending) {
	        self.fail(test, new Error('Pending test forbidden'), true);
	      } else {
	        test.state = STATE_PENDING;
	        self.emit(constants.EVENT_TEST_PENDING, test);
	      }
	      self.emit(constants.EVENT_TEST_END, test);
	      return next();
	    }

	    // execute test and hook(s)
	    self.emit(constants.EVENT_TEST_BEGIN, (self.test = test));
	    self.hookDown(HOOK_TYPE_BEFORE_EACH, function (err, errSuite) {
	      // conditional skip within beforeEach
	      if (test.isPending()) {
	        if (self.forbidPending) {
	          self.fail(test, new Error('Pending test forbidden'), true);
	        } else {
	          test.state = STATE_PENDING;
	          self.emit(constants.EVENT_TEST_PENDING, test);
	        }
	        self.emit(constants.EVENT_TEST_END, test);
	        // skip inner afterEach hooks below errSuite level
	        var origSuite = self.suite;
	        self.suite = errSuite || self.suite;
	        return self.hookUp(HOOK_TYPE_AFTER_EACH, function (e, eSuite) {
	          self.suite = origSuite;
	          next(e, eSuite);
	        });
	      }
	      if (err) {
	        return hookErr(err, errSuite, false);
	      }
	      self.currentRunnable = self.test;
	      self.runTest(function (err) {
	        test = self.test;
	        // conditional skip within it
	        if (test.pending) {
	          if (self.forbidPending) {
	            self.fail(test, new Error('Pending test forbidden'), true);
	          } else {
	            test.state = STATE_PENDING;
	            self.emit(constants.EVENT_TEST_PENDING, test);
	          }
	          self.emit(constants.EVENT_TEST_END, test);
	          return self.hookUp(HOOK_TYPE_AFTER_EACH, next);
	        } else if (err) {
	          var retry = test.currentRetry();
	          if (retry < test.retries()) {
	            var clonedTest = test.clone();
	            clonedTest.currentRetry(retry + 1);
	            tests.unshift(clonedTest);

	            self.emit(constants.EVENT_TEST_RETRY, test, err);

	            // Early return + hook trigger so that it doesn't
	            // increment the count wrong
	            return self.hookUp(HOOK_TYPE_AFTER_EACH, next);
	          } else {
	            self.fail(test, err);
	          }
	          self.emit(constants.EVENT_TEST_END, test);
	          return self.hookUp(HOOK_TYPE_AFTER_EACH, next);
	        }

	        test.state = STATE_PASSED;
	        self.emit(constants.EVENT_TEST_PASS, test);
	        self.emit(constants.EVENT_TEST_END, test);
	        self.hookUp(HOOK_TYPE_AFTER_EACH, next);
	      });
	    });
	  }

	  this.next = next;
	  this.hookErr = hookErr;
	  next();
	};

	/**
	 * Run the given `suite` and invoke the callback `fn()` when complete.
	 *
	 * @private
	 * @param {Suite} suite
	 * @param {Function} fn
	 */
	Runner.prototype.runSuite = function (suite, fn) {
	  var i = 0;
	  var self = this;
	  var total = this.grepTotal(suite);

	  debug('runSuite(): running %s', suite.fullTitle());

	  if (!total || (self.failures && suite._bail)) {
	    debug('runSuite(): bailing');
	    return fn();
	  }

	  this.emit(constants.EVENT_SUITE_BEGIN, (this.suite = suite));

	  function next(errSuite) {
	    if (errSuite) {
	      // current suite failed on a hook from errSuite
	      if (errSuite === suite) {
	        // if errSuite is current suite
	        // continue to the next sibling suite
	        return done();
	      }
	      // errSuite is among the parents of current suite
	      // stop execution of errSuite and all sub-suites
	      return done(errSuite);
	    }

	    if (self._abort) {
	      return done();
	    }

	    var curr = suite.suites[i++];
	    if (!curr) {
	      return done();
	    }

	    // Avoid grep neglecting large number of tests causing a
	    // huge recursive loop and thus a maximum call stack error.
	    // See comment in `this.runTests()` for more information.
	    if (self._grep !== self._defaultGrep) {
	      Runner.immediately(function () {
	        self.runSuite(curr, next);
	      });
	    } else {
	      self.runSuite(curr, next);
	    }
	  }

	  function done(errSuite) {
	    self.suite = suite;
	    self.nextSuite = next;

	    // remove reference to test
	    delete self.test;

	    self.hook(HOOK_TYPE_AFTER_ALL, function () {
	      self.emit(constants.EVENT_SUITE_END, suite);
	      fn(errSuite);
	    });
	  }

	  this.nextSuite = next;

	  this.hook(HOOK_TYPE_BEFORE_ALL, function (err) {
	    if (err) {
	      return done();
	    }
	    self.runTests(suite, next);
	  });
	};

	/**
	 * Handle uncaught exceptions within runner.
	 *
	 * This function is bound to the instance as `Runner#uncaught` at instantiation
	 * time. It's intended to be listening on the `Process.uncaughtException` event.
	 * In order to not leak EE listeners, we need to ensure no more than a single
	 * `uncaughtException` listener exists per `Runner`.  The only way to do
	 * this--because this function needs the context (and we don't have lambdas)--is
	 * to use `Function.prototype.bind`. We need strict equality to unregister and
	 * _only_ unregister the _one_ listener we set from the
	 * `Process.uncaughtException` event; would be poor form to just remove
	 * everything. See {@link Runner#run} for where the event listener is registered
	 * and unregistered.
	 * @param {Error} err - Some uncaught error
	 * @private
	 */
	Runner.prototype._uncaught = function (err) {
	  // this is defensive to prevent future developers from mis-calling this function.
	  // it's more likely that it'd be called with the incorrect context--say, the global
	  // `process` object--than it would to be called with a context that is not a "subclass"
	  // of `Runner`.
	  if (!(this instanceof Runner)) {
	    throw createFatalError(
	      'Runner#uncaught() called with invalid context',
	      this
	    );
	  }
	  if (err instanceof Pending) {
	    debug('uncaught(): caught a Pending');
	    return;
	  }
	  // browser does not exit script when throwing in global.onerror()
	  if (this.allowUncaught && !utils.isBrowser()) {
	    debug('uncaught(): bubbling exception due to --allow-uncaught');
	    throw err;
	  }

	  if (this.state === constants.STATE_STOPPED) {
	    debug('uncaught(): throwing after run has completed!');
	    throw err;
	  }

	  if (err) {
	    debug('uncaught(): got truthy exception %O', err);
	  } else {
	    debug('uncaught(): undefined/falsy exception');
	    err = createInvalidExceptionError(
	      'Caught falsy/undefined exception which would otherwise be uncaught. No stack trace found; try a debugger',
	      err
	    );
	  }

	  if (!isError(err)) {
	    err = thrown2Error(err);
	    debug('uncaught(): converted "error" %o to Error', err);
	  }
	  err.uncaught = true;

	  var runnable = this.currentRunnable;

	  if (!runnable) {
	    runnable = new Runnable('Uncaught error outside test suite');
	    debug('uncaught(): no current Runnable; created a phony one');
	    runnable.parent = this.suite;

	    if (this.state === constants.STATE_RUNNING) {
	      debug('uncaught(): failing gracefully');
	      this.fail(runnable, err);
	    } else {
	      // Can't recover from this failure
	      debug('uncaught(): test run has not yet started; unrecoverable');
	      this.emit(constants.EVENT_RUN_BEGIN);
	      this.fail(runnable, err);
	      this.emit(constants.EVENT_RUN_END);
	    }

	    return;
	  }

	  runnable.clearTimeout();

	  if (runnable.isFailed()) {
	    debug('uncaught(): Runnable has already failed');
	    // Ignore error if already failed
	    return;
	  } else if (runnable.isPending()) {
	    debug('uncaught(): pending Runnable wound up failing!');
	    // report 'pending test' retrospectively as failed
	    this.fail(runnable, err, true);
	    return;
	  }

	  // we cannot recover gracefully if a Runnable has already passed
	  // then fails asynchronously
	  if (runnable.isPassed()) {
	    debug('uncaught(): Runnable has already passed; bailing gracefully');
	    this.fail(runnable, err);
	    this.abort();
	  } else {
	    debug('uncaught(): forcing Runnable to complete with Error');
	    return runnable.callback(err);
	  }
	};

	/**
	 * Run the root suite and invoke `fn(failures)`
	 * on completion.
	 *
	 * @public
	 * @memberof Runner
	 * @param {Function} fn - Callback when finished
	 * @param {Object} [opts] - For subclasses
	 * @param {string[]} opts.files - Files to run
	 * @param {Options} opts.options - command-line options
	 * @returns {Runner} Runner instance.
	 */
	Runner.prototype.run = function (fn, opts = {}) {
	  var rootSuite = this.suite;
	  var options = opts.options || {};

	  debug('run(): got options: %O', options);
	  fn = fn || function () {};

	  const end = () => {
	    if (!this.total && this._opts.failZero) this.failures = 1;

	    debug('run(): root suite completed; emitting %s', constants.EVENT_RUN_END);
	    this.emit(constants.EVENT_RUN_END);
	  };

	  const begin = () => {
	    debug('run(): emitting %s', constants.EVENT_RUN_BEGIN);
	    this.emit(constants.EVENT_RUN_BEGIN);
	    debug('run(): emitted %s', constants.EVENT_RUN_BEGIN);

	    this.runSuite(rootSuite, end);
	  };

	  const prepare = () => {
	    debug('run(): starting');
	    // If there is an `only` filter
	    if (rootSuite.hasOnly()) {
	      rootSuite.filterOnly();
	      debug('run(): filtered exclusive Runnables');
	    }
	    this.state = constants.STATE_RUNNING;
	    if (this._opts.delay) {
	      this.emit(constants.EVENT_DELAY_END);
	      debug('run(): "delay" ended');
	    }

	    return begin();
	  };

	  // references cleanup to avoid memory leaks
	  if (this._opts.cleanReferencesAfterRun) {
	    this.on(constants.EVENT_SUITE_END, suite => {
	      suite.cleanReferences();
	    });
	  }

	  // callback
	  this.on(constants.EVENT_RUN_END, function () {
	    this.state = constants.STATE_STOPPED;
	    debug('run(): emitted %s', constants.EVENT_RUN_END);
	    fn(this.failures);
	  });

	  this._removeEventListener(process, 'uncaughtException', this.uncaught);
	  this._removeEventListener(process, 'unhandledRejection', this.unhandled);
	  this._addEventListener(process, 'uncaughtException', this.uncaught);
	  this._addEventListener(process, 'unhandledRejection', this.unhandled);

	  if (this._opts.delay) {
	    // for reporters, I guess.
	    // might be nice to debounce some dots while we wait.
	    this.emit(constants.EVENT_DELAY_BEGIN, rootSuite);
	    rootSuite.once(EVENT_ROOT_SUITE_RUN, prepare);
	    debug('run(): waiting for green light due to --delay');
	  } else {
	    Runner.immediately(prepare);
	  }

	  return this;
	};

	/**
	 * Toggle partial object linking behavior; used for building object references from
	 * unique ID's. Does nothing in serial mode, because the object references already exist.
	 * Subclasses can implement this (e.g., `ParallelBufferedRunner`)
	 * @abstract
	 * @param {boolean} [value] - If `true`, enable partial object linking, otherwise disable
	 * @returns {Runner}
	 * @chainable
	 * @public
	 * @example
	 * // this reporter needs proper object references when run in parallel mode
	 * class MyReporter() {
	 *   constructor(runner) {
	 *     this.runner.linkPartialObjects(true)
	 *       .on(EVENT_SUITE_BEGIN, suite => {
	           // this Suite may be the same object...
	 *       })
	 *       .on(EVENT_TEST_BEGIN, test => {
	 *         // ...as the `test.parent` property
	 *       });
	 *   }
	 * }
	 */
	Runner.prototype.linkPartialObjects = function (value) {
	  return this;
	};

	/*
	 * Like {@link Runner#run}, but does not accept a callback and returns a `Promise` instead of a `Runner`.
	 * This function cannot reject; an `unhandledRejection` event will bubble up to the `process` object instead.
	 * @public
	 * @memberof Runner
	 * @param {Object} [opts] - Options for {@link Runner#run}
	 * @returns {Promise<number>} Failure count
	 */
	Runner.prototype.runAsync = async function runAsync(opts = {}) {
	  return new Promise(resolve => {
	    this.run(resolve, opts);
	  });
	};

	/**
	 * Cleanly abort execution.
	 *
	 * @memberof Runner
	 * @public
	 * @return {Runner} Runner instance.
	 */
	Runner.prototype.abort = function () {
	  debug('abort(): aborting');
	  this._abort = true;

	  return this;
	};

	/**
	 * Returns `true` if Mocha is running in parallel mode.  For reporters.
	 *
	 * Subclasses should return an appropriate value.
	 * @public
	 * @returns {false}
	 */
	Runner.prototype.isParallelMode = function isParallelMode() {
	  return false;
	};

	/**
	 * Configures an alternate reporter for worker processes to use. Subclasses
	 * using worker processes should implement this.
	 * @public
	 * @param {string} path - Absolute path to alternate reporter for worker processes to use
	 * @returns {Runner}
	 * @throws When in serial mode
	 * @chainable
	 * @abstract
	 */
	Runner.prototype.workerReporter = function () {
	  throw createUnsupportedError('workerReporter() not supported in serial mode');
	};

	/**
	 * Filter leaks with the given globals flagged as `ok`.
	 *
	 * @private
	 * @param {Array} ok
	 * @param {Array} globals
	 * @return {Array}
	 */
	function filterLeaks(ok, globals) {
	  return globals.filter(function (key) {
	    // Firefox and Chrome exposes iframes as index inside the window object
	    if (/^\d+/.test(key)) {
	      return false;
	    }

	    // in firefox
	    // if runner runs in an iframe, this iframe's window.getInterface method
	    // not init at first it is assigned in some seconds
	    if (__webpack_require__.g.navigator && /^getInterface/.test(key)) {
	      return false;
	    }

	    // an iframe could be approached by window[iframeIndex]
	    // in ie6,7,8 and opera, iframeIndex is enumerable, this could cause leak
	    if (__webpack_require__.g.navigator && /^\d+/.test(key)) {
	      return false;
	    }

	    // Opera and IE expose global variables for HTML element IDs (issue #243)
	    if (/^mocha-/.test(key)) {
	      return false;
	    }

	    var matched = ok.filter(function (ok) {
	      if (~ok.indexOf('*')) {
	        return key.indexOf(ok.split('*')[0]) === 0;
	      }
	      return key === ok;
	    });
	    return !matched.length && (!__webpack_require__.g.navigator || key !== 'onerror');
	  });
	}

	/**
	 * Check if argument is an instance of Error object or a duck-typed equivalent.
	 *
	 * @private
	 * @param {Object} err - object to check
	 * @param {string} err.message - error message
	 * @returns {boolean}
	 */
	function isError(err) {
	  return err instanceof Error || (err && typeof err.message === 'string');
	}

	/**
	 *
	 * Converts thrown non-extensible type into proper Error.
	 *
	 * @private
	 * @param {*} thrown - Non-extensible type thrown by code
	 * @return {Error}
	 */
	function thrown2Error(err) {
	  return new Error(
	    `the ${utils.canonicalType(err)} ${stringify(
	      err
	    )} was thrown, throw an Error :)`
	  );
	}

	Runner.constants = constants;

	/**
	 * Node.js' `EventEmitter`
	 * @external EventEmitter
	 * @see {@link https://nodejs.org/api/events.html#events_class_eventemitter}
	 */

	module.exports = Runner;


	/***/ }),

	/***/ 580:
	/***/ ((module, __unused_webpack_exports, __webpack_require__) => {


	/**
	 * Provides a factory function for a {@link StatsCollector} object.
	 * @module
	 */

	var constants = (__webpack_require__(255).constants);
	var EVENT_TEST_PASS = constants.EVENT_TEST_PASS;
	var EVENT_TEST_FAIL = constants.EVENT_TEST_FAIL;
	var EVENT_SUITE_BEGIN = constants.EVENT_SUITE_BEGIN;
	var EVENT_RUN_BEGIN = constants.EVENT_RUN_BEGIN;
	var EVENT_TEST_PENDING = constants.EVENT_TEST_PENDING;
	var EVENT_RUN_END = constants.EVENT_RUN_END;
	var EVENT_TEST_END = constants.EVENT_TEST_END;

	/**
	 * Test statistics collector.
	 *
	 * @public
	 * @typedef {Object} StatsCollector
	 * @property {number} suites - integer count of suites run.
	 * @property {number} tests - integer count of tests run.
	 * @property {number} passes - integer count of passing tests.
	 * @property {number} pending - integer count of pending tests.
	 * @property {number} failures - integer count of failed tests.
	 * @property {Date} start - time when testing began.
	 * @property {Date} end - time when testing concluded.
	 * @property {number} duration - number of msecs that testing took.
	 */

	var Date = __webpack_require__.g.Date;

	/**
	 * Provides stats such as test duration, number of tests passed / failed etc., by listening for events emitted by `runner`.
	 *
	 * @private
	 * @param {Runner} runner - Runner instance
	 * @throws {TypeError} If falsy `runner`
	 */
	function createStatsCollector(runner) {
	  /**
	   * @type StatsCollector
	   */
	  var stats = {
	    suites: 0,
	    tests: 0,
	    passes: 0,
	    pending: 0,
	    failures: 0
	  };

	  if (!runner) {
	    throw new TypeError('Missing runner argument');
	  }

	  runner.stats = stats;

	  runner.once(EVENT_RUN_BEGIN, function () {
	    stats.start = new Date();
	  });
	  runner.on(EVENT_SUITE_BEGIN, function (suite) {
	    suite.root || stats.suites++;
	  });
	  runner.on(EVENT_TEST_PASS, function () {
	    stats.passes++;
	  });
	  runner.on(EVENT_TEST_FAIL, function () {
	    stats.failures++;
	  });
	  runner.on(EVENT_TEST_PENDING, function () {
	    stats.pending++;
	  });
	  runner.on(EVENT_TEST_END, function () {
	    stats.tests++;
	  });
	  runner.once(EVENT_RUN_END, function () {
	    stats.end = new Date();
	    stats.duration = stats.end - stats.start;
	  });
	}

	module.exports = createStatsCollector;


	/***/ }),

	/***/ 461:
	/***/ ((module, exports, __webpack_require__) => {


	/**
	 * Module dependencies.
	 * @private
	 */
	const {EventEmitter} = __webpack_require__(735);
	const Hook = __webpack_require__(338);
	var {
	  assignNewMochaID,
	  clamp,
	  constants: utilsConstants,
	  defineConstants,
	  getMochaID,
	  inherits,
	  isString
	} = __webpack_require__(272);
	const debug = __webpack_require__(325)('mocha:suite');
	const milliseconds = __webpack_require__(192);
	const errors = __webpack_require__(298);

	const {MOCHA_ID_PROP_NAME} = utilsConstants;

	/**
	 * Expose `Suite`.
	 */

	module.exports = Suite;

	/**
	 * Create a new `Suite` with the given `title` and parent `Suite`.
	 *
	 * @public
	 * @param {Suite} parent - Parent suite (required!)
	 * @param {string} title - Title
	 * @return {Suite}
	 */
	Suite.create = function (parent, title) {
	  var suite = new Suite(title, parent.ctx);
	  suite.parent = parent;
	  title = suite.fullTitle();
	  parent.addSuite(suite);
	  return suite;
	};

	/**
	 * Constructs a new `Suite` instance with the given `title`, `ctx`, and `isRoot`.
	 *
	 * @public
	 * @class
	 * @extends EventEmitter
	 * @see {@link https://nodejs.org/api/events.html#events_class_eventemitter|EventEmitter}
	 * @param {string} title - Suite title.
	 * @param {Context} parentContext - Parent context instance.
	 * @param {boolean} [isRoot=false] - Whether this is the root suite.
	 */
	function Suite(title, parentContext, isRoot) {
	  if (!isString(title)) {
	    throw errors.createInvalidArgumentTypeError(
	      'Suite argument "title" must be a string. Received type "' +
	        typeof title +
	        '"',
	      'title',
	      'string'
	    );
	  }
	  this.title = title;
	  function Context() {}
	  Context.prototype = parentContext;
	  this.ctx = new Context();
	  this.suites = [];
	  this.tests = [];
	  this.root = isRoot === true;
	  this.pending = false;
	  this._retries = -1;
	  this._beforeEach = [];
	  this._beforeAll = [];
	  this._afterEach = [];
	  this._afterAll = [];
	  this._timeout = 2000;
	  this._slow = 75;
	  this._bail = false;
	  this._onlyTests = [];
	  this._onlySuites = [];
	  assignNewMochaID(this);

	  Object.defineProperty(this, 'id', {
	    get() {
	      return getMochaID(this);
	    }
	  });

	  this.reset();
	}

	/**
	 * Inherit from `EventEmitter.prototype`.
	 */
	inherits(Suite, EventEmitter);

	/**
	 * Resets the state initially or for a next run.
	 */
	Suite.prototype.reset = function () {
	  this.delayed = false;
	  function doReset(thingToReset) {
	    thingToReset.reset();
	  }
	  this.suites.forEach(doReset);
	  this.tests.forEach(doReset);
	  this._beforeEach.forEach(doReset);
	  this._afterEach.forEach(doReset);
	  this._beforeAll.forEach(doReset);
	  this._afterAll.forEach(doReset);
	};

	/**
	 * Return a clone of this `Suite`.
	 *
	 * @private
	 * @return {Suite}
	 */
	Suite.prototype.clone = function () {
	  var suite = new Suite(this.title);
	  debug('clone');
	  suite.ctx = this.ctx;
	  suite.root = this.root;
	  suite.timeout(this.timeout());
	  suite.retries(this.retries());
	  suite.slow(this.slow());
	  suite.bail(this.bail());
	  return suite;
	};

	/**
	 * Set or get timeout `ms` or short-hand such as "2s".
	 *
	 * @private
	 * @todo Do not attempt to set value if `ms` is undefined
	 * @param {number|string} ms
	 * @return {Suite|number} for chaining
	 */
	Suite.prototype.timeout = function (ms) {
	  if (!arguments.length) {
	    return this._timeout;
	  }
	  if (typeof ms === 'string') {
	    ms = milliseconds(ms);
	  }

	  // Clamp to range
	  var INT_MAX = Math.pow(2, 31) - 1;
	  var range = [0, INT_MAX];
	  ms = clamp(ms, range);

	  debug('timeout %d', ms);
	  this._timeout = parseInt(ms, 10);
	  return this;
	};

	/**
	 * Set or get number of times to retry a failed test.
	 *
	 * @private
	 * @param {number|string} n
	 * @return {Suite|number} for chaining
	 */
	Suite.prototype.retries = function (n) {
	  if (!arguments.length) {
	    return this._retries;
	  }
	  debug('retries %d', n);
	  this._retries = parseInt(n, 10) || 0;
	  return this;
	};

	/**
	 * Set or get slow `ms` or short-hand such as "2s".
	 *
	 * @private
	 * @param {number|string} ms
	 * @return {Suite|number} for chaining
	 */
	Suite.prototype.slow = function (ms) {
	  if (!arguments.length) {
	    return this._slow;
	  }
	  if (typeof ms === 'string') {
	    ms = milliseconds(ms);
	  }
	  debug('slow %d', ms);
	  this._slow = ms;
	  return this;
	};

	/**
	 * Set or get whether to bail after first error.
	 *
	 * @private
	 * @param {boolean} bail
	 * @return {Suite|number} for chaining
	 */
	Suite.prototype.bail = function (bail) {
	  if (!arguments.length) {
	    return this._bail;
	  }
	  debug('bail %s', bail);
	  this._bail = bail;
	  return this;
	};

	/**
	 * Check if this suite or its parent suite is marked as pending.
	 *
	 * @private
	 */
	Suite.prototype.isPending = function () {
	  return this.pending || (this.parent && this.parent.isPending());
	};

	/**
	 * Generic hook-creator.
	 * @private
	 * @param {string} title - Title of hook
	 * @param {Function} fn - Hook callback
	 * @returns {Hook} A new hook
	 */
	Suite.prototype._createHook = function (title, fn) {
	  var hook = new Hook(title, fn);
	  hook.parent = this;
	  hook.timeout(this.timeout());
	  hook.retries(this.retries());
	  hook.slow(this.slow());
	  hook.ctx = this.ctx;
	  hook.file = this.file;
	  return hook;
	};

	/**
	 * Run `fn(test[, done])` before running tests.
	 *
	 * @private
	 * @param {string} title
	 * @param {Function} fn
	 * @return {Suite} for chaining
	 */
	Suite.prototype.beforeAll = function (title, fn) {
	  if (this.isPending()) {
	    return this;
	  }
	  if (typeof title === 'function') {
	    fn = title;
	    title = fn.name;
	  }
	  title = '"before all" hook' + (title ? ': ' + title : '');

	  var hook = this._createHook(title, fn);
	  this._beforeAll.push(hook);
	  this.emit(constants.EVENT_SUITE_ADD_HOOK_BEFORE_ALL, hook);
	  return this;
	};

	/**
	 * Run `fn(test[, done])` after running tests.
	 *
	 * @private
	 * @param {string} title
	 * @param {Function} fn
	 * @return {Suite} for chaining
	 */
	Suite.prototype.afterAll = function (title, fn) {
	  if (this.isPending()) {
	    return this;
	  }
	  if (typeof title === 'function') {
	    fn = title;
	    title = fn.name;
	  }
	  title = '"after all" hook' + (title ? ': ' + title : '');

	  var hook = this._createHook(title, fn);
	  this._afterAll.push(hook);
	  this.emit(constants.EVENT_SUITE_ADD_HOOK_AFTER_ALL, hook);
	  return this;
	};

	/**
	 * Run `fn(test[, done])` before each test case.
	 *
	 * @private
	 * @param {string} title
	 * @param {Function} fn
	 * @return {Suite} for chaining
	 */
	Suite.prototype.beforeEach = function (title, fn) {
	  if (this.isPending()) {
	    return this;
	  }
	  if (typeof title === 'function') {
	    fn = title;
	    title = fn.name;
	  }
	  title = '"before each" hook' + (title ? ': ' + title : '');

	  var hook = this._createHook(title, fn);
	  this._beforeEach.push(hook);
	  this.emit(constants.EVENT_SUITE_ADD_HOOK_BEFORE_EACH, hook);
	  return this;
	};

	/**
	 * Run `fn(test[, done])` after each test case.
	 *
	 * @private
	 * @param {string} title
	 * @param {Function} fn
	 * @return {Suite} for chaining
	 */
	Suite.prototype.afterEach = function (title, fn) {
	  if (this.isPending()) {
	    return this;
	  }
	  if (typeof title === 'function') {
	    fn = title;
	    title = fn.name;
	  }
	  title = '"after each" hook' + (title ? ': ' + title : '');

	  var hook = this._createHook(title, fn);
	  this._afterEach.push(hook);
	  this.emit(constants.EVENT_SUITE_ADD_HOOK_AFTER_EACH, hook);
	  return this;
	};

	/**
	 * Add a test `suite`.
	 *
	 * @private
	 * @param {Suite} suite
	 * @return {Suite} for chaining
	 */
	Suite.prototype.addSuite = function (suite) {
	  suite.parent = this;
	  suite.root = false;
	  suite.timeout(this.timeout());
	  suite.retries(this.retries());
	  suite.slow(this.slow());
	  suite.bail(this.bail());
	  this.suites.push(suite);
	  this.emit(constants.EVENT_SUITE_ADD_SUITE, suite);
	  return this;
	};

	/**
	 * Add a `test` to this suite.
	 *
	 * @private
	 * @param {Test} test
	 * @return {Suite} for chaining
	 */
	Suite.prototype.addTest = function (test) {
	  test.parent = this;
	  test.timeout(this.timeout());
	  test.retries(this.retries());
	  test.slow(this.slow());
	  test.ctx = this.ctx;
	  this.tests.push(test);
	  this.emit(constants.EVENT_SUITE_ADD_TEST, test);
	  return this;
	};

	/**
	 * Return the full title generated by recursively concatenating the parent's
	 * full title.
	 *
	 * @memberof Suite
	 * @public
	 * @return {string}
	 */
	Suite.prototype.fullTitle = function () {
	  return this.titlePath().join(' ');
	};

	/**
	 * Return the title path generated by recursively concatenating the parent's
	 * title path.
	 *
	 * @memberof Suite
	 * @public
	 * @return {string[]}
	 */
	Suite.prototype.titlePath = function () {
	  var result = [];
	  if (this.parent) {
	    result = result.concat(this.parent.titlePath());
	  }
	  if (!this.root) {
	    result.push(this.title);
	  }
	  return result;
	};

	/**
	 * Return the total number of tests.
	 *
	 * @memberof Suite
	 * @public
	 * @return {number}
	 */
	Suite.prototype.total = function () {
	  return (
	    this.suites.reduce(function (sum, suite) {
	      return sum + suite.total();
	    }, 0) + this.tests.length
	  );
	};

	/**
	 * Iterates through each suite recursively to find all tests. Applies a
	 * function in the format `fn(test)`.
	 *
	 * @private
	 * @param {Function} fn
	 * @return {Suite}
	 */
	Suite.prototype.eachTest = function (fn) {
	  this.tests.forEach(fn);
	  this.suites.forEach(function (suite) {
	    suite.eachTest(fn);
	  });
	  return this;
	};

	/**
	 * This will run the root suite if we happen to be running in delayed mode.
	 * @private
	 */
	Suite.prototype.run = function run() {
	  if (this.root) {
	    this.emit(constants.EVENT_ROOT_SUITE_RUN);
	  }
	};

	/**
	 * Determines whether a suite has an `only` test or suite as a descendant.
	 *
	 * @private
	 * @returns {Boolean}
	 */
	Suite.prototype.hasOnly = function hasOnly() {
	  return (
	    this._onlyTests.length > 0 ||
	    this._onlySuites.length > 0 ||
	    this.suites.some(function (suite) {
	      return suite.hasOnly();
	    })
	  );
	};

	/**
	 * Filter suites based on `isOnly` logic.
	 *
	 * @private
	 * @returns {Boolean}
	 */
	Suite.prototype.filterOnly = function filterOnly() {
	  if (this._onlyTests.length) {
	    // If the suite contains `only` tests, run those and ignore any nested suites.
	    this.tests = this._onlyTests;
	    this.suites = [];
	  } else {
	    // Otherwise, do not run any of the tests in this suite.
	    this.tests = [];
	    this._onlySuites.forEach(function (onlySuite) {
	      // If there are other `only` tests/suites nested in the current `only` suite, then filter that `only` suite.
	      // Otherwise, all of the tests on this `only` suite should be run, so don't filter it.
	      if (onlySuite.hasOnly()) {
	        onlySuite.filterOnly();
	      }
	    });
	    // Run the `only` suites, as well as any other suites that have `only` tests/suites as descendants.
	    var onlySuites = this._onlySuites;
	    this.suites = this.suites.filter(function (childSuite) {
	      return onlySuites.indexOf(childSuite) !== -1 || childSuite.filterOnly();
	    });
	  }
	  // Keep the suite only if there is something to run
	  return this.tests.length > 0 || this.suites.length > 0;
	};

	/**
	 * Adds a suite to the list of subsuites marked `only`.
	 *
	 * @private
	 * @param {Suite} suite
	 */
	Suite.prototype.appendOnlySuite = function (suite) {
	  this._onlySuites.push(suite);
	};

	/**
	 * Marks a suite to be `only`.
	 *
	 * @private
	 */
	Suite.prototype.markOnly = function () {
	  this.parent && this.parent.appendOnlySuite(this);
	};

	/**
	 * Adds a test to the list of tests marked `only`.
	 *
	 * @private
	 * @param {Test} test
	 */
	Suite.prototype.appendOnlyTest = function (test) {
	  this._onlyTests.push(test);
	};

	/**
	 * Returns the array of hooks by hook name; see `HOOK_TYPE_*` constants.
	 * @private
	 */
	Suite.prototype.getHooks = function getHooks(name) {
	  return this['_' + name];
	};

	/**
	 * cleans all references from this suite and all child suites.
	 */
	Suite.prototype.dispose = function () {
	  this.suites.forEach(function (suite) {
	    suite.dispose();
	  });
	  this.cleanReferences();
	};

	/**
	 * Cleans up the references to all the deferred functions
	 * (before/after/beforeEach/afterEach) and tests of a Suite.
	 * These must be deleted otherwise a memory leak can happen,
	 * as those functions may reference variables from closures,
	 * thus those variables can never be garbage collected as long
	 * as the deferred functions exist.
	 *
	 * @private
	 */
	Suite.prototype.cleanReferences = function cleanReferences() {
	  function cleanArrReferences(arr) {
	    for (var i = 0; i < arr.length; i++) {
	      delete arr[i].fn;
	    }
	  }

	  if (Array.isArray(this._beforeAll)) {
	    cleanArrReferences(this._beforeAll);
	  }

	  if (Array.isArray(this._beforeEach)) {
	    cleanArrReferences(this._beforeEach);
	  }

	  if (Array.isArray(this._afterAll)) {
	    cleanArrReferences(this._afterAll);
	  }

	  if (Array.isArray(this._afterEach)) {
	    cleanArrReferences(this._afterEach);
	  }

	  for (var i = 0; i < this.tests.length; i++) {
	    delete this.tests[i].fn;
	  }
	};

	/**
	 * Returns an object suitable for IPC.
	 * Functions are represented by keys beginning with `$$`.
	 * @private
	 * @returns {Object}
	 */
	Suite.prototype.serialize = function serialize() {
	  return {
	    _bail: this._bail,
	    $$fullTitle: this.fullTitle(),
	    $$isPending: Boolean(this.isPending()),
	    root: this.root,
	    title: this.title,
	    [MOCHA_ID_PROP_NAME]: this.id,
	    parent: this.parent ? {[MOCHA_ID_PROP_NAME]: this.parent.id} : null
	  };
	};

	var constants = defineConstants(
	  /**
	   * {@link Suite}-related constants.
	   * @public
	   * @memberof Suite
	   * @alias constants
	   * @readonly
	   * @static
	   * @enum {string}
	   */
	  {
	    /**
	     * Event emitted after a test file has been loaded. Not emitted in browser.
	     */
	    EVENT_FILE_POST_REQUIRE: 'post-require',
	    /**
	     * Event emitted before a test file has been loaded. In browser, this is emitted once an interface has been selected.
	     */
	    EVENT_FILE_PRE_REQUIRE: 'pre-require',
	    /**
	     * Event emitted immediately after a test file has been loaded. Not emitted in browser.
	     */
	    EVENT_FILE_REQUIRE: 'require',
	    /**
	     * Event emitted when `global.run()` is called (use with `delay` option).
	     */
	    EVENT_ROOT_SUITE_RUN: 'run',

	    /**
	     * Namespace for collection of a `Suite`'s "after all" hooks.
	     */
	    HOOK_TYPE_AFTER_ALL: 'afterAll',
	    /**
	     * Namespace for collection of a `Suite`'s "after each" hooks.
	     */
	    HOOK_TYPE_AFTER_EACH: 'afterEach',
	    /**
	     * Namespace for collection of a `Suite`'s "before all" hooks.
	     */
	    HOOK_TYPE_BEFORE_ALL: 'beforeAll',
	    /**
	     * Namespace for collection of a `Suite`'s "before each" hooks.
	     */
	    HOOK_TYPE_BEFORE_EACH: 'beforeEach',

	    /**
	     * Emitted after a child `Suite` has been added to a `Suite`.
	     */
	    EVENT_SUITE_ADD_SUITE: 'suite',
	    /**
	     * Emitted after an "after all" `Hook` has been added to a `Suite`.
	     */
	    EVENT_SUITE_ADD_HOOK_AFTER_ALL: 'afterAll',
	    /**
	     * Emitted after an "after each" `Hook` has been added to a `Suite`.
	     */
	    EVENT_SUITE_ADD_HOOK_AFTER_EACH: 'afterEach',
	    /**
	     * Emitted after an "before all" `Hook` has been added to a `Suite`.
	     */
	    EVENT_SUITE_ADD_HOOK_BEFORE_ALL: 'beforeAll',
	    /**
	     * Emitted after an "before each" `Hook` has been added to a `Suite`.
	     */
	    EVENT_SUITE_ADD_HOOK_BEFORE_EACH: 'beforeEach',
	    /**
	     * Emitted after a `Test` has been added to a `Suite`.
	     */
	    EVENT_SUITE_ADD_TEST: 'test'
	  }
	);

	Suite.constants = constants;


	/***/ }),

	/***/ 121:
	/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

	var Runnable = __webpack_require__(4);
	var utils = __webpack_require__(272);
	var errors = __webpack_require__(298);
	var createInvalidArgumentTypeError = errors.createInvalidArgumentTypeError;
	var isString = utils.isString;

	const {MOCHA_ID_PROP_NAME} = utils.constants;

	module.exports = Test;

	/**
	 * Initialize a new `Test` with the given `title` and callback `fn`.
	 *
	 * @public
	 * @class
	 * @extends Runnable
	 * @param {String} title - Test title (required)
	 * @param {Function} [fn] - Test callback.  If omitted, the Test is considered "pending"
	 */
	function Test(title, fn) {
	  if (!isString(title)) {
	    throw createInvalidArgumentTypeError(
	      'Test argument "title" should be a string. Received type "' +
	        typeof title +
	        '"',
	      'title',
	      'string'
	    );
	  }
	  this.type = 'test';
	  Runnable.call(this, title, fn);
	  this.reset();
	}

	/**
	 * Inherit from `Runnable.prototype`.
	 */
	utils.inherits(Test, Runnable);

	/**
	 * Resets the state initially or for a next run.
	 */
	Test.prototype.reset = function () {
	  Runnable.prototype.reset.call(this);
	  this.pending = !this.fn;
	  delete this.state;
	};

	/**
	 * Set or get retried test
	 *
	 * @private
	 */
	Test.prototype.retriedTest = function (n) {
	  if (!arguments.length) {
	    return this._retriedTest;
	  }
	  this._retriedTest = n;
	};

	/**
	 * Add test to the list of tests marked `only`.
	 *
	 * @private
	 */
	Test.prototype.markOnly = function () {
	  this.parent.appendOnlyTest(this);
	};

	Test.prototype.clone = function () {
	  var test = new Test(this.title, this.fn);
	  test.timeout(this.timeout());
	  test.slow(this.slow());
	  test.retries(this.retries());
	  test.currentRetry(this.currentRetry());
	  test.retriedTest(this.retriedTest() || this);
	  test.globals(this.globals());
	  test.parent = this.parent;
	  test.file = this.file;
	  test.ctx = this.ctx;
	  return test;
	};

	/**
	 * Returns an minimal object suitable for transmission over IPC.
	 * Functions are represented by keys beginning with `$$`.
	 * @private
	 * @returns {Object}
	 */
	Test.prototype.serialize = function serialize() {
	  return {
	    $$currentRetry: this._currentRetry,
	    $$fullTitle: this.fullTitle(),
	    $$isPending: Boolean(this.pending),
	    $$retriedTest: this._retriedTest || null,
	    $$slow: this._slow,
	    $$titlePath: this.titlePath(),
	    body: this.body,
	    duration: this.duration,
	    err: this.err,
	    parent: {
	      $$fullTitle: this.parent.fullTitle(),
	      [MOCHA_ID_PROP_NAME]: this.parent.id
	    },
	    speed: this.speed,
	    state: this.state,
	    title: this.title,
	    type: this.type,
	    file: this.file,
	    [MOCHA_ID_PROP_NAME]: this.id
	  };
	};


	/***/ }),

	/***/ 272:
	/***/ ((__unused_webpack_module, exports, __webpack_require__) => {


	/**
	 * Various utility functions used throughout Mocha's codebase.
	 * @module utils
	 */

	/**
	 * Module dependencies.
	 */
	var path = __webpack_require__(397);
	var util = __webpack_require__(354);
	var he = __webpack_require__(46);

	const MOCHA_ID_PROP_NAME = '__mocha_id__';

	/**
	 * Inherit the prototype methods from one constructor into another.
	 *
	 * @param {function} ctor - Constructor function which needs to inherit the
	 *     prototype.
	 * @param {function} superCtor - Constructor function to inherit prototype from.
	 * @throws {TypeError} if either constructor is null, or if super constructor
	 *     lacks a prototype.
	 */
	exports.inherits = util.inherits;

	/**
	 * Escape special characters in the given string of html.
	 *
	 * @private
	 * @param  {string} html
	 * @return {string}
	 */
	exports.escape = function (html) {
	  return he.encode(String(html), {useNamedReferences: false});
	};

	/**
	 * Test if the given obj is type of string.
	 *
	 * @private
	 * @param {Object} obj
	 * @return {boolean}
	 */
	exports.isString = function (obj) {
	  return typeof obj === 'string';
	};

	/**
	 * Compute a slug from the given `str`.
	 *
	 * @private
	 * @param {string} str
	 * @return {string}
	 */
	exports.slug = function (str) {
	  return str
	    .toLowerCase()
	    .replace(/\s+/g, '-')
	    .replace(/[^-\w]/g, '')
	    .replace(/-{2,}/g, '-');
	};

	/**
	 * Strip the function definition from `str`, and re-indent for pre whitespace.
	 *
	 * @param {string} str
	 * @return {string}
	 */
	exports.clean = function (str) {
	  str = str
	    .replace(/\r\n?|[\n\u2028\u2029]/g, '\n')
	    .replace(/^\uFEFF/, '')
	    // (traditional)->  space/name     parameters    body     (lambda)-> parameters       body   multi-statement/single          keep body content
	    .replace(
	      /^function(?:\s*|\s[^(]*)\([^)]*\)\s*\{((?:.|\n)*?)\}$|^\([^)]*\)\s*=>\s*(?:\{((?:.|\n)*?)\}|((?:.|\n)*))$/,
	      '$1$2$3'
	    );

	  var spaces = str.match(/^\n?( *)/)[1].length;
	  var tabs = str.match(/^\n?(\t*)/)[1].length;
	  var re = new RegExp(
	    '^\n?' + (tabs ? '\t' : ' ') + '{' + (tabs || spaces) + '}',
	    'gm'
	  );

	  str = str.replace(re, '');

	  return str.trim();
	};

	/**
	 * If a value could have properties, and has none, this function is called,
	 * which returns a string representation of the empty value.
	 *
	 * Functions w/ no properties return `'[Function]'`
	 * Arrays w/ length === 0 return `'[]'`
	 * Objects w/ no properties return `'{}'`
	 * All else: return result of `value.toString()`
	 *
	 * @private
	 * @param {*} value The value to inspect.
	 * @param {string} typeHint The type of the value
	 * @returns {string}
	 */
	function emptyRepresentation(value, typeHint) {
	  switch (typeHint) {
	    case 'function':
	      return '[Function]';
	    case 'object':
	      return '{}';
	    case 'array':
	      return '[]';
	    default:
	      return value.toString();
	  }
	}

	/**
	 * Takes some variable and asks `Object.prototype.toString()` what it thinks it
	 * is.
	 *
	 * @private
	 * @see https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/toString
	 * @param {*} value The value to test.
	 * @returns {string} Computed type
	 * @example
	 * canonicalType({}) // 'object'
	 * canonicalType([]) // 'array'
	 * canonicalType(1) // 'number'
	 * canonicalType(false) // 'boolean'
	 * canonicalType(Infinity) // 'number'
	 * canonicalType(null) // 'null'
	 * canonicalType(new Date()) // 'date'
	 * canonicalType(/foo/) // 'regexp'
	 * canonicalType('type') // 'string'
	 * canonicalType(global) // 'global'
	 * canonicalType(new String('foo') // 'object'
	 * canonicalType(async function() {}) // 'asyncfunction'
	 * canonicalType(await import(name)) // 'module'
	 */
	var canonicalType = (exports.canonicalType = function canonicalType(value) {
	  if (value === undefined) {
	    return 'undefined';
	  } else if (value === null) {
	    return 'null';
	  } else if (Buffer.isBuffer(value)) {
	    return 'buffer';
	  }
	  return Object.prototype.toString
	    .call(value)
	    .replace(/^\[.+\s(.+?)]$/, '$1')
	    .toLowerCase();
	});

	/**
	 *
	 * Returns a general type or data structure of a variable
	 * @private
	 * @see https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures
	 * @param {*} value The value to test.
	 * @returns {string} One of undefined, boolean, number, string, bigint, symbol, object
	 * @example
	 * type({}) // 'object'
	 * type([]) // 'array'
	 * type(1) // 'number'
	 * type(false) // 'boolean'
	 * type(Infinity) // 'number'
	 * type(null) // 'null'
	 * type(new Date()) // 'object'
	 * type(/foo/) // 'object'
	 * type('type') // 'string'
	 * type(global) // 'object'
	 * type(new String('foo') // 'string'
	 */
	exports.type = function type(value) {
	  // Null is special
	  if (value === null) return 'null';
	  const primitives = new Set([
	    'undefined',
	    'boolean',
	    'number',
	    'string',
	    'bigint',
	    'symbol'
	  ]);
	  const _type = typeof value;
	  if (_type === 'function') return _type;
	  if (primitives.has(_type)) return _type;
	  if (value instanceof String) return 'string';
	  if (value instanceof Error) return 'error';
	  if (Array.isArray(value)) return 'array';

	  return _type;
	};

	/**
	 * Stringify `value`. Different behavior depending on type of value:
	 *
	 * - If `value` is undefined or null, return `'[undefined]'` or `'[null]'`, respectively.
	 * - If `value` is not an object, function or array, return result of `value.toString()` wrapped in double-quotes.
	 * - If `value` is an *empty* object, function, or array, return result of function
	 *   {@link emptyRepresentation}.
	 * - If `value` has properties, call {@link exports.canonicalize} on it, then return result of
	 *   JSON.stringify().
	 *
	 * @private
	 * @see exports.type
	 * @param {*} value
	 * @return {string}
	 */
	exports.stringify = function (value) {
	  var typeHint = canonicalType(value);

	  if (!~['object', 'array', 'function'].indexOf(typeHint)) {
	    if (typeHint === 'buffer') {
	      var json = Buffer.prototype.toJSON.call(value);
	      // Based on the toJSON result
	      return jsonStringify(
	        json.data && json.type ? json.data : json,
	        2
	      ).replace(/,(\n|$)/g, '$1');
	    }

	    // IE7/IE8 has a bizarre String constructor; needs to be coerced
	    // into an array and back to obj.
	    if (typeHint === 'string' && typeof value === 'object') {
	      value = value.split('').reduce(function (acc, char, idx) {
	        acc[idx] = char;
	        return acc;
	      }, {});
	      typeHint = 'object';
	    } else {
	      return jsonStringify(value);
	    }
	  }

	  for (var prop in value) {
	    if (Object.prototype.hasOwnProperty.call(value, prop)) {
	      return jsonStringify(
	        exports.canonicalize(value, null, typeHint),
	        2
	      ).replace(/,(\n|$)/g, '$1');
	    }
	  }

	  return emptyRepresentation(value, typeHint);
	};

	/**
	 * like JSON.stringify but more sense.
	 *
	 * @private
	 * @param {Object}  object
	 * @param {number=} spaces
	 * @param {number=} depth
	 * @returns {*}
	 */
	function jsonStringify(object, spaces, depth) {
	  if (typeof spaces === 'undefined') {
	    // primitive types
	    return _stringify(object);
	  }

	  depth = depth || 1;
	  var space = spaces * depth;
	  var str = Array.isArray(object) ? '[' : '{';
	  var end = Array.isArray(object) ? ']' : '}';
	  var length =
	    typeof object.length === 'number'
	      ? object.length
	      : Object.keys(object).length;
	  // `.repeat()` polyfill
	  function repeat(s, n) {
	    return new Array(n).join(s);
	  }

	  function _stringify(val) {
	    switch (canonicalType(val)) {
	      case 'null':
	      case 'undefined':
	        val = '[' + val + ']';
	        break;
	      case 'array':
	      case 'object':
	        val = jsonStringify(val, spaces, depth + 1);
	        break;
	      case 'boolean':
	      case 'regexp':
	      case 'symbol':
	      case 'number':
	        val =
	          val === 0 && 1 / val === -Infinity // `-0`
	            ? '-0'
	            : val.toString();
	        break;
	      case 'bigint':
	        val = val.toString() + 'n';
	        break;
	      case 'date':
	        var sDate = isNaN(val.getTime()) ? val.toString() : val.toISOString();
	        val = '[Date: ' + sDate + ']';
	        break;
	      case 'buffer':
	        var json = val.toJSON();
	        // Based on the toJSON result
	        json = json.data && json.type ? json.data : json;
	        val = '[Buffer: ' + jsonStringify(json, 2, depth + 1) + ']';
	        break;
	      default:
	        val =
	          val === '[Function]' || val === '[Circular]'
	            ? val
	            : JSON.stringify(val); // string
	    }
	    return val;
	  }

	  for (var i in object) {
	    if (!Object.prototype.hasOwnProperty.call(object, i)) {
	      continue; // not my business
	    }
	    --length;
	    str +=
	      '\n ' +
	      repeat(' ', space) +
	      (Array.isArray(object) ? '' : '"' + i + '": ') + // key
	      _stringify(object[i]) + // value
	      (length ? ',' : ''); // comma
	  }

	  return (
	    str +
	    // [], {}
	    (str.length !== 1 ? '\n' + repeat(' ', --space) + end : end)
	  );
	}

	/**
	 * Return a new Thing that has the keys in sorted order. Recursive.
	 *
	 * If the Thing...
	 * - has already been seen, return string `'[Circular]'`
	 * - is `undefined`, return string `'[undefined]'`
	 * - is `null`, return value `null`
	 * - is some other primitive, return the value
	 * - is not a primitive or an `Array`, `Object`, or `Function`, return the value of the Thing's `toString()` method
	 * - is a non-empty `Array`, `Object`, or `Function`, return the result of calling this function again.
	 * - is an empty `Array`, `Object`, or `Function`, return the result of calling `emptyRepresentation()`
	 *
	 * @private
	 * @see {@link exports.stringify}
	 * @param {*} value Thing to inspect.  May or may not have properties.
	 * @param {Array} [stack=[]] Stack of seen values
	 * @param {string} [typeHint] Type hint
	 * @return {(Object|Array|Function|string|undefined)}
	 */
	exports.canonicalize = function canonicalize(value, stack, typeHint) {
	  var canonicalizedObj;
	  /* eslint-disable no-unused-vars */
	  var prop;
	  /* eslint-enable no-unused-vars */
	  typeHint = typeHint || canonicalType(value);
	  function withStack(value, fn) {
	    stack.push(value);
	    fn();
	    stack.pop();
	  }

	  stack = stack || [];

	  if (stack.indexOf(value) !== -1) {
	    return '[Circular]';
	  }

	  switch (typeHint) {
	    case 'undefined':
	    case 'buffer':
	    case 'null':
	      canonicalizedObj = value;
	      break;
	    case 'array':
	      withStack(value, function () {
	        canonicalizedObj = value.map(function (item) {
	          return exports.canonicalize(item, stack);
	        });
	      });
	      break;
	    case 'function':
	      /* eslint-disable-next-line no-unused-vars, no-unreachable-loop */
	      for (prop in value) {
	        canonicalizedObj = {};
	        break;
	      }
	      /* eslint-enable guard-for-in */
	      if (!canonicalizedObj) {
	        canonicalizedObj = emptyRepresentation(value, typeHint);
	        break;
	      }
	    /* falls through */
	    case 'object':
	      canonicalizedObj = canonicalizedObj || {};
	      withStack(value, function () {
	        Object.keys(value)
	          .sort()
	          .forEach(function (key) {
	            canonicalizedObj[key] = exports.canonicalize(value[key], stack);
	          });
	      });
	      break;
	    case 'date':
	    case 'number':
	    case 'regexp':
	    case 'boolean':
	    case 'symbol':
	      canonicalizedObj = value;
	      break;
	    default:
	      canonicalizedObj = value + '';
	  }

	  return canonicalizedObj;
	};

	/**
	 * @summary
	 * This Filter based on `mocha-clean` module.(see: `github.com/rstacruz/mocha-clean`)
	 * @description
	 * When invoking this function you get a filter function that get the Error.stack as an input,
	 * and return a prettify output.
	 * (i.e: strip Mocha and internal node functions from stack trace).
	 * @returns {Function}
	 */
	exports.stackTraceFilter = function () {
	  // TODO: Replace with `process.browser`
	  var is = typeof document === 'undefined' ? {node: true} : {browser: true};
	  var slash = path.sep;
	  var cwd;
	  if (is.node) {
	    cwd = exports.cwd() + slash;
	  } else {
	    cwd = (
	      typeof location === 'undefined' ? window.location : location
	    ).href.replace(/\/[^/]*$/, '/');
	    slash = '/';
	  }

	  function isMochaInternal(line) {
	    return (
	      ~line.indexOf('node_modules' + slash + 'mocha' + slash) ||
	      ~line.indexOf(slash + 'mocha.js') ||
	      ~line.indexOf(slash + 'mocha.min.js')
	    );
	  }

	  function isNodeInternal(line) {
	    return (
	      ~line.indexOf('(timers.js:') ||
	      ~line.indexOf('(events.js:') ||
	      ~line.indexOf('(node.js:') ||
	      ~line.indexOf('(module.js:') ||
	      ~line.indexOf('GeneratorFunctionPrototype.next (native)') ||
	      false
	    );
	  }

	  return function (stack) {
	    stack = stack.split('\n');

	    stack = stack.reduce(function (list, line) {
	      if (isMochaInternal(line)) {
	        return list;
	      }

	      if (is.node && isNodeInternal(line)) {
	        return list;
	      }

	      // Clean up cwd(absolute)
	      if (/:\d+:\d+\)?$/.test(line)) {
	        line = line.replace('(' + cwd, '(');
	      }

	      list.push(line);
	      return list;
	    }, []);

	    return stack.join('\n');
	  };
	};

	/**
	 * Crude, but effective.
	 * @public
	 * @param {*} value
	 * @returns {boolean} Whether or not `value` is a Promise
	 */
	exports.isPromise = function isPromise(value) {
	  return (
	    typeof value === 'object' &&
	    value !== null &&
	    typeof value.then === 'function'
	  );
	};

	/**
	 * Clamps a numeric value to an inclusive range.
	 *
	 * @param {number} value - Value to be clamped.
	 * @param {number[]} range - Two element array specifying [min, max] range.
	 * @returns {number} clamped value
	 */
	exports.clamp = function clamp(value, range) {
	  return Math.min(Math.max(value, range[0]), range[1]);
	};

	/**
	 * It's a noop.
	 * @public
	 */
	exports.noop = function () {};

	/**
	 * Creates a map-like object.
	 *
	 * @description
	 * A "map" is an object with no prototype, for our purposes. In some cases
	 * this would be more appropriate than a `Map`, especially if your environment
	 * doesn't support it. Recommended for use in Mocha's public APIs.
	 *
	 * @public
	 * @see {@link https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Map#Custom_and_Null_objects|MDN:Map}
	 * @see {@link https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/create#Custom_and_Null_objects|MDN:Object.create - Custom objects}
	 * @see {@link https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/assign#Custom_and_Null_objects|MDN:Object.assign}
	 * @param {...*} [obj] - Arguments to `Object.assign()`.
	 * @returns {Object} An object with no prototype, having `...obj` properties
	 */
	exports.createMap = function (obj) {
	  return Object.assign.apply(
	    null,
	    [Object.create(null)].concat(Array.prototype.slice.call(arguments))
	  );
	};

	/**
	 * Creates a read-only map-like object.
	 *
	 * @description
	 * This differs from {@link module:utils.createMap createMap} only in that
	 * the argument must be non-empty, because the result is frozen.
	 *
	 * @see {@link module:utils.createMap createMap}
	 * @param {...*} [obj] - Arguments to `Object.assign()`.
	 * @returns {Object} A frozen object with no prototype, having `...obj` properties
	 * @throws {TypeError} if argument is not a non-empty object.
	 */
	exports.defineConstants = function (obj) {
	  if (canonicalType(obj) !== 'object' || !Object.keys(obj).length) {
	    throw new TypeError('Invalid argument; expected a non-empty object');
	  }
	  return Object.freeze(exports.createMap(obj));
	};

	/**
	 * Returns current working directory
	 *
	 * Wrapper around `process.cwd()` for isolation
	 * @private
	 */
	exports.cwd = function cwd() {
	  return process.cwd();
	};

	/**
	 * Returns `true` if Mocha is running in a browser.
	 * Checks for `process.browser`.
	 * @returns {boolean}
	 * @private
	 */
	exports.isBrowser = function isBrowser() {
	  return Boolean(process.browser);
	};

	/*
	 * Casts `value` to an array; useful for optionally accepting array parameters
	 *
	 * It follows these rules, depending on `value`.  If `value` is...
	 * 1. `undefined`: return an empty Array
	 * 2. `null`: return an array with a single `null` element
	 * 3. Any other object: return the value of `Array.from()` _if_ the object is iterable
	 * 4. otherwise: return an array with a single element, `value`
	 * @param {*} value - Something to cast to an Array
	 * @returns {Array<*>}
	 */
	exports.castArray = function castArray(value) {
	  if (value === undefined) {
	    return [];
	  }
	  if (value === null) {
	    return [null];
	  }
	  if (
	    typeof value === 'object' &&
	    (typeof value[Symbol.iterator] === 'function' || value.length !== undefined)
	  ) {
	    return Array.from(value);
	  }
	  return [value];
	};

	exports.constants = exports.defineConstants({
	  MOCHA_ID_PROP_NAME
	});

	const uniqueIDBase =
	  'abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789-_';

	/**
	 * Creates a new unique identifier
	 * Does not create cryptographically safe ids.
	 * Trivial copy of nanoid/non-secure
	 * @returns {string} Unique identifier
	 */
	exports.uniqueID = () => {
	  let id = '';
	  for (let i = 0; i < 21; i++) {
	    id += uniqueIDBase[(Math.random() * 64) | 0];
	  }
	  return id;
	};

	exports.assignNewMochaID = obj => {
	  const id = exports.uniqueID();
	  Object.defineProperty(obj, MOCHA_ID_PROP_NAME, {
	    get() {
	      return id;
	    }
	  });
	  return obj;
	};

	/**
	 * Retrieves a Mocha ID from an object, if present.
	 * @param {*} [obj] - Object
	 * @returns {string|void}
	 */
	exports.getMochaID = obj =>
	  obj && typeof obj === 'object' ? obj[MOCHA_ID_PROP_NAME] : undefined;


	/***/ })

	/******/ 	});
	/************************************************************************/
	/******/ 	// The module cache
	/******/ 	var __webpack_module_cache__ = {};
	/******/ 	
	/******/ 	// The require function
	/******/ 	function __webpack_require__(moduleId) {
	/******/ 		// Check if module is in cache
	/******/ 		var cachedModule = __webpack_module_cache__[moduleId];
	/******/ 		if (cachedModule !== undefined) {
	/******/ 			return cachedModule.exports;
	/******/ 		}
	/******/ 		// Create a new module (and put it into the cache)
	/******/ 		var module = __webpack_module_cache__[moduleId] = {
	/******/ 			id: moduleId,
	/******/ 			loaded: false,
	/******/ 			exports: {}
	/******/ 		};
	/******/ 	
	/******/ 		// Execute the module function
	/******/ 		__webpack_modules__[moduleId].call(module.exports, module, module.exports, __webpack_require__);
	/******/ 	
	/******/ 		// Flag the module as loaded
	/******/ 		module.loaded = true;
	/******/ 	
	/******/ 		// Return the exports of the module
	/******/ 		return module.exports;
	/******/ 	}
	/******/ 	
	/************************************************************************/
	/******/ 	/* webpack/runtime/define property getters */
	/******/ 	(() => {
	/******/ 		// define getter functions for harmony exports
	/******/ 		__webpack_require__.d = (exports, definition) => {
	/******/ 			for(var key in definition) {
	/******/ 				if(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {
	/******/ 					Object.defineProperty(exports, key, { enumerable: true, get: definition[key] });
	/******/ 				}
	/******/ 			}
	/******/ 		};
	/******/ 	})();
	/******/ 	
	/******/ 	/* webpack/runtime/global */
	/******/ 	(() => {
	/******/ 		__webpack_require__.g = (function() {
	/******/ 			if (typeof globalThis === 'object') return globalThis;
	/******/ 			try {
	/******/ 				return this || new Function('return this')();
	/******/ 			} catch (e) {
	/******/ 				if (typeof window === 'object') return window;
	/******/ 			}
	/******/ 		})();
	/******/ 	})();
	/******/ 	
	/******/ 	/* webpack/runtime/hasOwnProperty shorthand */
	/******/ 	(() => {
	/******/ 		__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop));
	/******/ 	})();
	/******/ 	
	/******/ 	/* webpack/runtime/make namespace object */
	/******/ 	(() => {
	/******/ 		// define __esModule on exports
	/******/ 		__webpack_require__.r = (exports) => {
	/******/ 			if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
	/******/ 				Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
	/******/ 			}
	/******/ 			Object.defineProperty(exports, '__esModule', { value: true });
	/******/ 		};
	/******/ 	})();
	/******/ 	
	/******/ 	/* webpack/runtime/node module decorator */
	/******/ 	(() => {
	/******/ 		__webpack_require__.nmd = (module) => {
	/******/ 			module.paths = [];
	/******/ 			if (!module.children) module.children = [];
	/******/ 			return module;
	/******/ 		};
	/******/ 	})();
	/******/ 	
	/************************************************************************/
	/******/ 	
	/******/ 	// startup
	/******/ 	// Load entry module and return exports
	/******/ 	// This entry module is referenced by other modules so it can't be inlined
	/******/ 	var __webpack_exports__ = __webpack_require__(44);
	/******/ 	var __webpack_export_target__ = exports;
	/******/ 	for(var i in __webpack_exports__) __webpack_export_target__[i] = __webpack_exports__[i];
	/******/ 	if(__webpack_exports__.__esModule) Object.defineProperty(__webpack_export_target__, "__esModule", { value: true });
	/******/ 	
	/******/ })()
	;
	
} (mocha$2));

var mocha = /*@__PURE__*/getDefaultExportFromCjs(mocha$2);

var mocha$1 = /*#__PURE__*/_mergeNamespaces({
	__proto__: null,
	default: mocha
}, [mocha$2]);

const mochaDebug = require$$0('mocha-remote:client');
function extend(namespace) {
    return mochaDebug.extend(namespace);
}

const debug = extend("serialization");
function toJSON(value) {
    if (value instanceof Error) {
        const { message, stack } = value;
        return {
            type: "error",
            message,
            stack,
        };
    }
    else if (typeof value === "object" && typeof value.serialize === "function") {
        const result = value.serialize();
        if (value instanceof mocha$2.Suite) {
            // Polyfill missing methods
            Object.assign(result, {
                "type": "suite",
                "$$total": value.total(),
            });
        }
        return result;
    }
    else {
        return value;
    }
}
function createReplacer() {
    return function (key, value) {
        debug(`Replacing %s`, value);
        if (typeof value === "object" && value !== null) {
            return toJSON(value);
        }
        else if (value === null || typeof value === "string" || typeof value === "number" || typeof value === "boolean") {
            return value;
        }
        return value;
    };
}
function serialize(input, replacer = createReplacer()) {
    return flatted__namespace.stringify(input, replacer);
}

var serialization = /*#__PURE__*/Object.freeze({
	__proto__: null,
	createReplacer: createReplacer,
	serialize: serialize
});

exports.ClientEvents = void 0;
(function (ClientEvents) {
    ClientEvents["CONNECTION"] = "connection";
    ClientEvents["DISCONNECTION"] = "disconnection";
    ClientEvents["ERROR"] = "error";
    ClientEvents["RUNNING"] = "running";
    ClientEvents["TEST"] = "test";
    ClientEvents["END"] = "end";
})(exports.ClientEvents || (exports.ClientEvents = {}));
class ClientEventEmitter {
    emitter;
    constructor(EventEmitterType, debug) {
        this.emitter = new EventEmitterType();
        for (const name of Object.values(exports.ClientEvents)) {
            this.on(name, (...args) => debug(`'%s' event emitted: %o`, name, args));
        }
    }
    addListener(event, listener) {
        this.emitter.addListener.call(this.emitter, event, listener);
        return this;
    }
    removeListener(event, listener) {
        this.emitter.removeListener.call(this.emitter, event, listener);
        return this;
    }
    removeAllListeners(event) {
        this.emitter.removeAllListeners.call(this.emitter, event);
        return this;
    }
    on(event, listener) {
        this.emitter.on.call(this.emitter, event, listener);
        return this;
    }
    once(event, listener) {
        this.emitter.addListener.call(this.emitter, event, listener);
        return this;
    }
    off(event, listener) {
        this.emitter.addListener.call(this.emitter, event, listener);
        return this;
    }
    emit(event, ...args) {
        return this.emitter.emit.call(this.emitter, event, ...args);
    }
    setMaxListeners(n) {
        this.emitter.setMaxListeners.call(this.emitter, n);
        return this;
    }
    getMaxListeners() {
        return this.emitter.getMaxListeners.call(this.emitter);
    }
    listeners(event) {
        return this.emitter.listeners.call(this.emitter, event);
    }
    rawListeners(event) {
        return this.emitter.rawListeners.call(this.emitter, event);
    }
    listenerCount(event) {
        return this.emitter.listenerCount.call(this.emitter, event);
    }
    prependListener(event, listener) {
        this.emitter.prependListener.call(this.emitter, event, listener);
        return this;
    }
    prependOnceListener(event, listener) {
        this.emitter.prependOnceListener.call(this.emitter, event, listener);
        return this;
    }
    eventNames() {
        return Object.values(exports.ClientEvents);
    }
}

const { EVENT_FILE_PRE_REQUIRE, EVENT_FILE_POST_REQUIRE, EVENT_FILE_REQUIRE } = mocha$2.Suite.constants;
class MalformedMessageError extends Error {
    cause;
    constructor(message, cause) {
        super(cause ? `${message}: ${cause.message}` : message);
        this.cause = cause;
    }
}
class SendMessageFailure extends Error {
    constructor(msg, cause) {
        super(`Failed to send '${msg.action}' message: ${cause}`);
    }
}
exports.ClientState = void 0;
(function (ClientState) {
    ClientState["DISCONNECTED"] = "disconnected";
    ClientState["CONNECTING"] = "connecting";
    ClientState["CONNECTED"] = "connected";
    ClientState["RUNNING"] = "running";
})(exports.ClientState || (exports.ClientState = {}));
const noop = () => { };
class Client extends ClientEventEmitter {
    static WebSocket;
    static EventEmitter;
    static DEFAULT_CONFIG = {
        autoConnect: true,
        autoReconnect: true,
        autoDisconnect: true,
        id: "default",
        title: "",
        reconnectDelay: 1000,
        url: "ws://localhost:8090",
        ui: "bdd",
        tests: () => {
            throw new Error("You must configure an `tests` function");
        },
    };
    static createRootSuite(title) {
        const context = new mocha$2.Context();
        const suite = new mocha$2.Suite(title, context);
        suite.root = true;
        return suite;
    }
    static parseGrep(value) {
        if (typeof value === "string") {
            const arg = value.match(/^\/(.*)\/(g|i|)$|.*/);
            if (arg) {
                return new RegExp(arg[1] || arg[0], arg[2]);
            }
            else {
                throw new Error(`Failed to parse grep string: ${value}`);
            }
        }
        else {
            return value;
        }
    }
    static debugCounter = 0;
    static nextDebug() {
        return extend(`Client[${Client.debugCounter++}]`);
    }
    suite;
    config;
    debug;
    previousRunner;
    options = {};
    _state = exports.ClientState.DISCONNECTED;
    ws;
    reconnectTimeout;
    constructor(config = {}, debug = Client.nextDebug()) {
        super(Client.EventEmitter, debug.extend("events"));
        this.debug = debug;
        this.debug("Constructing a client");
        this.config = { ...Client.DEFAULT_CONFIG, ...config };
        this.suite = Client.createRootSuite(this.config.title);
        this.on("error", (err) => {
            this.send({ action: "error", message: err.message }, false);
        });
        this.context(this.config.context);
        this.grep(this.config.grep);
        this.timeout(this.config.timeout);
        this.slow(this.config.slow);
        this.bindInterface();
        if (this.config.autoConnect) {
            this.connect();
        }
    }
    connect() {
        if (this._state === exports.ClientState.CONNECTED) {
            throw new Error("Already connected");
        }
        return new Promise((resolve, reject) => {
            const ws = new Client.WebSocket(this.config.url, `mocha-remote-${this.config.id}`);
            this.debug(`Connecting to ${ws.url}`);
            this.ws = ws;
            this._state = exports.ClientState.CONNECTING;
            const errorBeforeConnection = (e) => reject(e);
            ws.addEventListener("close", this.handleClose);
            ws.addEventListener("message", this.handleMessage);
            ws.addEventListener("error", event => {
                const { message } = event;
                this.emit(exports.ClientEvents.ERROR, new Error(message));
            });
            ws.addEventListener("open", () => {
                this.debug(`Connected to ${ws.url}`);
                this._state = exports.ClientState.CONNECTED;
                // No need to track errors before connection
                ws.removeEventListener("error", errorBeforeConnection);
                this.emit("connection", ws);
                resolve();
            });
            if (!this.config.autoReconnect) {
                // Attaching this since the only failed state from connecting is
                ws.addEventListener("error", errorBeforeConnection);
            }
        });
    }
    disconnect() {
        // Prevent a timeout from reconnecting
        if (this.reconnectTimeout) {
            clearTimeout(this.reconnectTimeout);
        }
        this._state = exports.ClientState.DISCONNECTED;
        if (this.ws) {
            this.debug(`Disconnecting from server`);
            this.ws.close(1000); // Normal Closure
            // Remove the close listener to prevent internal code being triggered by a controlled disconnect
            this.ws.removeEventListener("close", this.handleClose);
            // Forget about the WebSocket
            delete this.ws;
            // Tell the world
            this.emit("disconnection", {});
        }
        else {
            this.debug(`Already disconnected`);
        }
    }
    async loadFile(context) {
        this.debug("Loading tests");
        const mocha = this.mockedMocha;
        // Building a fake file path to emit some path via events
        const fakeFilePath = "/mocha-remote-client/mocked-test-suite.js";
        this.suite.emit(EVENT_FILE_PRE_REQUIRE, globalThis, fakeFilePath, mocha);
        // Assing in the context to make it available in hooks
        Object.assign(this.suite.ctx, context);
        // We're treating the value returned from the `result` as the `module.exports` from a file.
        const result = await this.config.tests(context);
        this.suite.emit(EVENT_FILE_REQUIRE, result, fakeFilePath, mocha);
        this.suite.emit(EVENT_FILE_POST_REQUIRE, globalThis, fakeFilePath, mocha);
        this.debug("Loaded %d test(s)", this.suite.total());
    }
    async run(fn, runOptions = {}) {
        this.debug("Preparing to run test suite");
        this._state = exports.ClientState.RUNNING;
        const options = {
            ...this.mockedMocha.options,
            ...runOptions,
            // Merge the contexts
            context: {
                ...this.mockedMocha.options.context,
                ...runOptions.context,
            },
        };
        this.reset();
        if (typeof options.timeout === "number") {
            this.suite.timeout(options.timeout);
        }
        if (typeof options.slow === "number") {
            this.suite.slow(options.slow);
        }
        await this.loadFile(options.context);
        const runner = new mocha$2.Runner(this.suite, false);
        // Register listeners for events and update the stats on the runner
        mocha$2.createStatsCollector(runner);
        if (options.grep) {
            runner.grep(options.grep, options.invert || false);
        }
        const runAsync = async (runner) => {
            return runner.runAsync({ options });
        };
        const done = (failures) => {
            this.debug("Completed running (%d failures)", failures);
            this.previousRunner = runner;
            this._state = this.ws ? exports.ClientState.CONNECTED : exports.ClientState.DISCONNECTED;
            if (fn) {
                fn(failures);
            }
        };
        // Abort the runner when disconnected
        this.once("disconnection", () => {
            runner.abort();
        });
        // Setup listeners for all events emitted by the runner
        const mappedEventKeys = Object.keys(mocha$2.Runner.constants).filter(k => k.startsWith("EVENT"));
        const mappedEventNames = new Set(mappedEventKeys.map(k => mocha$2.Runner.constants[k]));
        const { transformFailure } = this.config;
        if (transformFailure) {
            // Don't automatically map the "fail" event
            mappedEventNames.delete(mocha$2.Runner.constants.EVENT_TEST_FAIL);
            // Register a listener which allows the user to transform the failure
            runner.on(mocha$2.Runner.constants.EVENT_TEST_FAIL, (test, error) => {
                this.queueEvent(mocha$2.Runner.constants.EVENT_TEST_FAIL, transformFailure(test, error).then((transformedError) => {
                    return [test, transformedError];
                }, cause => {
                    const err = new Error(`Failed to transform failure: ${cause.message}`, { cause });
                    return [test, err];
                }));
            });
        }
        for (const eventName of mappedEventNames) {
            runner.on(eventName, (...args) => {
                this.queueEvent(eventName, args);
            });
        }
        this.debug("Running test suite");
        runAsync(runner).then(done, err => {
            this.emit("error", err);
        });
        this.emit("running", runner);
        runner.once(mocha$2.Runner.constants.EVENT_RUN_END, () => {
            this.emit("end", runner.failures);
            if (this.config.autoDisconnect) {
                this.debug("Disconnecting automatically after ended run and pending events");
                this.pendingEvent.then(() => {
                    this.disconnect();
                });
            }
        });
        return runner;
    }
    context(value) {
        this.options.context = value;
        return this;
    }
    grep(value) {
        this.options.grep = Client.parseGrep(value);
        return this;
    }
    timeout(value) {
        this.options.timeout = value;
        return this;
    }
    slow(value) {
        this.options.slow = value;
        return this;
    }
    get state() {
        if (this.ws) {
            if (this.ws.readyState === this.ws.OPEN) {
                return exports.ClientState.CONNECTED;
            }
            else if (this.ws.readyState === this.ws.CONNECTING) {
                return exports.ClientState.CONNECTING;
            }
            else {
                return exports.ClientState.DISCONNECTED;
            }
        }
        else {
            return this._state;
        }
    }
    /**
     * Resets the internal state to prepare for a potential re-run of the tests.
     * This includes cloning the root suite preparing for a reload of the tests.
     */
    reset() {
        if (this.previousRunner) {
            this.debug("Resetting after a previous run");
            this.previousRunner.dispose();
            delete this.previousRunner;
            const existingSuite = this.suite;
            // Cloning the suite to allow tests to be loaded into it again
            this.suite = this.suite.clone();
            // Reset and dispose of the old suite
            existingSuite.reset();
            existingSuite.dispose();
            // Bind the interface to the new suite
            this.bindInterface();
        }
        else {
            this.debug("No need to reset");
        }
    }
    parseMessage(data) {
        try {
            const msg = flatted__namespace.parse(data);
            if (typeof msg.action !== "string") {
                throw new MalformedMessageError("Expected an action property");
            }
            return msg;
        }
        catch (err) {
            if (err instanceof MalformedMessageError) {
                throw err;
            }
            else {
                throw new MalformedMessageError("Failed to parse flatted JSON", err instanceof Error ? err : undefined);
            }
        }
    }
    handleClose = ({ code, reason }) => {
        this.debug(`Connection closed: ${reason || "No reason"} (code=${code})`);
        // Forget about the socket
        delete this.ws;
        // Attempt a reconnect
        if (this.config.autoReconnect && this._state !== exports.ClientState.DISCONNECTED && code !== 1000) {
            this._state = exports.ClientState.CONNECTING;
            // Try to reconnect
            this.debug("Re-connecting in %dms", this.config.reconnectDelay);
            this.reconnectTimeout = setTimeout(() => {
                if (this._state === exports.ClientState.CONNECTING) {
                    this.connect();
                }
                else {
                    this.debug("Skipped reconnecting, state is '%s'", this._state);
                }
            }, this.config.reconnectDelay);
        }
        else {
            // TODO: Consider if there's a way to stop all active runners
            this._state = exports.ClientState.DISCONNECTED;
        }
        // Tell the world
        this.emit("disconnection", { code, reason });
    };
    handleMessage = (event) => {
        try {
            const msg = this.parseMessage(event.data);
            this.debug(`Received a '${msg.action}' message`);
            if (msg.action === "run") {
                if (typeof msg.options !== "object") {
                    throw new MalformedMessageError("Expected an options object on 'run' actions");
                }
                const parsedOptions = {
                    ...msg.options,
                    grep: Client.parseGrep(msg.options.grep)
                };
                // Kick off a new run
                this.run(noop, parsedOptions).catch((err) => {
                    if (err instanceof Error) {
                        this.emit("error", err);
                    }
                    else {
                        this.emit("error", new Error(`Caught a non-error while running: ${err}`));
                    }
                });
            }
            else if (msg.action === "error") {
                if (typeof msg.message === "string") {
                    this.emit("error", new Error(msg.message));
                }
                else {
                    throw new MalformedMessageError("Expected 'error' action to have an error argument with a message");
                }
            }
            else {
                const { action } = msg;
                throw new MalformedMessageError(`Unexpected action '${action}'`);
            }
        }
        catch (err) {
            if (err instanceof Error) {
                this.emit("error", err);
                this.send({ action: "error", message: err.message }, false);
            }
            else {
                // Rethrowing to avoid swallowing the error, leading to hard to catch bugs
                throw err;
            }
            if (err instanceof MalformedMessageError) {
                this.debug(`Remote Mocha Client received a malformed message: ${err.message}`);
            }
            else if (this.listenerCount("error") === 0) {
                // Rethrowing to avoid swallowing the error, leading to hard to catch bugs
                throw err;
            }
        }
    };
    send(msg, throwOnClosed = true) {
        if (this.ws && this.ws.readyState === Client.WebSocket.OPEN) {
            if (msg.action === "event") {
                this.debug(`Sending a 'event' (${msg.name}) message`);
            }
            else {
                this.debug(`Sending a '${msg.action}' message`);
            }
            const data = serialize(msg);
            this.ws.send(data);
        }
        else if (throwOnClosed) {
            throw new SendMessageFailure(msg, "WebSocket is closed");
        }
    }
    pendingEvent = Promise.resolve();
    /**
     * Queue an event to be sent, use this to prevent out of order delivery
     */
    queueEvent(name, promisedArgs) {
        this.pendingEvent = this.pendingEvent.then(async () => {
            const args = await promisedArgs;
            this.sendEvent(name, ...args);
        });
    }
    sendEvent(name, ...args) {
        try {
            this.send({ action: "event", name, args });
        }
        catch (err) {
            if (err instanceof SendMessageFailure) {
                this.debug(`Failed to send event: ${err.message}`);
            }
            else {
                throw err;
            }
        }
    }
    bindInterface() {
        const { ui } = this.config;
        const bind = typeof ui === "function" ? ui : mocha$2.interfaces[ui];
        bind(this.suite);
    }
    get mockedMocha() {
        return {
            options: {
                files: [],
                ...this.options,
            },
        };
    }
}

Client.WebSocket = WebSocket;
Client.EventEmitter = require$$1;
const { MOCHA_REMOTE_URL } = process.env;
if (MOCHA_REMOTE_URL) {
    Client.DEFAULT_CONFIG.url = MOCHA_REMOTE_URL;
}

exports.Client = Client;
exports.ClientEventEmitter = ClientEventEmitter;
exports.mocha = mocha$1;
exports.serialization = serialization;
//# sourceMappingURL=node.bundle.cjs.map
