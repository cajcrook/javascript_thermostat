import { Runner, Context, Hook, Interface, Suite, Test, interfaces } from 'mocha';
import { Debugger } from 'debug';

declare const createStatsCollector: (runner: Runner) => void;

declare const index_d_Context: typeof Context;
declare const index_d_Hook: typeof Hook;
declare const index_d_Interface: typeof Interface;
declare const index_d_Runner: typeof Runner;
declare const index_d_Suite: typeof Suite;
declare const index_d_Test: typeof Test;
declare const index_d_createStatsCollector: typeof createStatsCollector;
declare const index_d_interfaces: typeof interfaces;
declare namespace index_d {
  export { index_d_Context as Context, index_d_Hook as Hook, index_d_Interface as Interface, index_d_Runner as Runner, index_d_Suite as Suite, index_d_Test as Test, index_d_createStatsCollector as createStatsCollector, index_d_interfaces as interfaces };
}

type Replacer = (this: unknown, key: string, value: unknown) => unknown;
type SerializedCache = WeakMap<object, Record<string, unknown>>;
declare function createReplacer(): Replacer;
declare function serialize(input: unknown, replacer?: Replacer): string;

type serialization_SerializedCache = SerializedCache;
declare const serialization_createReplacer: typeof createReplacer;
declare const serialization_serialize: typeof serialize;
declare namespace serialization {
  export { type serialization_SerializedCache as SerializedCache, serialization_createReplacer as createReplacer, serialization_serialize as serialize };
}

type CustomContext = Record<string, unknown>;
type MochaConfig = {
    grep?: RegExp | string;
    invert?: boolean;
    context?: CustomContext;
    timeout?: number;
    slow?: number;
};

var events = {exports: {}};

var R = typeof Reflect === 'object' ? Reflect : null;
var ReflectApply = R && typeof R.apply === 'function'
  ? R.apply
  : function ReflectApply(target, receiver, args) {
    return Function.prototype.apply.call(target, receiver, args);
  };

var ReflectOwnKeys;
if (R && typeof R.ownKeys === 'function') {
  ReflectOwnKeys = R.ownKeys;
} else if (Object.getOwnPropertySymbols) {
  ReflectOwnKeys = function ReflectOwnKeys(target) {
    return Object.getOwnPropertyNames(target)
      .concat(Object.getOwnPropertySymbols(target));
  };
} else {
  ReflectOwnKeys = function ReflectOwnKeys(target) {
    return Object.getOwnPropertyNames(target);
  };
}

function ProcessEmitWarning(warning) {
  if (console && console.warn) console.warn(warning);
}

var NumberIsNaN = Number.isNaN || function NumberIsNaN(value) {
  return value !== value;
};

function EventEmitter() {
  EventEmitter.init.call(this);
}
events.exports = EventEmitter;
events.exports.once = once;

// Backwards-compat with node 0.10.x
EventEmitter.EventEmitter = EventEmitter;

EventEmitter.prototype._events = undefined;
EventEmitter.prototype._eventsCount = 0;
EventEmitter.prototype._maxListeners = undefined;

// By default EventEmitters will print a warning if more than 10 listeners are
// added to it. This is a useful default which helps finding memory leaks.
var defaultMaxListeners = 10;

function checkListener(listener) {
  if (typeof listener !== 'function') {
    throw new TypeError('The "listener" argument must be of type Function. Received type ' + typeof listener);
  }
}

Object.defineProperty(EventEmitter, 'defaultMaxListeners', {
  enumerable: true,
  get: function() {
    return defaultMaxListeners;
  },
  set: function(arg) {
    if (typeof arg !== 'number' || arg < 0 || NumberIsNaN(arg)) {
      throw new RangeError('The value of "defaultMaxListeners" is out of range. It must be a non-negative number. Received ' + arg + '.');
    }
    defaultMaxListeners = arg;
  }
});

EventEmitter.init = function() {

  if (this._events === undefined ||
      this._events === Object.getPrototypeOf(this)._events) {
    this._events = Object.create(null);
    this._eventsCount = 0;
  }

  this._maxListeners = this._maxListeners || undefined;
};

// Obviously not all Emitters should be limited to 10. This function allows
// that to be increased. Set to zero for unlimited.
EventEmitter.prototype.setMaxListeners = function setMaxListeners(n) {
  if (typeof n !== 'number' || n < 0 || NumberIsNaN(n)) {
    throw new RangeError('The value of "n" is out of range. It must be a non-negative number. Received ' + n + '.');
  }
  this._maxListeners = n;
  return this;
};

function _getMaxListeners(that) {
  if (that._maxListeners === undefined)
    return EventEmitter.defaultMaxListeners;
  return that._maxListeners;
}

EventEmitter.prototype.getMaxListeners = function getMaxListeners() {
  return _getMaxListeners(this);
};

EventEmitter.prototype.emit = function emit(type) {
  var args = [];
  for (var i = 1; i < arguments.length; i++) args.push(arguments[i]);
  var doError = (type === 'error');

  var events = this._events;
  if (events !== undefined)
    doError = (doError && events.error === undefined);
  else if (!doError)
    return false;

  // If there is no 'error' event listener then throw.
  if (doError) {
    var er;
    if (args.length > 0)
      er = args[0];
    if (er instanceof Error) {
      // Note: The comments on the `throw` lines are intentional, they show
      // up in Node's output if this results in an unhandled exception.
      throw er; // Unhandled 'error' event
    }
    // At least give some kind of context to the user
    var err = new Error('Unhandled error.' + (er ? ' (' + er.message + ')' : ''));
    err.context = er;
    throw err; // Unhandled 'error' event
  }

  var handler = events[type];

  if (handler === undefined)
    return false;

  if (typeof handler === 'function') {
    ReflectApply(handler, this, args);
  } else {
    var len = handler.length;
    var listeners = arrayClone(handler, len);
    for (var i = 0; i < len; ++i)
      ReflectApply(listeners[i], this, args);
  }

  return true;
};

function _addListener(target, type, listener, prepend) {
  var m;
  var events;
  var existing;

  checkListener(listener);

  events = target._events;
  if (events === undefined) {
    events = target._events = Object.create(null);
    target._eventsCount = 0;
  } else {
    // To avoid recursion in the case that type === "newListener"! Before
    // adding it to the listeners, first emit "newListener".
    if (events.newListener !== undefined) {
      target.emit('newListener', type,
                  listener.listener ? listener.listener : listener);

      // Re-assign `events` because a newListener handler could have caused the
      // this._events to be assigned to a new object
      events = target._events;
    }
    existing = events[type];
  }

  if (existing === undefined) {
    // Optimize the case of one listener. Don't need the extra array object.
    existing = events[type] = listener;
    ++target._eventsCount;
  } else {
    if (typeof existing === 'function') {
      // Adding the second element, need to change to array.
      existing = events[type] =
        prepend ? [listener, existing] : [existing, listener];
      // If we've already got an array, just append.
    } else if (prepend) {
      existing.unshift(listener);
    } else {
      existing.push(listener);
    }

    // Check for listener leak
    m = _getMaxListeners(target);
    if (m > 0 && existing.length > m && !existing.warned) {
      existing.warned = true;
      // No error code for this since it is a Warning
      // eslint-disable-next-line no-restricted-syntax
      var w = new Error('Possible EventEmitter memory leak detected. ' +
                          existing.length + ' ' + String(type) + ' listeners ' +
                          'added. Use emitter.setMaxListeners() to ' +
                          'increase limit');
      w.name = 'MaxListenersExceededWarning';
      w.emitter = target;
      w.type = type;
      w.count = existing.length;
      ProcessEmitWarning(w);
    }
  }

  return target;
}

EventEmitter.prototype.addListener = function addListener(type, listener) {
  return _addListener(this, type, listener, false);
};

EventEmitter.prototype.on = EventEmitter.prototype.addListener;

EventEmitter.prototype.prependListener =
    function prependListener(type, listener) {
      return _addListener(this, type, listener, true);
    };

function onceWrapper() {
  if (!this.fired) {
    this.target.removeListener(this.type, this.wrapFn);
    this.fired = true;
    if (arguments.length === 0)
      return this.listener.call(this.target);
    return this.listener.apply(this.target, arguments);
  }
}

function _onceWrap(target, type, listener) {
  var state = { fired: false, wrapFn: undefined, target: target, type: type, listener: listener };
  var wrapped = onceWrapper.bind(state);
  wrapped.listener = listener;
  state.wrapFn = wrapped;
  return wrapped;
}

EventEmitter.prototype.once = function once(type, listener) {
  checkListener(listener);
  this.on(type, _onceWrap(this, type, listener));
  return this;
};

EventEmitter.prototype.prependOnceListener =
    function prependOnceListener(type, listener) {
      checkListener(listener);
      this.prependListener(type, _onceWrap(this, type, listener));
      return this;
    };

// Emits a 'removeListener' event if and only if the listener was removed.
EventEmitter.prototype.removeListener =
    function removeListener(type, listener) {
      var list, events, position, i, originalListener;

      checkListener(listener);

      events = this._events;
      if (events === undefined)
        return this;

      list = events[type];
      if (list === undefined)
        return this;

      if (list === listener || list.listener === listener) {
        if (--this._eventsCount === 0)
          this._events = Object.create(null);
        else {
          delete events[type];
          if (events.removeListener)
            this.emit('removeListener', type, list.listener || listener);
        }
      } else if (typeof list !== 'function') {
        position = -1;

        for (i = list.length - 1; i >= 0; i--) {
          if (list[i] === listener || list[i].listener === listener) {
            originalListener = list[i].listener;
            position = i;
            break;
          }
        }

        if (position < 0)
          return this;

        if (position === 0)
          list.shift();
        else {
          spliceOne(list, position);
        }

        if (list.length === 1)
          events[type] = list[0];

        if (events.removeListener !== undefined)
          this.emit('removeListener', type, originalListener || listener);
      }

      return this;
    };

EventEmitter.prototype.off = EventEmitter.prototype.removeListener;

EventEmitter.prototype.removeAllListeners =
    function removeAllListeners(type) {
      var listeners, events, i;

      events = this._events;
      if (events === undefined)
        return this;

      // not listening for removeListener, no need to emit
      if (events.removeListener === undefined) {
        if (arguments.length === 0) {
          this._events = Object.create(null);
          this._eventsCount = 0;
        } else if (events[type] !== undefined) {
          if (--this._eventsCount === 0)
            this._events = Object.create(null);
          else
            delete events[type];
        }
        return this;
      }

      // emit removeListener for all listeners on all events
      if (arguments.length === 0) {
        var keys = Object.keys(events);
        var key;
        for (i = 0; i < keys.length; ++i) {
          key = keys[i];
          if (key === 'removeListener') continue;
          this.removeAllListeners(key);
        }
        this.removeAllListeners('removeListener');
        this._events = Object.create(null);
        this._eventsCount = 0;
        return this;
      }

      listeners = events[type];

      if (typeof listeners === 'function') {
        this.removeListener(type, listeners);
      } else if (listeners !== undefined) {
        // LIFO order
        for (i = listeners.length - 1; i >= 0; i--) {
          this.removeListener(type, listeners[i]);
        }
      }

      return this;
    };

function _listeners(target, type, unwrap) {
  var events = target._events;

  if (events === undefined)
    return [];

  var evlistener = events[type];
  if (evlistener === undefined)
    return [];

  if (typeof evlistener === 'function')
    return unwrap ? [evlistener.listener || evlistener] : [evlistener];

  return unwrap ?
    unwrapListeners(evlistener) : arrayClone(evlistener, evlistener.length);
}

EventEmitter.prototype.listeners = function listeners(type) {
  return _listeners(this, type, true);
};

EventEmitter.prototype.rawListeners = function rawListeners(type) {
  return _listeners(this, type, false);
};

EventEmitter.listenerCount = function(emitter, type) {
  if (typeof emitter.listenerCount === 'function') {
    return emitter.listenerCount(type);
  } else {
    return listenerCount.call(emitter, type);
  }
};

EventEmitter.prototype.listenerCount = listenerCount;
function listenerCount(type) {
  var events = this._events;

  if (events !== undefined) {
    var evlistener = events[type];

    if (typeof evlistener === 'function') {
      return 1;
    } else if (evlistener !== undefined) {
      return evlistener.length;
    }
  }

  return 0;
}

EventEmitter.prototype.eventNames = function eventNames() {
  return this._eventsCount > 0 ? ReflectOwnKeys(this._events) : [];
};

function arrayClone(arr, n) {
  var copy = new Array(n);
  for (var i = 0; i < n; ++i)
    copy[i] = arr[i];
  return copy;
}

function spliceOne(list, index) {
  for (; index + 1 < list.length; index++)
    list[index] = list[index + 1];
  list.pop();
}

function unwrapListeners(arr) {
  var ret = new Array(arr.length);
  for (var i = 0; i < ret.length; ++i) {
    ret[i] = arr[i].listener || arr[i];
  }
  return ret;
}

function once(emitter, name) {
  return new Promise(function (resolve, reject) {
    function errorListener(err) {
      emitter.removeListener(name, resolver);
      reject(err);
    }

    function resolver() {
      if (typeof emitter.removeListener === 'function') {
        emitter.removeListener('error', errorListener);
      }
      resolve([].slice.call(arguments));
    }
    eventTargetAgnosticAddListener(emitter, name, resolver, { once: true });
    if (name !== 'error') {
      addErrorHandlerIfEventEmitter(emitter, errorListener, { once: true });
    }
  });
}

function addErrorHandlerIfEventEmitter(emitter, handler, flags) {
  if (typeof emitter.on === 'function') {
    eventTargetAgnosticAddListener(emitter, 'error', handler, flags);
  }
}

function eventTargetAgnosticAddListener(emitter, name, listener, flags) {
  if (typeof emitter.on === 'function') {
    if (flags.once) {
      emitter.once(name, listener);
    } else {
      emitter.on(name, listener);
    }
  } else if (typeof emitter.addEventListener === 'function') {
    // EventTarget does not have `error` event semantics like Node
    // EventEmitters, we do not listen for `error` events here.
    emitter.addEventListener(name, function wrapListener(arg) {
      // IE does not have builtin `{ once: true }` support so we
      // have to do it manually.
      if (flags.once) {
        emitter.removeEventListener(name, wrapListener);
      }
      listener(arg);
    });
  } else {
    throw new TypeError('The "emitter" argument must be of type EventEmitter. Received type ' + typeof emitter);
  }
}

var eventsExports = events.exports;

type EventMap = {
  [key: string]: (...args: any[]) => void
}

/**
 * Type-safe event emitter.
 *
 * Use it like this:
 *
 * ```typescript
 * type MyEvents = {
 *   error: (error: Error) => void;
 *   message: (from: string, content: string) => void;
 * }
 *
 * const myEmitter = new EventEmitter() as TypedEmitter<MyEvents>;
 *
 * myEmitter.emit("error", "x")  // <- Will catch this type error;
 * ```
 */
interface TypedEventEmitter<Events extends EventMap> {
  addListener<E extends keyof Events> (event: E, listener: Events[E]): this
  on<E extends keyof Events> (event: E, listener: Events[E]): this
  once<E extends keyof Events> (event: E, listener: Events[E]): this
  prependListener<E extends keyof Events> (event: E, listener: Events[E]): this
  prependOnceListener<E extends keyof Events> (event: E, listener: Events[E]): this

  off<E extends keyof Events>(event: E, listener: Events[E]): this
  removeAllListeners<E extends keyof Events> (event?: E): this
  removeListener<E extends keyof Events> (event: E, listener: Events[E]): this

  emit<E extends keyof Events> (event: E, ...args: Parameters<Events[E]>): boolean
  // The sloppy `eventNames()` return type is to mitigate type incompatibilities - see #5
  eventNames (): (keyof Events | string | symbol)[]
  rawListeners<E extends keyof Events> (event: E): Events[E][]
  listeners<E extends keyof Events> (event: E): Events[E][]
  listenerCount<E extends keyof Events> (event: E): number

  getMaxListeners (): number
  setMaxListeners (maxListeners: number): this
}

type DisconnectParams = {
    code: number;
    reason: string;
};
declare enum ClientEvents {
    CONNECTION = "connection",
    DISCONNECTION = "disconnection",
    ERROR = "error",
    RUNNING = "running",
    TEST = "test",
    END = "end"
}
type ConnectListener = (ws: WebSocket) => void;
type DisconnectListener = (params: Partial<DisconnectParams>) => void;
type ErrorListener = (e: Error) => void;
type RunningListener = (runner: Runner) => void;
type TestListener = () => void;
type EndListener = (failures: number) => void;
type MessageEvents = {
    connection: ConnectListener;
    disconnection: DisconnectListener;
    error: ErrorListener;
    running: RunningListener;
    test: TestListener;
    end: EndListener;
};
declare class ClientEventEmitter implements TypedEventEmitter<MessageEvents> {
    private emitter;
    constructor(EventEmitterType: typeof eventsExports.EventEmitter, debug: Debugger);
    addListener<E extends keyof MessageEvents>(event: E, listener: MessageEvents[E]): this;
    removeListener<E extends keyof MessageEvents>(event: E, listener: MessageEvents[E]): this;
    removeAllListeners<E extends keyof MessageEvents>(event?: E): this;
    on<E extends keyof MessageEvents>(event: E, listener: MessageEvents[E]): this;
    once<E extends keyof MessageEvents>(event: E, listener: MessageEvents[E]): this;
    off<E extends keyof MessageEvents>(event: E, listener: MessageEvents[E]): this;
    emit<E extends keyof MessageEvents>(event: E, ...args: Parameters<MessageEvents[E]>): boolean;
    setMaxListeners(n: number): this;
    getMaxListeners(): number;
    listeners<E extends keyof MessageEvents>(event: E): MessageEvents[E][];
    rawListeners<E extends keyof MessageEvents>(event: E): MessageEvents[E][];
    listenerCount<E extends keyof MessageEvents>(event: E): number;
    prependListener<E extends keyof MessageEvents>(event: E, listener: MessageEvents[E]): this;
    prependOnceListener<E extends keyof MessageEvents>(event: E, listener: MessageEvents[E]): this;
    eventNames(): (keyof MessageEvents)[];
}

type CustomInterface = (rootSuite: Suite) => void;
type InterfaceConfig = Interface | CustomInterface;
type MochaOptions = {
    grep?: RegExp;
    delay?: boolean;
    invert?: boolean;
    context?: CustomContext;
    timeout?: number;
    slow?: number;
};
type ClientConfig = {
    /**
     * The URL of the Mocha Remote Server to connect to.
     * @default "ws://localhost:8090"
     */
    url: string;
    /**
     * The id to present to the server.
     * @default "default"
     */
    id: string;
    /**
     * Title of the root suite.
     * @default ""
     */
    title: string;
    /**
     * Connect automatically when client is constructed.
     * @default true
     */
    autoConnect: boolean;
    /**
     * Re-connect automatically if the client gets disconnected.
     * @default true
     */
    autoReconnect: boolean;
    /**
     * Disconnect after a run has ended.
     * @default true
     */
    autoDisconnect: boolean;
    /**
     * Delay between attempts to reconnect (in milliseconds).
     * @default 1000
     */
    reconnectDelay: number;
    /**
     * The UI (i.e. "describe", "test", "it", etc.) to present to tests.
     * @default "bdd"
     */
    ui: InterfaceConfig;
    /**
     * Called when a test fails error occurs to allow transformations of the stacktrace
     */
    transformFailure?: (test: Mocha.Test, error: Error) => Promise<Error>;
    /**
     * A funcion called to load tests
     */
    tests(context: CustomContext): void | Promise<void>;
} & MochaConfig;
declare enum ClientState {
    DISCONNECTED = "disconnected",
    CONNECTING = "connecting",
    CONNECTED = "connected",
    RUNNING = "running"
}
declare class Client extends ClientEventEmitter {
    static WebSocket: typeof WebSocket;
    static EventEmitter: typeof eventsExports.EventEmitter;
    static DEFAULT_CONFIG: ClientConfig;
    private static createRootSuite;
    private static parseGrep;
    private static debugCounter;
    private static nextDebug;
    suite: Suite;
    readonly config: ClientConfig;
    private readonly debug;
    private previousRunner?;
    private options;
    private _state;
    private ws?;
    private reconnectTimeout?;
    constructor(config?: Partial<ClientConfig>, debug?: Debugger);
    connect(): Promise<void>;
    disconnect(): void;
    loadFile(context: CustomContext): Promise<void>;
    run(fn?: (failures: number) => void, runOptions?: MochaOptions): Promise<Runner>;
    context(value: CustomContext | undefined): this;
    grep(value: RegExp | string | undefined): this;
    timeout(value: number | undefined): this;
    slow(value: number | undefined): this;
    get state(): ClientState;
    /**
     * Resets the internal state to prepare for a potential re-run of the tests.
     * This includes cloning the root suite preparing for a reload of the tests.
     */
    private reset;
    private parseMessage;
    private handleClose;
    private handleMessage;
    private send;
    private pendingEvent;
    /**
     * Queue an event to be sent, use this to prevent out of order delivery
     */
    private queueEvent;
    private sendEvent;
    private bindInterface;
    private get mockedMocha();
}

export { Client, type ClientConfig, ClientEventEmitter, ClientEvents, ClientState, type ConnectListener, type CustomContext, type DisconnectListener, type DisconnectParams, type EndListener, type ErrorListener, type MessageEvents, type MochaConfig, type RunningListener, type TestListener, index_d as mocha, serialization };
