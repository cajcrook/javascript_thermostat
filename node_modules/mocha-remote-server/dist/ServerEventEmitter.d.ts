/// <reference types="node" />
import TypedEmitter from "typed-emitter";
import type WebSocket from "ws";
import type http from "http";
import type { Debugger } from "debug";
import type { Server } from "./Server";
export declare enum ServerEvents {
    STARTED = "started",
    CONNECTION = "connection",
    DISCONNECTION = "disconnection",
    ERROR = "error",
    END = "end"
}
export type StartedListener = (server: Server) => void;
export type ConnectionListener = (ws: WebSocket, req: http.IncomingMessage) => void;
export type DisconnectionListener = (ws: WebSocket, code: number, reason: string) => void;
export type ErrorListener = (error: Error) => void;
export type EndListener = () => void;
export type MessageEvents = {
    started: StartedListener;
    connection: ConnectionListener;
    disconnection: DisconnectionListener;
    error: ErrorListener;
    end: EndListener;
};
export declare class ServerEventEmitter implements TypedEmitter<MessageEvents> {
    private emitter;
    constructor(debug: Debugger);
    addListener<E extends keyof MessageEvents>(event: E, listener: MessageEvents[E]): this;
    removeListener<E extends keyof MessageEvents>(event: E, listener: MessageEvents[E]): this;
    removeAllListeners<E extends keyof MessageEvents>(event?: E): this;
    on<E extends keyof MessageEvents>(event: E, listener: MessageEvents[E]): this;
    once<E extends keyof MessageEvents>(event: E, listener: MessageEvents[E]): this;
    off<E extends keyof MessageEvents>(event: E, listener: MessageEvents[E]): this;
    emit<E extends keyof MessageEvents>(event: E, ...args: Parameters<MessageEvents[E]>): boolean;
    setMaxListeners(n: number): this;
    getMaxListeners(): number;
    listeners<E extends keyof MessageEvents>(event: E): MessageEvents[E][];
    rawListeners<E extends keyof MessageEvents>(event: E): MessageEvents[E][];
    listenerCount<E extends keyof MessageEvents>(event: E): number;
    prependListener<E extends keyof MessageEvents>(event: E, listener: MessageEvents[E]): this;
    prependOnceListener<E extends keyof MessageEvents>(event: E, listener: MessageEvents[E]): this;
    eventNames(): (keyof MessageEvents)[];
}
