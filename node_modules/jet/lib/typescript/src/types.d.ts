import { z } from 'zod';
export declare const JetConfigSchema: z.ZodOptional<z.ZodObject<{
    port: z.ZodOptional<z.ZodNumber>;
    timeout: z.ZodOptional<z.ZodNumber>;
    slow: z.ZodOptional<z.ZodNumber>;
    metroPort: z.ZodOptional<z.ZodNumber>;
    reporter: z.ZodOptional<z.ZodString>;
    hostname: z.ZodOptional<z.ZodString>;
    grep: z.ZodOptional<z.ZodString>;
    context: z.ZodOptional<z.ZodRecord<z.ZodString, z.ZodString>>;
    reporterOptions: z.ZodOptional<z.ZodRecord<z.ZodString, z.ZodString>>;
    watch: z.ZodOptional<z.ZodOptional<z.ZodBoolean>>;
    invert: z.ZodOptional<z.ZodOptional<z.ZodBoolean>>;
    coverage: z.ZodOptional<z.ZodOptional<z.ZodBoolean>>;
    exitOnError: z.ZodOptional<z.ZodOptional<z.ZodBoolean>>;
}, "strip", z.ZodTypeAny, {
    port?: number | undefined;
    timeout?: number | undefined;
    slow?: number | undefined;
    metroPort?: number | undefined;
    reporter?: string | undefined;
    hostname?: string | undefined;
    grep?: string | undefined;
    context?: Record<string, string> | undefined;
    reporterOptions?: Record<string, string> | undefined;
    watch?: boolean | undefined;
    invert?: boolean | undefined;
    coverage?: boolean | undefined;
    exitOnError?: boolean | undefined;
}, {
    port?: number | undefined;
    timeout?: number | undefined;
    slow?: number | undefined;
    metroPort?: number | undefined;
    reporter?: string | undefined;
    hostname?: string | undefined;
    grep?: string | undefined;
    context?: Record<string, string> | undefined;
    reporterOptions?: Record<string, string> | undefined;
    watch?: boolean | undefined;
    invert?: boolean | undefined;
    coverage?: boolean | undefined;
    exitOnError?: boolean | undefined;
}>>;
export type JetConfig = z.infer<typeof JetConfigSchema>;
//# sourceMappingURL=types.d.ts.map